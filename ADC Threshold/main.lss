
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e7c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000d  00800060  00800060  00000ef0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000003ac  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000108a  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000389  00000000  00000000  00002346  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000df6  00000000  00000000  000026cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000320  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000047e  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000077a  00000000  00000000  00003c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 36       	cpi	r26, 0x6D	; 109
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <main>
  74:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
  80:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
  82:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
  84:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
  86:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
  88:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
  8a:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
  8c:	11 ba       	out	0x11, r1	; 17
}
  8e:	08 95       	ret

00000090 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
  90:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
  92:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
  94:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
  96:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
  98:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
  9a:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
  9c:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
  9e:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
  a0:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;
  a6:	8f e8       	ldi	r24, 0x8F	; 143
  a8:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
  aa:	82 ea       	ldi	r24, 0xA2	; 162
  ac:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
  ae:	89 e1       	ldi	r24, 0x19	; 25
  b0:	8e bd       	out	0x2e, r24	; 46
}
  b2:	08 95       	ret

000000b4 <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
  b4:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
  b6:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
  bc:	87 e8       	ldi	r24, 0x87	; 135
  be:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	88 b9       	out	0x08, r24	; 8
}
  c4:	08 95       	ret

000000c6 <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
  c6:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
  c8:	87 70       	andi	r24, 0x07	; 7
  ca:	80 66       	ori	r24, 0x60	; 96
  cc:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
  ce:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
  d0:	36 99       	sbic	0x06, 6	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
  d4:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
  d6:	08 95       	ret

000000d8 <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
  d8:	ac 01       	movw	r20, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	60 e9       	ldi	r22, 0x90	; 144
  de:	71 e0       	ldi	r23, 0x01	; 1
  e0:	0c c0       	rjmp	.+24     	; 0xfa <delay_sec+0x22>
  e2:	fb 01       	movw	r30, r22
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	24 30       	cpi	r18, 0x04	; 4
  f0:	19 f0       	breq	.+6      	; 0xf8 <delay_sec+0x20>
  f2:	84 ec       	ldi	r24, 0xC4	; 196
  f4:	99 e0       	ldi	r25, 0x09	; 9
  f6:	f5 cf       	rjmp	.-22     	; 0xe2 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
  f8:	3f 5f       	subi	r19, 0xFF	; 255
  fa:	83 2f       	mov	r24, r19
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	84 17       	cp	r24, r20
 100:	95 07       	cpc	r25, r21
 102:	14 f4       	brge	.+4      	; 0x108 <delay_sec+0x30>
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <delay_sec+0x1a>
 108:	08 95       	ret

0000010a <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
 10a:	af 92       	push	r10
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
	_delay_ms(n);
 11a:	aa 27       	eor	r26, r26
 11c:	97 fd       	sbrc	r25, 7
 11e:	a0 95       	com	r26
 120:	ba 2f       	mov	r27, r26
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__floatsisf>
 12a:	5b 01       	movw	r10, r22
 12c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	4a e7       	ldi	r20, 0x7A	; 122
 134:	55 e4       	ldi	r21, 0x45	; 69
 136:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3>
 13a:	7b 01       	movw	r14, r22
 13c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e8       	ldi	r20, 0x80	; 128
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__cmpsf2>
 14a:	88 23       	and	r24, r24
 14c:	1c f4       	brge	.+6      	; 0x154 <delay_millisec+0x4a>
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	24 c0       	rjmp	.+72     	; 0x19c <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
 154:	c8 01       	movw	r24, r16
 156:	b7 01       	movw	r22, r14
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	3f ef       	ldi	r19, 0xFF	; 255
 15c:	4f e7       	ldi	r20, 0x7F	; 127
 15e:	57 e4       	ldi	r21, 0x47	; 71
 160:	0e 94 99 06 	call	0xd32	; 0xd32 <__gesf2>
 164:	18 16       	cp	r1, r24
 166:	b4 f4       	brge	.+44     	; 0x194 <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 168:	c6 01       	movw	r24, r12
 16a:	b5 01       	movw	r22, r10
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e2       	ldi	r20, 0x20	; 32
 172:	51 e4       	ldi	r21, 0x41	; 65
 174:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3>
 178:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
 17c:	80 e9       	ldi	r24, 0x90	; 144
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	05 c0       	rjmp	.+10     	; 0x18c <delay_millisec+0x82>
 182:	fc 01       	movw	r30, r24
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 188:	61 50       	subi	r22, 0x01	; 1
 18a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	61 15       	cp	r22, r1
 18e:	71 05       	cpc	r23, r1
 190:	c1 f7       	brne	.-16     	; 0x182 <delay_millisec+0x78>
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 194:	c8 01       	movw	r24, r16
 196:	b7 01       	movw	r22, r14
 198:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
 19c:	cb 01       	movw	r24, r22
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <delay_millisec+0x94>
}
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	bf 90       	pop	r11
 1b0:	af 90       	pop	r10
 1b2:	08 95       	ret

000001b4 <delay_microsec>:

void delay_microsec(int n)
{
 1b4:	af 92       	push	r10
 1b6:	bf 92       	push	r11
 1b8:	cf 92       	push	r12
 1ba:	df 92       	push	r13
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
	_delay_us(n);
 1c4:	aa 27       	eor	r26, r26
 1c6:	97 fd       	sbrc	r25, 7
 1c8:	a0 95       	com	r26
 1ca:	ba 2f       	mov	r27, r26
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__floatsisf>
 1d4:	5b 01       	movw	r10, r22
 1d6:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 1d8:	2b ea       	ldi	r18, 0xAB	; 171
 1da:	3a ea       	ldi	r19, 0xAA	; 170
 1dc:	4a ea       	ldi	r20, 0xAA	; 170
 1de:	50 e4       	ldi	r21, 0x40	; 64
 1e0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3>
 1e4:	7b 01       	movw	r14, r22
 1e6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e8       	ldi	r20, 0x80	; 128
 1ee:	5f e3       	ldi	r21, 0x3F	; 63
 1f0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__cmpsf2>
 1f4:	88 23       	and	r24, r24
 1f6:	14 f4       	brge	.+4      	; 0x1fc <delay_microsec+0x48>
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	54 c0       	rjmp	.+168    	; 0x2a4 <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
 1fc:	c8 01       	movw	r24, r16
 1fe:	b7 01       	movw	r22, r14
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4f e7       	ldi	r20, 0x7F	; 127
 206:	53 e4       	ldi	r21, 0x43	; 67
 208:	0e 94 99 06 	call	0xd32	; 0xd32 <__gesf2>
 20c:	18 16       	cp	r1, r24
 20e:	0c f0       	brlt	.+2      	; 0x212 <delay_microsec+0x5e>
 210:	45 c0       	rjmp	.+138    	; 0x29c <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
 212:	c6 01       	movw	r24, r12
 214:	b5 01       	movw	r22, r10
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	4a e7       	ldi	r20, 0x7A	; 122
 21c:	54 e4       	ldi	r21, 0x44	; 68
 21e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__divsf3>
 222:	5b 01       	movw	r10, r22
 224:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	4a e7       	ldi	r20, 0x7A	; 122
 22c:	55 e4       	ldi	r21, 0x45	; 69
 22e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3>
 232:	7b 01       	movw	r14, r22
 234:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e8       	ldi	r20, 0x80	; 128
 23c:	5f e3       	ldi	r21, 0x3F	; 63
 23e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__cmpsf2>
 242:	88 23       	and	r24, r24
 244:	1c f4       	brge	.+6      	; 0x24c <delay_microsec+0x98>
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	24 c0       	rjmp	.+72     	; 0x294 <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
 24c:	c8 01       	movw	r24, r16
 24e:	b7 01       	movw	r22, r14
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	3f ef       	ldi	r19, 0xFF	; 255
 254:	4f e7       	ldi	r20, 0x7F	; 127
 256:	57 e4       	ldi	r21, 0x47	; 71
 258:	0e 94 99 06 	call	0xd32	; 0xd32 <__gesf2>
 25c:	18 16       	cp	r1, r24
 25e:	b4 f4       	brge	.+44     	; 0x28c <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 260:	c6 01       	movw	r24, r12
 262:	b5 01       	movw	r22, r10
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e2       	ldi	r20, 0x20	; 32
 26a:	51 e4       	ldi	r21, 0x41	; 65
 26c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3>
 270:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
 274:	80 e9       	ldi	r24, 0x90	; 144
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	05 c0       	rjmp	.+10     	; 0x284 <delay_microsec+0xd0>
 27a:	fc 01       	movw	r30, r24
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	61 50       	subi	r22, 0x01	; 1
 282:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	61 15       	cp	r22, r1
 286:	71 05       	cpc	r23, r1
 288:	c1 f7       	brne	.-16     	; 0x27a <delay_microsec+0xc6>
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 28c:	c8 01       	movw	r24, r16
 28e:	b7 01       	movw	r22, r14
 290:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
 294:	cb 01       	movw	r24, r22
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <delay_microsec+0xe2>
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 29c:	c8 01       	movw	r24, r16
 29e:	b7 01       	movw	r22, r14
 2a0:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a4:	6a 95       	dec	r22
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <delay_microsec+0xf0>
}
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	bf 90       	pop	r11
 2b6:	af 90       	pop	r10
 2b8:	08 95       	ret

000002ba <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
sensorbyte=0;
 2c2:	10 92 60 00 	sts	0x0060, r1
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
 2ca:	01 e0       	ldi	r16, 0x01	; 1
 2cc:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
	  if(temp[i]<threshold)
 2d4:	87 33       	cpi	r24, 0x37	; 55
 2d6:	60 f4       	brcc	.+24     	; 0x2f0 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
 2d8:	98 01       	movw	r18, r16
 2da:	0c 2e       	mov	r0, r28
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <check_sensors+0x28>
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <check_sensors+0x24>
 2e6:	80 91 60 00 	lds	r24, 0x0060
 2ea:	82 2b       	or	r24, r18
 2ec:	80 93 60 00 	sts	0x0060, r24
 2f0:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
 2f2:	c4 30       	cpi	r28, 0x04	; 4
 2f4:	d1 05       	cpc	r29, r1
 2f6:	59 f7       	brne	.-42     	; 0x2ce <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 308:	80 93 61 00 	sts	0x0061, r24
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 312:	80 93 62 00 	sts	0x0062, r24
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 31c:	80 93 63 00 	sts	0x0063, r24
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 326:	80 93 64 00 	sts	0x0064, r24
	}

		
}
 32a:	08 95       	ret

0000032c <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 332:	80 93 69 00 	sts	0x0069, r24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 33c:	80 93 6a 00 	sts	0x006A, r24
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 346:	80 93 6b 00 	sts	0x006B, r24
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 350:	80 93 6c 00 	sts	0x006C, r24
 	}

		
}
 354:	08 95       	ret

00000356 <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	c0 e0       	ldi	r28, 0x00	; 0
 35e:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
 360:	1f ef       	ldi	r17, 0xFF	; 255
 362:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
 364:	84 e6       	ldi	r24, 0x64	; 100
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
		LED=0x00;
 36c:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
 36e:	84 e6       	ldi	r24, 0x64	; 100
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 85 00 	call	0x10a	; 0x10a <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
 376:	21 96       	adiw	r28, 0x01	; 1
 378:	c5 30       	cpi	r28, 0x05	; 5
 37a:	d1 05       	cpc	r29, r1
 37c:	91 f7       	brne	.-28     	; 0x362 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	08 95       	ret

00000386 <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
 386:	9b bd       	out	0x2b, r25	; 43
 388:	8a bd       	out	0x2a, r24	; 42
}
 38a:	08 95       	ret

0000038c <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
 38c:	99 bd       	out	0x29, r25	; 41
 38e:	88 bd       	out	0x28, r24	; 40
}
 390:	08 95       	ret

00000392 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
 392:	87 b3       	in	r24, 0x17	; 23
 394:	80 7f       	andi	r24, 0xF0	; 240
 396:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
 398:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
 39a:	c5 98       	cbi	0x18, 5	; 24
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
 3a2:	22 e0       	ldi	r18, 0x02	; 2
 3a4:	35 e0       	ldi	r19, 0x05	; 5
 3a6:	c7 9a       	sbi	0x18, 7	; 24
 3a8:	82 2f       	mov	r24, r18
 3aa:	8a 95       	dec	r24
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
 3ae:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 3b0:	82 95       	swap	r24
 3b2:	80 7f       	andi	r24, 0xF0	; 240
 3b4:	92 2f       	mov	r25, r18
 3b6:	9a 95       	dec	r25
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
 3ba:	c7 98       	cbi	0x18, 7	; 24
 3bc:	93 2f       	mov	r25, r19
 3be:	9a 95       	dec	r25
 3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
 3c2:	c7 9a       	sbi	0x18, 7	; 24
 3c4:	92 2f       	mov	r25, r18
 3c6:	9a 95       	dec	r25
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
 3ca:	96 b3       	in	r25, 0x16	; 22
 3cc:	92 2f       	mov	r25, r18
 3ce:	9a 95       	dec	r25
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
 3d2:	c7 98       	cbi	0x18, 7	; 24
 3d4:	93 2f       	mov	r25, r19
 3d6:	9a 95       	dec	r25
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 3da:	87 fd       	sbrc	r24, 7
 3dc:	e4 cf       	rjmp	.-56     	; 0x3a6 <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
 3de:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 3e0:	87 b3       	in	r24, 0x17	; 23
 3e2:	8f 60       	ori	r24, 0x0F	; 15
 3e4:	87 bb       	out	0x17, r24	; 23

}
 3e6:	08 95       	ret

000003e8 <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
 3e8:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
 3ea:	66 23       	and	r22, r22
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <lcd_byte+0xa>
	CLEAR_RS();
 3ee:	c5 98       	cbi	0x18, 5	; 24
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <lcd_byte+0xc>
else
	SET_RS();
 3f2:	c5 9a       	sbi	0x18, 5	; 24
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	8a 95       	dec	r24
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
 3fa:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
 3fc:	88 b3       	in	r24, 0x18	; 24
 3fe:	92 2f       	mov	r25, r18
 400:	92 95       	swap	r25
 402:	9f 70       	andi	r25, 0x0F	; 15
 404:	80 7f       	andi	r24, 0xF0	; 240
 406:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 408:	98 bb       	out	0x18, r25	; 24
 40a:	95 e0       	ldi	r25, 0x05	; 5
 40c:	89 2f       	mov	r24, r25
 40e:	8a 95       	dec	r24
 410:	f1 f7       	brne	.-4      	; 0x40e <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
 412:	c7 98       	cbi	0x18, 7	; 24
 414:	89 2f       	mov	r24, r25
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <lcd_byte+0x2e>
_delay_us(1);
SET_E();
 41a:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
 41c:	88 b3       	in	r24, 0x18	; 24
 41e:	2f 70       	andi	r18, 0x0F	; 15
 420:	80 7f       	andi	r24, 0xF0	; 240
 422:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
 424:	88 bb       	out	0x18, r24	; 24
 426:	89 2f       	mov	r24, r25
 428:	8a 95       	dec	r24
 42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
 42c:	c7 98       	cbi	0x18, 7	; 24
 42e:	9a 95       	dec	r25
 430:	f1 f7       	brne	.-4      	; 0x42e <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
 432:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_busy_loop>
}
 436:	08 95       	ret

00000438 <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
 438:	1f 93       	push	r17
 43a:	18 2f       	mov	r17, r24
 43c:	8c e2       	ldi	r24, 0x2C	; 44
 43e:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 440:	20 e9       	ldi	r18, 0x90	; 144
 442:	31 e0       	ldi	r19, 0x01	; 1
 444:	f9 01       	movw	r30, r18
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 44a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 44c:	d9 f7       	brne	.-10     	; 0x444 <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 44e:	87 b3       	in	r24, 0x17	; 23
 450:	8f 60       	ori	r24, 0x0F	; 15
 452:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 454:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 456:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 458:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
 45a:	88 b3       	in	r24, 0x18	; 24
 45c:	80 7f       	andi	r24, 0xF0	; 240
 45e:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 460:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
 462:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
 464:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	8a 95       	dec	r24
 46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
	_delay_us(0.3);	//tAS
	SET_E();
 46c:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
 46e:	c1 9a       	sbi	0x18, 1	; 24
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	98 2f       	mov	r25, r24
 474:	9a 95       	dec	r25
 476:	f1 f7       	brne	.-4      	; 0x474 <__stack+0x15>
	_delay_us(1);
	CLEAR_E();
 478:	c7 98       	cbi	0x18, 7	; 24
 47a:	8a 95       	dec	r24
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
 47e:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
 482:	81 2f       	mov	r24, r17
 484:	8c 60       	ori	r24, 0x0C	; 12
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
 48c:	88 e2       	ldi	r24, 0x28	; 40
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_byte>
}
 494:	1f 91       	pop	r17
 496:	08 95       	ret

00000498 <lcd_write_string>:
void lcd_write_string(const char *msg)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
 49e:	04 c0       	rjmp	.+8      	; 0x4a8 <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_byte>
	msg++;
 4a6:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
 4a8:	88 81       	ld	r24, Y
 4aa:	88 23       	and	r24, r24
 4ac:	c9 f7       	brne	.-14     	; 0x4a0 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	df 93       	push	r29
 4be:	cf 93       	push	r28
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <lcd_write_int+0xe>
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <lcd_write_int+0x10>
 4c4:	0f 92       	push	r0
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	9c 01       	movw	r18, r24
 4cc:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
 4ce:	fe 01       	movw	r30, r28
 4d0:	31 96       	adiw	r30, 0x01	; 1
 4d2:	85 e0       	ldi	r24, 0x05	; 5
 4d4:	df 01       	movw	r26, r30
 4d6:	1d 92       	st	X+, r1
 4d8:	8a 95       	dec	r24
 4da:	e9 f7       	brne	.-6      	; 0x4d6 <lcd_write_int+0x22>
 4dc:	fe 01       	movw	r30, r28
 4de:	35 96       	adiw	r30, 0x05	; 5
 4e0:	0d c0       	rjmp	.+26     	; 0x4fc <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 4e2:	c9 01       	movw	r24, r18
 4e4:	6a e0       	ldi	r22, 0x0A	; 10
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodhi4>
 4ec:	80 83       	st	Z, r24
	val=val/10;
 4ee:	c9 01       	movw	r24, r18
 4f0:	6a e0       	ldi	r22, 0x0A	; 10
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodhi4>
 4f8:	9b 01       	movw	r18, r22
 4fa:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 4fc:	21 15       	cp	r18, r1
 4fe:	31 05       	cpc	r19, r1
 500:	81 f7       	brne	.-32     	; 0x4e2 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 502:	bf ef       	ldi	r27, 0xFF	; 255
 504:	0f 3f       	cpi	r16, 0xFF	; 255
 506:	1b 07       	cpc	r17, r27
 508:	79 f4       	brne	.+30     	; 0x528 <lcd_write_int+0x74>
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 50e:	ae 01       	movw	r20, r28
 510:	4f 5f       	subi	r20, 0xFF	; 255
 512:	5f 4f       	sbci	r21, 0xFF	; 255
 514:	02 c0       	rjmp	.+4      	; 0x51a <lcd_write_int+0x66>
 516:	2f 5f       	subi	r18, 0xFF	; 255
 518:	3f 4f       	sbci	r19, 0xFF	; 255
 51a:	fa 01       	movw	r30, r20
 51c:	e2 0f       	add	r30, r18
 51e:	f3 1f       	adc	r31, r19
 520:	80 81       	ld	r24, Z
 522:	88 23       	and	r24, r24
 524:	c1 f3       	breq	.-16     	; 0x516 <lcd_write_int+0x62>
 526:	04 c0       	rjmp	.+8      	; 0x530 <lcd_write_int+0x7c>
	else
		j=5-field_length;
 528:	25 e0       	ldi	r18, 0x05	; 5
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	20 1b       	sub	r18, r16
 52e:	31 0b       	sbc	r19, r17
 530:	7e 01       	movw	r14, r28
 532:	08 94       	sec
 534:	e1 1c       	adc	r14, r1
 536:	f1 1c       	adc	r15, r1
 538:	e2 0e       	add	r14, r18
 53a:	f3 1e       	adc	r15, r19
 53c:	89 01       	movw	r16, r18
 53e:	09 c0       	rjmp	.+18     	; 0x552 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
 540:	f7 01       	movw	r30, r14
 542:	81 91       	ld	r24, Z+
 544:	7f 01       	movw	r14, r30
 546:	80 5d       	subi	r24, 0xD0	; 208
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
 54e:	0f 5f       	subi	r16, 0xFF	; 255
 550:	1f 4f       	sbci	r17, 0xFF	; 255
 552:	05 30       	cpi	r16, 0x05	; 5
 554:	11 05       	cpc	r17, r1
 556:	a4 f3       	brlt	.-24     	; 0x540 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	cf 91       	pop	r28
 564:	df 91       	pop	r29
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	08 95       	ret

00000570 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
 570:	88 32       	cpi	r24, 0x28	; 40
 572:	30 f4       	brcc	.+12     	; 0x580 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
 574:	61 11       	cpse	r22, r1
 576:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
 578:	80 68       	ori	r24, 0x80	; 128
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_byte>
 580:	08 95       	ret

00000582 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
 588:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_goto_xy>
 lcd_write_string(msg);
 58c:	c8 01       	movw	r24, r16
 58e:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_write_string>
}
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	08 95       	ret

00000598 <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
 598:	ef 92       	push	r14
 59a:	ff 92       	push	r15
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	8a 01       	movw	r16, r20
 5a2:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
 5a4:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_goto_xy>
 lcd_write_int(val,fl);
 5a8:	c8 01       	movw	r24, r16
 5aa:	b7 01       	movw	r22, r14
 5ac:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcd_write_int>
}
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	08 95       	ret

000005ba <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
 5ba:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
 5bc:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
 5be:	87 e0       	ldi	r24, 0x07	; 7
 5c0:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
 5c2:	87 e6       	ldi	r24, 0x67	; 103
 5c4:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
 5c6:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
 5c8:	88 e9       	ldi	r24, 0x98	; 152
 5ca:	8a b9       	out	0x0a, r24	; 10
}
 5cc:	08 95       	ret

000005ce <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5ce:	5d 9b       	sbis	0x0b, 5	; 11
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
 5d2:	8c b9       	out	0x0c, r24	; 12
}
 5d4:	08 95       	ret

000005d6 <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
 5d6:	fc 01       	movw	r30, r24
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5da:	5d 9b       	sbis	0x0b, 5	; 11
 5dc:	fe cf       	rjmp	.-4      	; 0x5da <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
 5de:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
 5e0:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 5e2:	80 81       	ld	r24, Z
 5e4:	88 23       	and	r24, r24
 5e6:	c9 f7       	brne	.-14     	; 0x5da <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
 5e8:	08 95       	ret

000005ea <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5ea:	5d 9b       	sbis	0x0b, 5	; 11
 5ec:	fe cf       	rjmp	.-4      	; 0x5ea <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
 5ee:	8a e0       	ldi	r24, 0x0A	; 10
 5f0:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 5f2:	5d 9b       	sbis	0x0b, 5	; 11
 5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
 5f6:	8d e0       	ldi	r24, 0x0D	; 13
 5f8:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
 5fa:	08 95       	ret

000005fc <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
 5fc:	5f 9b       	sbis	0x0b, 7	; 11
 5fe:	fe cf       	rjmp	.-4      	; 0x5fc <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
 600:	8c b1       	in	r24, 0x0c	; 12
}
 602:	08 95       	ret

00000604 <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	84 bb       	out	0x14, r24	; 20
}
 608:	08 95       	ret

0000060a <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
 60a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 60c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 60e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 610:	af 98       	cbi	0x15, 7	; 21
}
 612:	08 95       	ret

00000614 <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
 614:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 616:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 618:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 61a:	af 98       	cbi	0x15, 7	; 21
}
 61c:	08 95       	ret

0000061e <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
 61e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 620:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 622:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 624:	af 98       	cbi	0x15, 7	; 21
}
 626:	08 95       	ret

00000628 <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
 628:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 62a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 62c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
 62e:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
 630:	08 95       	ret

00000632 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
 632:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 634:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 636:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 638:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
 63a:	08 95       	ret

0000063c <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
 63c:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 63e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 640:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
 642:	af 9a       	sbi	0x15, 7	; 21
}
 644:	08 95       	ret

00000646 <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
 646:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 648:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
 64a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 64c:	af 98       	cbi	0x15, 7	; 21
}
 64e:	08 95       	ret

00000650 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
 650:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 652:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
 654:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 656:	af 9a       	sbi	0x15, 7	; 21
}
 658:	08 95       	ret

0000065a <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
 65a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
 65c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 65e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
 660:	af 98       	cbi	0x15, 7	; 21
}
 662:	08 95       	ret

00000664 <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
 664:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
 666:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 668:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
 66a:	af 9a       	sbi	0x15, 7	; 21
}
 66c:	08 95       	ret

0000066e <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
 66e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
 670:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
 672:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
 674:	af 98       	cbi	0x15, 7	; 21
}
 676:	08 95       	ret

00000678 <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
 678:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
 67a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
 67c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
 67e:	af 9a       	sbi	0x15, 7	; 21
}
 680:	08 95       	ret

00000682 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
 682:	82 b3       	in	r24, 0x12	; 18
 684:	8f 60       	ori	r24, 0x0F	; 15
 686:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
 688:	81 b3       	in	r24, 0x11	; 17
 68a:	80 7f       	andi	r24, 0xF0	; 240
 68c:	81 bb       	out	0x11, r24	; 17
}
 68e:	08 95       	ret

00000690 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
 690:	20 b3       	in	r18, 0x10	; 16
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	20 95       	com	r18
 696:	30 95       	com	r19
 698:	21 70       	andi	r18, 0x01	; 1
 69a:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 69c:	c9 01       	movw	r24, r18
 69e:	08 95       	ret

000006a0 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
 6a0:	20 b3       	in	r18, 0x10	; 16
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	36 95       	lsr	r19
 6a6:	27 95       	ror	r18
 6a8:	20 95       	com	r18
 6aa:	30 95       	com	r19
 6ac:	21 70       	andi	r18, 0x01	; 1
 6ae:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6b0:	c9 01       	movw	r24, r18
 6b2:	08 95       	ret

000006b4 <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
 6b4:	20 b3       	in	r18, 0x10	; 16
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	36 95       	lsr	r19
 6ba:	27 95       	ror	r18
 6bc:	36 95       	lsr	r19
 6be:	27 95       	ror	r18
 6c0:	20 95       	com	r18
 6c2:	30 95       	com	r19
 6c4:	21 70       	andi	r18, 0x01	; 1
 6c6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6c8:	c9 01       	movw	r24, r18
 6ca:	08 95       	ret

000006cc <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
 6cc:	20 b3       	in	r18, 0x10	; 16
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	43 e0       	ldi	r20, 0x03	; 3
 6d2:	36 95       	lsr	r19
 6d4:	27 95       	ror	r18
 6d6:	4a 95       	dec	r20
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <pressed_switch3+0x6>
 6da:	20 95       	com	r18
 6dc:	30 95       	com	r19
 6de:	21 70       	andi	r18, 0x01	; 1
 6e0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
 6e2:	c9 01       	movw	r24, r18
 6e4:	08 95       	ret

000006e6 <calc_threshold>:
#include"sra.c"
// threshold 55

void calc_threshold()
{
 6e6:	2f 92       	push	r2
 6e8:	3f 92       	push	r3
 6ea:	4f 92       	push	r4
 6ec:	5f 92       	push	r5
 6ee:	6f 92       	push	r6
 6f0:	7f 92       	push	r7
 6f2:	8f 92       	push	r8
 6f4:	9f 92       	push	r9
 6f6:	af 92       	push	r10
 6f8:	bf 92       	push	r11
 6fa:	cf 92       	push	r12
 6fc:	df 92       	push	r13
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	df 93       	push	r29
 708:	cf 93       	push	r28
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	c0 5a       	subi	r28, 0xA0	; 160
 710:	d0 40       	sbci	r29, 0x00	; 0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	f8 94       	cli
 716:	de bf       	out	0x3e, r29	; 62
 718:	0f be       	out	0x3f, r0	; 63
 71a:	cd bf       	out	0x3d, r28	; 61
 71c:	ee 24       	eor	r14, r14
 71e:	ff 24       	eor	r15, r15
 720:	00 e0       	ldi	r16, 0x00	; 0
 722:	10 e0       	ldi	r17, 0x00	; 0
	int count=50, i=0;
	
	while(count!=0)
	{
		lcd_write_int_xy(7,0,i,2);
		sensor_1[i] = adc_start(0);
 724:	2e 01       	movw	r4, r28
 726:	08 94       	sec
 728:	41 1c       	adc	r4, r1
 72a:	51 1c       	adc	r5, r1
		sensor_2[i] = adc_start(1);
 72c:	e9 e2       	ldi	r30, 0x29	; 41
 72e:	6e 2e       	mov	r6, r30
 730:	71 2c       	mov	r7, r1
 732:	6c 0e       	add	r6, r28
 734:	7d 1e       	adc	r7, r29
		sensor_3[i] = adc_start(2);
 736:	71 e5       	ldi	r23, 0x51	; 81
 738:	87 2e       	mov	r8, r23
 73a:	91 2c       	mov	r9, r1
 73c:	8c 0e       	add	r8, r28
 73e:	9d 1e       	adc	r9, r29
		sensor_4[i] = adc_start(3);
 740:	69 e7       	ldi	r22, 0x79	; 121
 742:	a6 2e       	mov	r10, r22
 744:	b1 2c       	mov	r11, r1
 746:	ac 0e       	add	r10, r28
 748:	bd 1e       	adc	r11, r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 74a:	50 e9       	ldi	r21, 0x90	; 144
 74c:	c5 2e       	mov	r12, r21
 74e:	51 e0       	ldi	r21, 0x01	; 1
 750:	d5 2e       	mov	r13, r21
	int temp_white, temp_black, white, black;
	int count=50, i=0;
	
	while(count!=0)
	{
		lcd_write_int_xy(7,0,i,2);
 752:	87 e0       	ldi	r24, 0x07	; 7
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	a7 01       	movw	r20, r14
 75c:	22 e0       	ldi	r18, 0x02	; 2
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
		sensor_1[i] = adc_start(0);
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 76a:	f2 01       	movw	r30, r4
 76c:	e0 0f       	add	r30, r16
 76e:	f1 1f       	adc	r31, r17
 770:	80 83       	st	Z, r24
 772:	11 82       	std	Z+1, r1	; 0x01
		sensor_2[i] = adc_start(1);
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 77a:	f3 01       	movw	r30, r6
 77c:	e0 0f       	add	r30, r16
 77e:	f1 1f       	adc	r31, r17
 780:	80 83       	st	Z, r24
 782:	11 82       	std	Z+1, r1	; 0x01
		sensor_3[i] = adc_start(2);
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 78a:	f4 01       	movw	r30, r8
 78c:	e0 0f       	add	r30, r16
 78e:	f1 1f       	adc	r31, r17
 790:	80 83       	st	Z, r24
 792:	11 82       	std	Z+1, r1	; 0x01
		sensor_4[i] = adc_start(3);
 794:	83 e0       	ldi	r24, 0x03	; 3
 796:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_start>
 79a:	f5 01       	movw	r30, r10
 79c:	e0 0f       	add	r30, r16
 79e:	f1 1f       	adc	r31, r17
 7a0:	80 83       	st	Z, r24
 7a2:	11 82       	std	Z+1, r1	; 0x01
 7a4:	88 ee       	ldi	r24, 0xE8	; 232
 7a6:	93 e0       	ldi	r25, 0x03	; 3
 7a8:	f6 01       	movw	r30, r12
 7aa:	31 97       	sbiw	r30, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <calc_threshold+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7b0:	d9 f7       	brne	.-10     	; 0x7a8 <calc_threshold+0xc2>
 7b2:	0e 5f       	subi	r16, 0xFE	; 254
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
	int sensor_1[20], sensor_2[20], sensor_3[20], sensor_4[20];
	int white_1, white_2, white_3, white_4, black_1, black_2, black_3, black_4;
	int temp_white, temp_black, white, black;
	int count=50, i=0;
	
	while(count!=0)
 7b6:	81 e3       	ldi	r24, 0x31	; 49
 7b8:	e8 16       	cp	r14, r24
 7ba:	f1 04       	cpc	r15, r1
 7bc:	21 f0       	breq	.+8      	; 0x7c6 <calc_threshold+0xe0>
		sensor_2[i] = adc_start(1);
		sensor_3[i] = adc_start(2);
		sensor_4[i] = adc_start(3);
		
		_delay_ms(100);
		i++;count--;
 7be:	08 94       	sec
 7c0:	e1 1c       	adc	r14, r1
 7c2:	f1 1c       	adc	r15, r1
 7c4:	c6 cf       	rjmp	.-116    	; 0x752 <calc_threshold+0x6c>
	}
	
	temp_white = sensor_1[0];
 7c6:	49 80       	ldd	r4, Y+1	; 0x01
 7c8:	5a 80       	ldd	r5, Y+2	; 0x02
 7ca:	fe 01       	movw	r30, r28
 7cc:	33 96       	adiw	r30, 0x03	; 3
 7ce:	12 01       	movw	r2, r4
	temp_black = sensor_1[0];
	for(int j=1;j<20;j++)
 7d0:	9e 01       	movw	r18, r28
 7d2:	27 5d       	subi	r18, 0xD7	; 215
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(temp_white>sensor_1[j])
 7d6:	80 81       	ld	r24, Z
 7d8:	91 81       	ldd	r25, Z+1	; 0x01
 7da:	84 15       	cp	r24, r4
 7dc:	95 05       	cpc	r25, r5
 7de:	0c f4       	brge	.+2      	; 0x7e2 <calc_threshold+0xfc>
 7e0:	2c 01       	movw	r4, r24
 7e2:	28 16       	cp	r2, r24
 7e4:	39 06       	cpc	r3, r25
 7e6:	0c f4       	brge	.+2      	; 0x7ea <calc_threshold+0x104>
 7e8:	1c 01       	movw	r2, r24
 7ea:	32 96       	adiw	r30, 0x02	; 2
		i++;count--;
	}
	
	temp_white = sensor_1[0];
	temp_black = sensor_1[0];
	for(int j=1;j<20;j++)
 7ec:	e2 17       	cp	r30, r18
 7ee:	f3 07       	cpc	r31, r19
 7f0:	91 f7       	brne	.-28     	; 0x7d6 <calc_threshold+0xf0>
		}
	}
	white_1 = temp_white;
	black_1 = temp_black;

	temp_white = sensor_2[0];
 7f2:	09 a5       	ldd	r16, Y+41	; 0x29
 7f4:	1a a5       	ldd	r17, Y+42	; 0x2a
 7f6:	fe 01       	movw	r30, r28
 7f8:	bb 96       	adiw	r30, 0x2b	; 43
 7fa:	78 01       	movw	r14, r16
	temp_black = sensor_2[0];
	for(int j=1;j<20;j++)
 7fc:	9e 01       	movw	r18, r28
 7fe:	2f 5a       	subi	r18, 0xAF	; 175
 800:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(temp_white>sensor_2[j])
 802:	80 81       	ld	r24, Z
 804:	91 81       	ldd	r25, Z+1	; 0x01
 806:	80 17       	cp	r24, r16
 808:	91 07       	cpc	r25, r17
 80a:	0c f4       	brge	.+2      	; 0x80e <calc_threshold+0x128>
 80c:	8c 01       	movw	r16, r24
 80e:	e8 16       	cp	r14, r24
 810:	f9 06       	cpc	r15, r25
 812:	0c f4       	brge	.+2      	; 0x816 <calc_threshold+0x130>
 814:	7c 01       	movw	r14, r24
 816:	32 96       	adiw	r30, 0x02	; 2
	white_1 = temp_white;
	black_1 = temp_black;

	temp_white = sensor_2[0];
	temp_black = sensor_2[0];
	for(int j=1;j<20;j++)
 818:	e2 17       	cp	r30, r18
 81a:	f3 07       	cpc	r31, r19
 81c:	91 f7       	brne	.-28     	; 0x802 <calc_threshold+0x11c>
		}
	}
	white_2 = temp_white;
	black_2 = temp_black;
	
	temp_white = sensor_3[0];
 81e:	ce 01       	movw	r24, r28
 820:	8f 5a       	subi	r24, 0xAF	; 175
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	fc 01       	movw	r30, r24
 826:	a1 90       	ld	r10, Z+
 828:	b1 90       	ld	r11, Z+
 82a:	35 01       	movw	r6, r10
	temp_black = sensor_3[0];
	for(int j=1;j<20;j++)
 82c:	88 96       	adiw	r24, 0x28	; 40
	{
		if(temp_white>sensor_3[j])
 82e:	20 81       	ld	r18, Z
 830:	31 81       	ldd	r19, Z+1	; 0x01
 832:	2a 15       	cp	r18, r10
 834:	3b 05       	cpc	r19, r11
 836:	0c f4       	brge	.+2      	; 0x83a <calc_threshold+0x154>
 838:	59 01       	movw	r10, r18
 83a:	62 16       	cp	r6, r18
 83c:	73 06       	cpc	r7, r19
 83e:	0c f4       	brge	.+2      	; 0x842 <calc_threshold+0x15c>
 840:	39 01       	movw	r6, r18
 842:	32 96       	adiw	r30, 0x02	; 2
	white_2 = temp_white;
	black_2 = temp_black;
	
	temp_white = sensor_3[0];
	temp_black = sensor_3[0];
	for(int j=1;j<20;j++)
 844:	e8 17       	cp	r30, r24
 846:	f9 07       	cpc	r31, r25
 848:	91 f7       	brne	.-28     	; 0x82e <calc_threshold+0x148>
		}
	}
	white_3 = temp_white;
	black_3 = temp_black;

	temp_white = sensor_4[0];
 84a:	ce 01       	movw	r24, r28
 84c:	87 58       	subi	r24, 0x87	; 135
 84e:	9f 4f       	sbci	r25, 0xFF	; 255
 850:	fc 01       	movw	r30, r24
 852:	c1 90       	ld	r12, Z+
 854:	d1 90       	ld	r13, Z+
 856:	46 01       	movw	r8, r12
	temp_black = sensor_4[0];
	for(int j=1;j<20;j++)
 858:	88 96       	adiw	r24, 0x28	; 40
	{
		if(temp_white>sensor_4[j])
 85a:	20 81       	ld	r18, Z
 85c:	31 81       	ldd	r19, Z+1	; 0x01
 85e:	2c 15       	cp	r18, r12
 860:	3d 05       	cpc	r19, r13
 862:	0c f4       	brge	.+2      	; 0x866 <calc_threshold+0x180>
 864:	69 01       	movw	r12, r18
 866:	82 16       	cp	r8, r18
 868:	93 06       	cpc	r9, r19
 86a:	0c f4       	brge	.+2      	; 0x86e <calc_threshold+0x188>
 86c:	49 01       	movw	r8, r18
 86e:	32 96       	adiw	r30, 0x02	; 2
	white_3 = temp_white;
	black_3 = temp_black;

	temp_white = sensor_4[0];
	temp_black = sensor_4[0];
	for(int j=1;j<20;j++)
 870:	e8 17       	cp	r30, r24
 872:	f9 07       	cpc	r31, r25
 874:	91 f7       	brne	.-28     	; 0x85a <calc_threshold+0x174>
	white_4 = temp_white;
	black_4 = temp_black;
	white = (int)(white_1 + white_2 + white_3 + white_4)/4;
	black = (int)(black_1 + black_2 + black_3 + black_4)/4;
	
	lcd_clear();
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_byte>
	lcd_write_int_xy(0,0,white_1,3);
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	a2 01       	movw	r20, r4
 888:	23 e0       	ldi	r18, 0x03	; 3
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	lcd_write_int_xy(4,0,white_2,3);
 890:	84 e0       	ldi	r24, 0x04	; 4
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	a8 01       	movw	r20, r16
 89a:	23 e0       	ldi	r18, 0x03	; 3
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	lcd_write_int_xy(8,0,white_3,3);
 8a2:	88 e0       	ldi	r24, 0x08	; 8
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	a5 01       	movw	r20, r10
 8ac:	23 e0       	ldi	r18, 0x03	; 3
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	lcd_write_int_xy(12,0,white_4,3);
 8b4:	8c e0       	ldi	r24, 0x0C	; 12
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	a6 01       	movw	r20, r12
 8be:	23 e0       	ldi	r18, 0x03	; 3
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	lcd_write_int_xy(0,1,black_1,3);
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	61 e0       	ldi	r22, 0x01	; 1
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	a1 01       	movw	r20, r2
 8d0:	23 e0       	ldi	r18, 0x03	; 3
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	lcd_write_int_xy(4,1,black_2,3);
 8d8:	84 e0       	ldi	r24, 0x04	; 4
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	61 e0       	ldi	r22, 0x01	; 1
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	a7 01       	movw	r20, r14
 8e2:	23 e0       	ldi	r18, 0x03	; 3
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	lcd_write_int_xy(8,1,black_3,3);
 8ea:	88 e0       	ldi	r24, 0x08	; 8
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	61 e0       	ldi	r22, 0x01	; 1
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	a3 01       	movw	r20, r6
 8f4:	23 e0       	ldi	r18, 0x03	; 3
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	lcd_write_int_xy(12,1,black_4,3);
 8fc:	8c e0       	ldi	r24, 0x0C	; 12
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	61 e0       	ldi	r22, 0x01	; 1
 902:	70 e0       	ldi	r23, 0x00	; 0
 904:	a4 01       	movw	r20, r8
 906:	23 e0       	ldi	r18, 0x03	; 3
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	delay_sec(5);
 90e:	85 e0       	ldi	r24, 0x05	; 5
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 6c 00 	call	0xd8	; 0xd8 <delay_sec>
	lcd_clear();
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_byte>
	lcd_write_int_xy(0,0,white,3);
 91e:	04 0d       	add	r16, r4
 920:	15 1d       	adc	r17, r5
 922:	0a 0d       	add	r16, r10
 924:	1b 1d       	adc	r17, r11
 926:	c8 01       	movw	r24, r16
 928:	8c 0d       	add	r24, r12
 92a:	9d 1d       	adc	r25, r13
 92c:	64 e0       	ldi	r22, 0x04	; 4
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodhi4>
 934:	ab 01       	movw	r20, r22
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	70 e0       	ldi	r23, 0x00	; 0
 93e:	23 e0       	ldi	r18, 0x03	; 3
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	lcd_write_int_xy(13,0,black,3);
 946:	e2 0c       	add	r14, r2
 948:	f3 1c       	adc	r15, r3
 94a:	e6 0c       	add	r14, r6
 94c:	f7 1c       	adc	r15, r7
 94e:	c7 01       	movw	r24, r14
 950:	88 0d       	add	r24, r8
 952:	99 1d       	adc	r25, r9
 954:	64 e0       	ldi	r22, 0x04	; 4
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodhi4>
 95c:	ab 01       	movw	r20, r22
 95e:	8d e0       	ldi	r24, 0x0D	; 13
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	23 e0       	ldi	r18, 0x03	; 3
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_int_xy>
	delay_sec(100);
 96e:	84 e6       	ldi	r24, 0x64	; 100
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 6c 00 	call	0xd8	; 0xd8 <delay_sec>
}
 976:	c0 56       	subi	r28, 0x60	; 96
 978:	df 4f       	sbci	r29, 0xFF	; 255
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	f8 94       	cli
 97e:	de bf       	out	0x3e, r29	; 62
 980:	0f be       	out	0x3f, r0	; 63
 982:	cd bf       	out	0x3d, r28	; 61
 984:	cf 91       	pop	r28
 986:	df 91       	pop	r29
 988:	1f 91       	pop	r17
 98a:	0f 91       	pop	r16
 98c:	ff 90       	pop	r15
 98e:	ef 90       	pop	r14
 990:	df 90       	pop	r13
 992:	cf 90       	pop	r12
 994:	bf 90       	pop	r11
 996:	af 90       	pop	r10
 998:	9f 90       	pop	r9
 99a:	8f 90       	pop	r8
 99c:	7f 90       	pop	r7
 99e:	6f 90       	pop	r6
 9a0:	5f 90       	pop	r5
 9a2:	4f 90       	pop	r4
 9a4:	3f 90       	pop	r3
 9a6:	2f 90       	pop	r2
 9a8:	08 95       	ret

000009aa <init_devices>:

void init_devices(void)
{
	port_init();
 9aa:	0e 94 3e 00 	call	0x7c	; 0x7c <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
 9ae:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
 9b0:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
 9b2:	80 e6       	ldi	r24, 0x60	; 96
 9b4:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
 9b6:	87 e8       	ldi	r24, 0x87	; 135
 9b8:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
 9ba:	80 e8       	ldi	r24, 0x80	; 128
 9bc:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
 9c2:	82 e0       	ldi	r24, 0x02	; 2
 9c4:	0e 94 1c 02 	call	0x438	; 0x438 <lcd_init>
	lcd_clear();
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <lcd_byte>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
 9d0:	82 b3       	in	r24, 0x12	; 18
 9d2:	8f 60       	ori	r24, 0x0F	; 15
 9d4:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
 9d6:	81 b3       	in	r24, 0x11	; 17
 9d8:	80 7f       	andi	r24, 0xF0	; 240
 9da:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
 9dc:	0e 94 48 00 	call	0x90	; 0x90 <pwm1_init>
}
 9e0:	08 95       	ret

000009e2 <main>:

int main(void)
{
	init_devices();
 9e2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <init_devices>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
 9e6:	81 99       	sbic	0x10, 1	; 16
 9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <main+0x4>
	while(1)
	{
		if(pressed_switch1())
		{
			calc_threshold();
 9ea:	0e 94 73 03 	call	0x6e6	; 0x6e6 <calc_threshold>
 9ee:	fb cf       	rjmp	.-10     	; 0x9e6 <main+0x4>

000009f0 <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 27 07 	call	0xe4e	; 0xe4e <__eerd_byte_m16>
 9f8:	80 93 65 00 	sts	0x0065, r24
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 27 07 	call	0xe4e	; 0xe4e <__eerd_byte_m16>
 a04:	80 93 66 00 	sts	0x0066, r24
 a08:	82 e0       	ldi	r24, 0x02	; 2
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__eerd_byte_m16>
 a10:	80 93 67 00 	sts	0x0067, r24
 a14:	83 e0       	ldi	r24, 0x03	; 3
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 27 07 	call	0xe4e	; 0xe4e <__eerd_byte_m16>
 a1c:	80 93 68 00 	sts	0x0068, r24
		eeprom_addr++;
	}
}
 a20:	08 95       	ret

00000a22 <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
 a22:	cf 93       	push	r28
 a24:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
 a26:	20 91 69 00 	lds	r18, 0x0069
 a2a:	80 91 61 00 	lds	r24, 0x0061
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	82 0f       	add	r24, r18
 a32:	91 1d       	adc	r25, r1
 a34:	95 95       	asr	r25
 a36:	87 95       	ror	r24
 a38:	80 93 65 00 	sts	0x0065, r24
 a3c:	20 91 6a 00 	lds	r18, 0x006A
 a40:	80 91 62 00 	lds	r24, 0x0062
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	82 0f       	add	r24, r18
 a48:	91 1d       	adc	r25, r1
 a4a:	95 95       	asr	r25
 a4c:	87 95       	ror	r24
 a4e:	80 93 66 00 	sts	0x0066, r24
 a52:	20 91 6b 00 	lds	r18, 0x006B
 a56:	80 91 63 00 	lds	r24, 0x0063
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	82 0f       	add	r24, r18
 a5e:	91 1d       	adc	r25, r1
 a60:	95 95       	asr	r25
 a62:	87 95       	ror	r24
 a64:	80 93 67 00 	sts	0x0067, r24
 a68:	20 91 6c 00 	lds	r18, 0x006C
 a6c:	80 91 64 00 	lds	r24, 0x0064
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	82 0f       	add	r24, r18
 a74:	91 1d       	adc	r25, r1
 a76:	95 95       	asr	r25
 a78:	87 95       	ror	r24
 a7a:	80 93 68 00 	sts	0x0068, r24
 a7e:	c0 e0       	ldi	r28, 0x00	; 0
 a80:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
 a82:	fe 01       	movw	r30, r28
 a84:	eb 59       	subi	r30, 0x9B	; 155
 a86:	ff 4f       	sbci	r31, 0xFF	; 255
 a88:	ce 01       	movw	r24, r28
 a8a:	60 81       	ld	r22, Z
 a8c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__eewr_byte_m16>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
 a90:	21 96       	adiw	r28, 0x01	; 1
 a92:	c4 30       	cpi	r28, 0x04	; 4
 a94:	d1 05       	cpc	r29, r1
 a96:	a9 f7       	brne	.-22     	; 0xa82 <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	08 95       	ret

00000a9e <__cmpsf2>:
 a9e:	d4 d0       	rcall	.+424    	; 0xc48 <__fp_cmp>
 aa0:	08 f4       	brcc	.+2      	; 0xaa4 <__cmpsf2+0x6>
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	08 95       	ret

00000aa6 <__divsf3>:
 aa6:	0c d0       	rcall	.+24     	; 0xac0 <__divsf3x>
 aa8:	0a c1       	rjmp	.+532    	; 0xcbe <__fp_round>
 aaa:	02 d1       	rcall	.+516    	; 0xcb0 <__fp_pscB>
 aac:	40 f0       	brcs	.+16     	; 0xabe <__divsf3+0x18>
 aae:	f9 d0       	rcall	.+498    	; 0xca2 <__fp_pscA>
 ab0:	30 f0       	brcs	.+12     	; 0xabe <__divsf3+0x18>
 ab2:	21 f4       	brne	.+8      	; 0xabc <__divsf3+0x16>
 ab4:	5f 3f       	cpi	r21, 0xFF	; 255
 ab6:	19 f0       	breq	.+6      	; 0xabe <__divsf3+0x18>
 ab8:	eb c0       	rjmp	.+470    	; 0xc90 <__fp_inf>
 aba:	51 11       	cpse	r21, r1
 abc:	34 c1       	rjmp	.+616    	; 0xd26 <__fp_szero>
 abe:	ee c0       	rjmp	.+476    	; 0xc9c <__fp_nan>

00000ac0 <__divsf3x>:
 ac0:	0f d1       	rcall	.+542    	; 0xce0 <__fp_split3>
 ac2:	98 f3       	brcs	.-26     	; 0xaaa <__divsf3+0x4>

00000ac4 <__divsf3_pse>:
 ac4:	99 23       	and	r25, r25
 ac6:	c9 f3       	breq	.-14     	; 0xaba <__divsf3+0x14>
 ac8:	55 23       	and	r21, r21
 aca:	b1 f3       	breq	.-20     	; 0xab8 <__divsf3+0x12>
 acc:	95 1b       	sub	r25, r21
 ace:	55 0b       	sbc	r21, r21
 ad0:	bb 27       	eor	r27, r27
 ad2:	aa 27       	eor	r26, r26
 ad4:	62 17       	cp	r22, r18
 ad6:	73 07       	cpc	r23, r19
 ad8:	84 07       	cpc	r24, r20
 ada:	38 f0       	brcs	.+14     	; 0xaea <__divsf3_pse+0x26>
 adc:	9f 5f       	subi	r25, 0xFF	; 255
 ade:	5f 4f       	sbci	r21, 0xFF	; 255
 ae0:	22 0f       	add	r18, r18
 ae2:	33 1f       	adc	r19, r19
 ae4:	44 1f       	adc	r20, r20
 ae6:	aa 1f       	adc	r26, r26
 ae8:	a9 f3       	breq	.-22     	; 0xad4 <__divsf3_pse+0x10>
 aea:	33 d0       	rcall	.+102    	; 0xb52 <__divsf3_pse+0x8e>
 aec:	0e 2e       	mov	r0, r30
 aee:	3a f0       	brmi	.+14     	; 0xafe <__divsf3_pse+0x3a>
 af0:	e0 e8       	ldi	r30, 0x80	; 128
 af2:	30 d0       	rcall	.+96     	; 0xb54 <__divsf3_pse+0x90>
 af4:	91 50       	subi	r25, 0x01	; 1
 af6:	50 40       	sbci	r21, 0x00	; 0
 af8:	e6 95       	lsr	r30
 afa:	00 1c       	adc	r0, r0
 afc:	ca f7       	brpl	.-14     	; 0xaf0 <__divsf3_pse+0x2c>
 afe:	29 d0       	rcall	.+82     	; 0xb52 <__divsf3_pse+0x8e>
 b00:	fe 2f       	mov	r31, r30
 b02:	27 d0       	rcall	.+78     	; 0xb52 <__divsf3_pse+0x8e>
 b04:	66 0f       	add	r22, r22
 b06:	77 1f       	adc	r23, r23
 b08:	88 1f       	adc	r24, r24
 b0a:	bb 1f       	adc	r27, r27
 b0c:	26 17       	cp	r18, r22
 b0e:	37 07       	cpc	r19, r23
 b10:	48 07       	cpc	r20, r24
 b12:	ab 07       	cpc	r26, r27
 b14:	b0 e8       	ldi	r27, 0x80	; 128
 b16:	09 f0       	breq	.+2      	; 0xb1a <__divsf3_pse+0x56>
 b18:	bb 0b       	sbc	r27, r27
 b1a:	80 2d       	mov	r24, r0
 b1c:	bf 01       	movw	r22, r30
 b1e:	ff 27       	eor	r31, r31
 b20:	93 58       	subi	r25, 0x83	; 131
 b22:	5f 4f       	sbci	r21, 0xFF	; 255
 b24:	2a f0       	brmi	.+10     	; 0xb30 <__divsf3_pse+0x6c>
 b26:	9e 3f       	cpi	r25, 0xFE	; 254
 b28:	51 05       	cpc	r21, r1
 b2a:	68 f0       	brcs	.+26     	; 0xb46 <__divsf3_pse+0x82>
 b2c:	b1 c0       	rjmp	.+354    	; 0xc90 <__fp_inf>
 b2e:	fb c0       	rjmp	.+502    	; 0xd26 <__fp_szero>
 b30:	5f 3f       	cpi	r21, 0xFF	; 255
 b32:	ec f3       	brlt	.-6      	; 0xb2e <__divsf3_pse+0x6a>
 b34:	98 3e       	cpi	r25, 0xE8	; 232
 b36:	dc f3       	brlt	.-10     	; 0xb2e <__divsf3_pse+0x6a>
 b38:	86 95       	lsr	r24
 b3a:	77 95       	ror	r23
 b3c:	67 95       	ror	r22
 b3e:	b7 95       	ror	r27
 b40:	f7 95       	ror	r31
 b42:	9f 5f       	subi	r25, 0xFF	; 255
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__divsf3_pse+0x74>
 b46:	88 0f       	add	r24, r24
 b48:	91 1d       	adc	r25, r1
 b4a:	96 95       	lsr	r25
 b4c:	87 95       	ror	r24
 b4e:	97 f9       	bld	r25, 7
 b50:	08 95       	ret
 b52:	e1 e0       	ldi	r30, 0x01	; 1
 b54:	66 0f       	add	r22, r22
 b56:	77 1f       	adc	r23, r23
 b58:	88 1f       	adc	r24, r24
 b5a:	bb 1f       	adc	r27, r27
 b5c:	62 17       	cp	r22, r18
 b5e:	73 07       	cpc	r23, r19
 b60:	84 07       	cpc	r24, r20
 b62:	ba 07       	cpc	r27, r26
 b64:	20 f0       	brcs	.+8      	; 0xb6e <__divsf3_pse+0xaa>
 b66:	62 1b       	sub	r22, r18
 b68:	73 0b       	sbc	r23, r19
 b6a:	84 0b       	sbc	r24, r20
 b6c:	ba 0b       	sbc	r27, r26
 b6e:	ee 1f       	adc	r30, r30
 b70:	88 f7       	brcc	.-30     	; 0xb54 <__divsf3_pse+0x90>
 b72:	e0 95       	com	r30
 b74:	08 95       	ret

00000b76 <__fixunssfsi>:
 b76:	bc d0       	rcall	.+376    	; 0xcf0 <__fp_splitA>
 b78:	88 f0       	brcs	.+34     	; 0xb9c <__fixunssfsi+0x26>
 b7a:	9f 57       	subi	r25, 0x7F	; 127
 b7c:	90 f0       	brcs	.+36     	; 0xba2 <__fixunssfsi+0x2c>
 b7e:	b9 2f       	mov	r27, r25
 b80:	99 27       	eor	r25, r25
 b82:	b7 51       	subi	r27, 0x17	; 23
 b84:	a0 f0       	brcs	.+40     	; 0xbae <__fixunssfsi+0x38>
 b86:	d1 f0       	breq	.+52     	; 0xbbc <__fixunssfsi+0x46>
 b88:	66 0f       	add	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	1a f0       	brmi	.+6      	; 0xb98 <__fixunssfsi+0x22>
 b92:	ba 95       	dec	r27
 b94:	c9 f7       	brne	.-14     	; 0xb88 <__fixunssfsi+0x12>
 b96:	12 c0       	rjmp	.+36     	; 0xbbc <__fixunssfsi+0x46>
 b98:	b1 30       	cpi	r27, 0x01	; 1
 b9a:	81 f0       	breq	.+32     	; 0xbbc <__fixunssfsi+0x46>
 b9c:	c3 d0       	rcall	.+390    	; 0xd24 <__fp_zero>
 b9e:	b1 e0       	ldi	r27, 0x01	; 1
 ba0:	08 95       	ret
 ba2:	c0 c0       	rjmp	.+384    	; 0xd24 <__fp_zero>
 ba4:	67 2f       	mov	r22, r23
 ba6:	78 2f       	mov	r23, r24
 ba8:	88 27       	eor	r24, r24
 baa:	b8 5f       	subi	r27, 0xF8	; 248
 bac:	39 f0       	breq	.+14     	; 0xbbc <__fixunssfsi+0x46>
 bae:	b9 3f       	cpi	r27, 0xF9	; 249
 bb0:	cc f3       	brlt	.-14     	; 0xba4 <__fixunssfsi+0x2e>
 bb2:	86 95       	lsr	r24
 bb4:	77 95       	ror	r23
 bb6:	67 95       	ror	r22
 bb8:	b3 95       	inc	r27
 bba:	d9 f7       	brne	.-10     	; 0xbb2 <__fixunssfsi+0x3c>
 bbc:	3e f4       	brtc	.+14     	; 0xbcc <__fixunssfsi+0x56>
 bbe:	90 95       	com	r25
 bc0:	80 95       	com	r24
 bc2:	70 95       	com	r23
 bc4:	61 95       	neg	r22
 bc6:	7f 4f       	sbci	r23, 0xFF	; 255
 bc8:	8f 4f       	sbci	r24, 0xFF	; 255
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	08 95       	ret

00000bce <__floatunsisf>:
 bce:	e8 94       	clt
 bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <__floatsisf+0x12>

00000bd2 <__floatsisf>:
 bd2:	97 fb       	bst	r25, 7
 bd4:	3e f4       	brtc	.+14     	; 0xbe4 <__floatsisf+0x12>
 bd6:	90 95       	com	r25
 bd8:	80 95       	com	r24
 bda:	70 95       	com	r23
 bdc:	61 95       	neg	r22
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	99 23       	and	r25, r25
 be6:	a9 f0       	breq	.+42     	; 0xc12 <__floatsisf+0x40>
 be8:	f9 2f       	mov	r31, r25
 bea:	96 e9       	ldi	r25, 0x96	; 150
 bec:	bb 27       	eor	r27, r27
 bee:	93 95       	inc	r25
 bf0:	f6 95       	lsr	r31
 bf2:	87 95       	ror	r24
 bf4:	77 95       	ror	r23
 bf6:	67 95       	ror	r22
 bf8:	b7 95       	ror	r27
 bfa:	f1 11       	cpse	r31, r1
 bfc:	f8 cf       	rjmp	.-16     	; 0xbee <__floatsisf+0x1c>
 bfe:	fa f4       	brpl	.+62     	; 0xc3e <__floatsisf+0x6c>
 c00:	bb 0f       	add	r27, r27
 c02:	11 f4       	brne	.+4      	; 0xc08 <__floatsisf+0x36>
 c04:	60 ff       	sbrs	r22, 0
 c06:	1b c0       	rjmp	.+54     	; 0xc3e <__floatsisf+0x6c>
 c08:	6f 5f       	subi	r22, 0xFF	; 255
 c0a:	7f 4f       	sbci	r23, 0xFF	; 255
 c0c:	8f 4f       	sbci	r24, 0xFF	; 255
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	16 c0       	rjmp	.+44     	; 0xc3e <__floatsisf+0x6c>
 c12:	88 23       	and	r24, r24
 c14:	11 f0       	breq	.+4      	; 0xc1a <__floatsisf+0x48>
 c16:	96 e9       	ldi	r25, 0x96	; 150
 c18:	11 c0       	rjmp	.+34     	; 0xc3c <__floatsisf+0x6a>
 c1a:	77 23       	and	r23, r23
 c1c:	21 f0       	breq	.+8      	; 0xc26 <__floatsisf+0x54>
 c1e:	9e e8       	ldi	r25, 0x8E	; 142
 c20:	87 2f       	mov	r24, r23
 c22:	76 2f       	mov	r23, r22
 c24:	05 c0       	rjmp	.+10     	; 0xc30 <__floatsisf+0x5e>
 c26:	66 23       	and	r22, r22
 c28:	71 f0       	breq	.+28     	; 0xc46 <__floatsisf+0x74>
 c2a:	96 e8       	ldi	r25, 0x86	; 134
 c2c:	86 2f       	mov	r24, r22
 c2e:	70 e0       	ldi	r23, 0x00	; 0
 c30:	60 e0       	ldi	r22, 0x00	; 0
 c32:	2a f0       	brmi	.+10     	; 0xc3e <__floatsisf+0x6c>
 c34:	9a 95       	dec	r25
 c36:	66 0f       	add	r22, r22
 c38:	77 1f       	adc	r23, r23
 c3a:	88 1f       	adc	r24, r24
 c3c:	da f7       	brpl	.-10     	; 0xc34 <__floatsisf+0x62>
 c3e:	88 0f       	add	r24, r24
 c40:	96 95       	lsr	r25
 c42:	87 95       	ror	r24
 c44:	97 f9       	bld	r25, 7
 c46:	08 95       	ret

00000c48 <__fp_cmp>:
 c48:	99 0f       	add	r25, r25
 c4a:	00 08       	sbc	r0, r0
 c4c:	55 0f       	add	r21, r21
 c4e:	aa 0b       	sbc	r26, r26
 c50:	e0 e8       	ldi	r30, 0x80	; 128
 c52:	fe ef       	ldi	r31, 0xFE	; 254
 c54:	16 16       	cp	r1, r22
 c56:	17 06       	cpc	r1, r23
 c58:	e8 07       	cpc	r30, r24
 c5a:	f9 07       	cpc	r31, r25
 c5c:	c0 f0       	brcs	.+48     	; 0xc8e <__fp_cmp+0x46>
 c5e:	12 16       	cp	r1, r18
 c60:	13 06       	cpc	r1, r19
 c62:	e4 07       	cpc	r30, r20
 c64:	f5 07       	cpc	r31, r21
 c66:	98 f0       	brcs	.+38     	; 0xc8e <__fp_cmp+0x46>
 c68:	62 1b       	sub	r22, r18
 c6a:	73 0b       	sbc	r23, r19
 c6c:	84 0b       	sbc	r24, r20
 c6e:	95 0b       	sbc	r25, r21
 c70:	39 f4       	brne	.+14     	; 0xc80 <__fp_cmp+0x38>
 c72:	0a 26       	eor	r0, r26
 c74:	61 f0       	breq	.+24     	; 0xc8e <__fp_cmp+0x46>
 c76:	23 2b       	or	r18, r19
 c78:	24 2b       	or	r18, r20
 c7a:	25 2b       	or	r18, r21
 c7c:	21 f4       	brne	.+8      	; 0xc86 <__fp_cmp+0x3e>
 c7e:	08 95       	ret
 c80:	0a 26       	eor	r0, r26
 c82:	09 f4       	brne	.+2      	; 0xc86 <__fp_cmp+0x3e>
 c84:	a1 40       	sbci	r26, 0x01	; 1
 c86:	a6 95       	lsr	r26
 c88:	8f ef       	ldi	r24, 0xFF	; 255
 c8a:	81 1d       	adc	r24, r1
 c8c:	81 1d       	adc	r24, r1
 c8e:	08 95       	ret

00000c90 <__fp_inf>:
 c90:	97 f9       	bld	r25, 7
 c92:	9f 67       	ori	r25, 0x7F	; 127
 c94:	80 e8       	ldi	r24, 0x80	; 128
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	60 e0       	ldi	r22, 0x00	; 0
 c9a:	08 95       	ret

00000c9c <__fp_nan>:
 c9c:	9f ef       	ldi	r25, 0xFF	; 255
 c9e:	80 ec       	ldi	r24, 0xC0	; 192
 ca0:	08 95       	ret

00000ca2 <__fp_pscA>:
 ca2:	00 24       	eor	r0, r0
 ca4:	0a 94       	dec	r0
 ca6:	16 16       	cp	r1, r22
 ca8:	17 06       	cpc	r1, r23
 caa:	18 06       	cpc	r1, r24
 cac:	09 06       	cpc	r0, r25
 cae:	08 95       	ret

00000cb0 <__fp_pscB>:
 cb0:	00 24       	eor	r0, r0
 cb2:	0a 94       	dec	r0
 cb4:	12 16       	cp	r1, r18
 cb6:	13 06       	cpc	r1, r19
 cb8:	14 06       	cpc	r1, r20
 cba:	05 06       	cpc	r0, r21
 cbc:	08 95       	ret

00000cbe <__fp_round>:
 cbe:	09 2e       	mov	r0, r25
 cc0:	03 94       	inc	r0
 cc2:	00 0c       	add	r0, r0
 cc4:	11 f4       	brne	.+4      	; 0xcca <__fp_round+0xc>
 cc6:	88 23       	and	r24, r24
 cc8:	52 f0       	brmi	.+20     	; 0xcde <__fp_round+0x20>
 cca:	bb 0f       	add	r27, r27
 ccc:	40 f4       	brcc	.+16     	; 0xcde <__fp_round+0x20>
 cce:	bf 2b       	or	r27, r31
 cd0:	11 f4       	brne	.+4      	; 0xcd6 <__fp_round+0x18>
 cd2:	60 ff       	sbrs	r22, 0
 cd4:	04 c0       	rjmp	.+8      	; 0xcde <__fp_round+0x20>
 cd6:	6f 5f       	subi	r22, 0xFF	; 255
 cd8:	7f 4f       	sbci	r23, 0xFF	; 255
 cda:	8f 4f       	sbci	r24, 0xFF	; 255
 cdc:	9f 4f       	sbci	r25, 0xFF	; 255
 cde:	08 95       	ret

00000ce0 <__fp_split3>:
 ce0:	57 fd       	sbrc	r21, 7
 ce2:	90 58       	subi	r25, 0x80	; 128
 ce4:	44 0f       	add	r20, r20
 ce6:	55 1f       	adc	r21, r21
 ce8:	59 f0       	breq	.+22     	; 0xd00 <__fp_splitA+0x10>
 cea:	5f 3f       	cpi	r21, 0xFF	; 255
 cec:	71 f0       	breq	.+28     	; 0xd0a <__fp_splitA+0x1a>
 cee:	47 95       	ror	r20

00000cf0 <__fp_splitA>:
 cf0:	88 0f       	add	r24, r24
 cf2:	97 fb       	bst	r25, 7
 cf4:	99 1f       	adc	r25, r25
 cf6:	61 f0       	breq	.+24     	; 0xd10 <__fp_splitA+0x20>
 cf8:	9f 3f       	cpi	r25, 0xFF	; 255
 cfa:	79 f0       	breq	.+30     	; 0xd1a <__fp_splitA+0x2a>
 cfc:	87 95       	ror	r24
 cfe:	08 95       	ret
 d00:	12 16       	cp	r1, r18
 d02:	13 06       	cpc	r1, r19
 d04:	14 06       	cpc	r1, r20
 d06:	55 1f       	adc	r21, r21
 d08:	f2 cf       	rjmp	.-28     	; 0xcee <__fp_split3+0xe>
 d0a:	46 95       	lsr	r20
 d0c:	f1 df       	rcall	.-30     	; 0xcf0 <__fp_splitA>
 d0e:	08 c0       	rjmp	.+16     	; 0xd20 <__fp_splitA+0x30>
 d10:	16 16       	cp	r1, r22
 d12:	17 06       	cpc	r1, r23
 d14:	18 06       	cpc	r1, r24
 d16:	99 1f       	adc	r25, r25
 d18:	f1 cf       	rjmp	.-30     	; 0xcfc <__fp_splitA+0xc>
 d1a:	86 95       	lsr	r24
 d1c:	71 05       	cpc	r23, r1
 d1e:	61 05       	cpc	r22, r1
 d20:	08 94       	sec
 d22:	08 95       	ret

00000d24 <__fp_zero>:
 d24:	e8 94       	clt

00000d26 <__fp_szero>:
 d26:	bb 27       	eor	r27, r27
 d28:	66 27       	eor	r22, r22
 d2a:	77 27       	eor	r23, r23
 d2c:	cb 01       	movw	r24, r22
 d2e:	97 f9       	bld	r25, 7
 d30:	08 95       	ret

00000d32 <__gesf2>:
 d32:	8a df       	rcall	.-236    	; 0xc48 <__fp_cmp>
 d34:	08 f4       	brcc	.+2      	; 0xd38 <__gesf2+0x6>
 d36:	8f ef       	ldi	r24, 0xFF	; 255
 d38:	08 95       	ret

00000d3a <__mulsf3>:
 d3a:	0b d0       	rcall	.+22     	; 0xd52 <__mulsf3x>
 d3c:	c0 cf       	rjmp	.-128    	; 0xcbe <__fp_round>
 d3e:	b1 df       	rcall	.-158    	; 0xca2 <__fp_pscA>
 d40:	28 f0       	brcs	.+10     	; 0xd4c <__mulsf3+0x12>
 d42:	b6 df       	rcall	.-148    	; 0xcb0 <__fp_pscB>
 d44:	18 f0       	brcs	.+6      	; 0xd4c <__mulsf3+0x12>
 d46:	95 23       	and	r25, r21
 d48:	09 f0       	breq	.+2      	; 0xd4c <__mulsf3+0x12>
 d4a:	a2 cf       	rjmp	.-188    	; 0xc90 <__fp_inf>
 d4c:	a7 cf       	rjmp	.-178    	; 0xc9c <__fp_nan>
 d4e:	11 24       	eor	r1, r1
 d50:	ea cf       	rjmp	.-44     	; 0xd26 <__fp_szero>

00000d52 <__mulsf3x>:
 d52:	c6 df       	rcall	.-116    	; 0xce0 <__fp_split3>
 d54:	a0 f3       	brcs	.-24     	; 0xd3e <__mulsf3+0x4>

00000d56 <__mulsf3_pse>:
 d56:	95 9f       	mul	r25, r21
 d58:	d1 f3       	breq	.-12     	; 0xd4e <__mulsf3+0x14>
 d5a:	95 0f       	add	r25, r21
 d5c:	50 e0       	ldi	r21, 0x00	; 0
 d5e:	55 1f       	adc	r21, r21
 d60:	62 9f       	mul	r22, r18
 d62:	f0 01       	movw	r30, r0
 d64:	72 9f       	mul	r23, r18
 d66:	bb 27       	eor	r27, r27
 d68:	f0 0d       	add	r31, r0
 d6a:	b1 1d       	adc	r27, r1
 d6c:	63 9f       	mul	r22, r19
 d6e:	aa 27       	eor	r26, r26
 d70:	f0 0d       	add	r31, r0
 d72:	b1 1d       	adc	r27, r1
 d74:	aa 1f       	adc	r26, r26
 d76:	64 9f       	mul	r22, r20
 d78:	66 27       	eor	r22, r22
 d7a:	b0 0d       	add	r27, r0
 d7c:	a1 1d       	adc	r26, r1
 d7e:	66 1f       	adc	r22, r22
 d80:	82 9f       	mul	r24, r18
 d82:	22 27       	eor	r18, r18
 d84:	b0 0d       	add	r27, r0
 d86:	a1 1d       	adc	r26, r1
 d88:	62 1f       	adc	r22, r18
 d8a:	73 9f       	mul	r23, r19
 d8c:	b0 0d       	add	r27, r0
 d8e:	a1 1d       	adc	r26, r1
 d90:	62 1f       	adc	r22, r18
 d92:	83 9f       	mul	r24, r19
 d94:	a0 0d       	add	r26, r0
 d96:	61 1d       	adc	r22, r1
 d98:	22 1f       	adc	r18, r18
 d9a:	74 9f       	mul	r23, r20
 d9c:	33 27       	eor	r19, r19
 d9e:	a0 0d       	add	r26, r0
 da0:	61 1d       	adc	r22, r1
 da2:	23 1f       	adc	r18, r19
 da4:	84 9f       	mul	r24, r20
 da6:	60 0d       	add	r22, r0
 da8:	21 1d       	adc	r18, r1
 daa:	82 2f       	mov	r24, r18
 dac:	76 2f       	mov	r23, r22
 dae:	6a 2f       	mov	r22, r26
 db0:	11 24       	eor	r1, r1
 db2:	9f 57       	subi	r25, 0x7F	; 127
 db4:	50 40       	sbci	r21, 0x00	; 0
 db6:	8a f0       	brmi	.+34     	; 0xdda <__mulsf3_pse+0x84>
 db8:	e1 f0       	breq	.+56     	; 0xdf2 <__mulsf3_pse+0x9c>
 dba:	88 23       	and	r24, r24
 dbc:	4a f0       	brmi	.+18     	; 0xdd0 <__mulsf3_pse+0x7a>
 dbe:	ee 0f       	add	r30, r30
 dc0:	ff 1f       	adc	r31, r31
 dc2:	bb 1f       	adc	r27, r27
 dc4:	66 1f       	adc	r22, r22
 dc6:	77 1f       	adc	r23, r23
 dc8:	88 1f       	adc	r24, r24
 dca:	91 50       	subi	r25, 0x01	; 1
 dcc:	50 40       	sbci	r21, 0x00	; 0
 dce:	a9 f7       	brne	.-22     	; 0xdba <__mulsf3_pse+0x64>
 dd0:	9e 3f       	cpi	r25, 0xFE	; 254
 dd2:	51 05       	cpc	r21, r1
 dd4:	70 f0       	brcs	.+28     	; 0xdf2 <__mulsf3_pse+0x9c>
 dd6:	5c cf       	rjmp	.-328    	; 0xc90 <__fp_inf>
 dd8:	a6 cf       	rjmp	.-180    	; 0xd26 <__fp_szero>
 dda:	5f 3f       	cpi	r21, 0xFF	; 255
 ddc:	ec f3       	brlt	.-6      	; 0xdd8 <__mulsf3_pse+0x82>
 dde:	98 3e       	cpi	r25, 0xE8	; 232
 de0:	dc f3       	brlt	.-10     	; 0xdd8 <__mulsf3_pse+0x82>
 de2:	86 95       	lsr	r24
 de4:	77 95       	ror	r23
 de6:	67 95       	ror	r22
 de8:	b7 95       	ror	r27
 dea:	f7 95       	ror	r31
 dec:	e7 95       	ror	r30
 dee:	9f 5f       	subi	r25, 0xFF	; 255
 df0:	c1 f7       	brne	.-16     	; 0xde2 <__mulsf3_pse+0x8c>
 df2:	fe 2b       	or	r31, r30
 df4:	88 0f       	add	r24, r24
 df6:	91 1d       	adc	r25, r1
 df8:	96 95       	lsr	r25
 dfa:	87 95       	ror	r24
 dfc:	97 f9       	bld	r25, 7
 dfe:	08 95       	ret

00000e00 <__divmodhi4>:
 e00:	97 fb       	bst	r25, 7
 e02:	09 2e       	mov	r0, r25
 e04:	07 26       	eor	r0, r23
 e06:	0a d0       	rcall	.+20     	; 0xe1c <__divmodhi4_neg1>
 e08:	77 fd       	sbrc	r23, 7
 e0a:	04 d0       	rcall	.+8      	; 0xe14 <__divmodhi4_neg2>
 e0c:	0c d0       	rcall	.+24     	; 0xe26 <__udivmodhi4>
 e0e:	06 d0       	rcall	.+12     	; 0xe1c <__divmodhi4_neg1>
 e10:	00 20       	and	r0, r0
 e12:	1a f4       	brpl	.+6      	; 0xe1a <__divmodhi4_exit>

00000e14 <__divmodhi4_neg2>:
 e14:	70 95       	com	r23
 e16:	61 95       	neg	r22
 e18:	7f 4f       	sbci	r23, 0xFF	; 255

00000e1a <__divmodhi4_exit>:
 e1a:	08 95       	ret

00000e1c <__divmodhi4_neg1>:
 e1c:	f6 f7       	brtc	.-4      	; 0xe1a <__divmodhi4_exit>
 e1e:	90 95       	com	r25
 e20:	81 95       	neg	r24
 e22:	9f 4f       	sbci	r25, 0xFF	; 255
 e24:	08 95       	ret

00000e26 <__udivmodhi4>:
 e26:	aa 1b       	sub	r26, r26
 e28:	bb 1b       	sub	r27, r27
 e2a:	51 e1       	ldi	r21, 0x11	; 17
 e2c:	07 c0       	rjmp	.+14     	; 0xe3c <__udivmodhi4_ep>

00000e2e <__udivmodhi4_loop>:
 e2e:	aa 1f       	adc	r26, r26
 e30:	bb 1f       	adc	r27, r27
 e32:	a6 17       	cp	r26, r22
 e34:	b7 07       	cpc	r27, r23
 e36:	10 f0       	brcs	.+4      	; 0xe3c <__udivmodhi4_ep>
 e38:	a6 1b       	sub	r26, r22
 e3a:	b7 0b       	sbc	r27, r23

00000e3c <__udivmodhi4_ep>:
 e3c:	88 1f       	adc	r24, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	5a 95       	dec	r21
 e42:	a9 f7       	brne	.-22     	; 0xe2e <__udivmodhi4_loop>
 e44:	80 95       	com	r24
 e46:	90 95       	com	r25
 e48:	bc 01       	movw	r22, r24
 e4a:	cd 01       	movw	r24, r26
 e4c:	08 95       	ret

00000e4e <__eerd_byte_m16>:
 e4e:	e1 99       	sbic	0x1c, 1	; 28
 e50:	fe cf       	rjmp	.-4      	; 0xe4e <__eerd_byte_m16>
 e52:	9f bb       	out	0x1f, r25	; 31
 e54:	8e bb       	out	0x1e, r24	; 30
 e56:	e0 9a       	sbi	0x1c, 0	; 28
 e58:	99 27       	eor	r25, r25
 e5a:	8d b3       	in	r24, 0x1d	; 29
 e5c:	08 95       	ret

00000e5e <__eewr_byte_m16>:
 e5e:	26 2f       	mov	r18, r22

00000e60 <__eewr_r18_m16>:
 e60:	e1 99       	sbic	0x1c, 1	; 28
 e62:	fe cf       	rjmp	.-4      	; 0xe60 <__eewr_r18_m16>
 e64:	9f bb       	out	0x1f, r25	; 31
 e66:	8e bb       	out	0x1e, r24	; 30
 e68:	2d bb       	out	0x1d, r18	; 29
 e6a:	0f b6       	in	r0, 0x3f	; 63
 e6c:	f8 94       	cli
 e6e:	e2 9a       	sbi	0x1c, 2	; 28
 e70:	e1 9a       	sbi	0x1c, 1	; 28
 e72:	0f be       	out	0x3f, r0	; 63
 e74:	01 96       	adiw	r24, 0x01	; 1
 e76:	08 95       	ret

00000e78 <_exit>:
 e78:	f8 94       	cli

00000e7a <__stop_program>:
 e7a:	ff cf       	rjmp	.-2      	; 0xe7a <__stop_program>
