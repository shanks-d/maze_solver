
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000010c8  0000115c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080007a  0080007a  00001176  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000416  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001151  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000037a  00000000  00000000  000026fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e37  00000000  00000000  00002a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  000038b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000862  00000000  00000000  00003ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000485a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 04 	call	0x988	; 0x988 <main>
      8a:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     18e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     286:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 7a 00 	sts	0x007A, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	82 33       	cpi	r24, 0x32	; 50
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 7a 00 	lds	r24, 0x007A
     300:	82 2b       	or	r24, r18
     302:	80 93 7a 00 	sts	0x007A, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     31e:	80 93 97 00 	sts	0x0097, r24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     328:	80 93 98 00 	sts	0x0098, r24
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     332:	80 93 99 00 	sts	0x0099, r24
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     33c:	80 93 9a 00 	sts	0x009A, r24
	}

		
}
     340:	08 95       	ret

00000342 <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     348:	80 93 9f 00 	sts	0x009F, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     352:	80 93 a0 00 	sts	0x00A0, r24
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     35c:	80 93 a1 00 	sts	0x00A1, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     366:	80 93 a2 00 	sts	0x00A2, r24
 	}

		
}
     36a:	08 95       	ret

0000036c <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     376:	1f ef       	ldi	r17, 0xFF	; 255
     378:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     382:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	c5 30       	cpi	r28, 0x05	; 5
     390:	d1 05       	cpc	r29, r1
     392:	91 f7       	brne	.-28     	; 0x378 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
}
     3a0:	08 95       	ret

000003a2 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3a2:	99 bd       	out	0x29, r25	; 41
     3a4:	88 bd       	out	0x28, r24	; 40
}
     3a6:	08 95       	ret

000003a8 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3a8:	87 b3       	in	r24, 0x17	; 23
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3ae:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3b0:	c5 98       	cbi	0x18, 5	; 24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	35 e0       	ldi	r19, 0x05	; 5
     3bc:	c7 9a       	sbi	0x18, 7	; 24
     3be:	82 2f       	mov	r24, r18
     3c0:	8a 95       	dec	r24
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3c6:	82 95       	swap	r24
     3c8:	80 7f       	andi	r24, 0xF0	; 240
     3ca:	92 2f       	mov	r25, r18
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3d0:	c7 98       	cbi	0x18, 7	; 24
     3d2:	93 2f       	mov	r25, r19
     3d4:	9a 95       	dec	r25
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3d8:	c7 9a       	sbi	0x18, 7	; 24
     3da:	92 2f       	mov	r25, r18
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3e0:	96 b3       	in	r25, 0x16	; 22
     3e2:	92 2f       	mov	r25, r18
     3e4:	9a 95       	dec	r25
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3e8:	c7 98       	cbi	0x18, 7	; 24
     3ea:	93 2f       	mov	r25, r19
     3ec:	9a 95       	dec	r25
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     3f4:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3f6:	87 b3       	in	r24, 0x17	; 23
     3f8:	8f 60       	ori	r24, 0x0F	; 15
     3fa:	87 bb       	out	0x17, r24	; 23

}
     3fc:	08 95       	ret

000003fe <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     3fe:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     400:	66 23       	and	r22, r22
     402:	11 f4       	brne	.+4      	; 0x408 <lcd_byte+0xa>
	CLEAR_RS();
     404:	c5 98       	cbi	0x18, 5	; 24
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_byte+0xc>
else
	SET_RS();
     408:	c5 9a       	sbi	0x18, 5	; 24
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     412:	88 b3       	in	r24, 0x18	; 24
     414:	92 2f       	mov	r25, r18
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     41e:	98 bb       	out	0x18, r25	; 24
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	89 2f       	mov	r24, r25
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     428:	c7 98       	cbi	0x18, 7	; 24
     42a:	89 2f       	mov	r24, r25
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     430:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     432:	88 b3       	in	r24, 0x18	; 24
     434:	2f 70       	andi	r18, 0x0F	; 15
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     43a:	88 bb       	out	0x18, r24	; 24
     43c:	89 2f       	mov	r24, r25
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     442:	c7 98       	cbi	0x18, 7	; 24
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
}
     44c:	08 95       	ret

0000044e <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     44e:	1f 93       	push	r17
     450:	18 2f       	mov	r17, r24
     452:	8c e2       	ldi	r24, 0x2C	; 44
     454:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	20 e9       	ldi	r18, 0x90	; 144
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f9 01       	movw	r30, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	d9 f7       	brne	.-10     	; 0x45a <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     464:	87 b3       	in	r24, 0x17	; 23
     466:	8f 60       	ori	r24, 0x0F	; 15
     468:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     46a:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     46c:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     46e:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     476:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     478:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     47a:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <__stack+0x1f>
	_delay_us(0.3);	//tAS
	SET_E();
     482:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     484:	c1 9a       	sbi	0x18, 1	; 24
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	98 2f       	mov	r25, r24
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
	_delay_us(1);
	CLEAR_E();
     48e:	c7 98       	cbi	0x18, 7	; 24
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <__stack+0x31>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     498:	81 2f       	mov	r24, r17
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	msg++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4be:	88 81       	ld	r24, Y
     4c0:	88 23       	and	r24, r24
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_write_int+0xe>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lcd_write_int+0x10>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9c 01       	movw	r18, r24
     4e2:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4e4:	fe 01       	movw	r30, r28
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <lcd_write_int+0x22>
     4f2:	fe 01       	movw	r30, r28
     4f4:	35 96       	adiw	r30, 0x05	; 5
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4f8:	c9 01       	movw	r24, r18
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 26 08 	call	0x104c	; 0x104c <__divmodhi4>
     502:	80 83       	st	Z, r24
	val=val/10;
     504:	c9 01       	movw	r24, r18
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 26 08 	call	0x104c	; 0x104c <__divmodhi4>
     50e:	9b 01       	movw	r18, r22
     510:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     512:	21 15       	cp	r18, r1
     514:	31 05       	cpc	r19, r1
     516:	81 f7       	brne	.-32     	; 0x4f8 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     518:	bf ef       	ldi	r27, 0xFF	; 255
     51a:	0f 3f       	cpi	r16, 0xFF	; 255
     51c:	1b 07       	cpc	r17, r27
     51e:	79 f4       	brne	.+30     	; 0x53e <lcd_write_int+0x74>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_write_int+0x66>
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	fa 01       	movw	r30, r20
     532:	e2 0f       	add	r30, r18
     534:	f3 1f       	adc	r31, r19
     536:	80 81       	ld	r24, Z
     538:	88 23       	and	r24, r24
     53a:	c1 f3       	breq	.-16     	; 0x52c <lcd_write_int+0x62>
     53c:	04 c0       	rjmp	.+8      	; 0x546 <lcd_write_int+0x7c>
	else
		j=5-field_length;
     53e:	25 e0       	ldi	r18, 0x05	; 5
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	20 1b       	sub	r18, r16
     544:	31 0b       	sbc	r19, r17
     546:	7e 01       	movw	r14, r28
     548:	08 94       	sec
     54a:	e1 1c       	adc	r14, r1
     54c:	f1 1c       	adc	r15, r1
     54e:	e2 0e       	add	r14, r18
     550:	f3 1e       	adc	r15, r19
     552:	89 01       	movw	r16, r18
     554:	09 c0       	rjmp	.+18     	; 0x568 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     556:	f7 01       	movw	r30, r14
     558:	81 91       	ld	r24, Z+
     55a:	7f 01       	movw	r14, r30
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	05 30       	cpi	r16, 0x05	; 5
     56a:	11 05       	cpc	r17, r1
     56c:	a4 f3       	brlt	.-24     	; 0x556 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     586:	88 32       	cpi	r24, 0x28	; 40
     588:	30 f4       	brcc	.+12     	; 0x596 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     58a:	61 11       	cpse	r22, r1
     58c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     596:	08 95       	ret

00000598 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     59e:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_string(msg);
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	8a 01       	movw	r16, r20
     5b8:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ba:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_int(val,fl);
     5be:	c8 01       	movw	r24, r16
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_write_int>
}
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5d0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5d2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5d8:	87 e6       	ldi	r24, 0x67	; 103
     5da:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5dc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
}
     5e2:	08 95       	ret

000005e4 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5e4:	5d 9b       	sbis	0x0b, 5	; 11
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5e8:	8c b9       	out	0x0c, r24	; 12
}
     5ea:	08 95       	ret

000005ec <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     5f4:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     5f6:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	c9 f7       	brne	.-14     	; 0x5f0 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     5fe:	08 95       	ret

00000600 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     608:	5d 9b       	sbis	0x0b, 5	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     60c:	8d e0       	ldi	r24, 0x0D	; 13
     60e:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     610:	08 95       	ret

00000612 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     612:	5f 9b       	sbis	0x0b, 7	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     616:	8c b1       	in	r24, 0x0c	; 12
}
     618:	08 95       	ret

0000061a <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	84 bb       	out	0x14, r24	; 20
}
     61e:	08 95       	ret

00000620 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     620:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     624:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     626:	af 98       	cbi	0x15, 7	; 21
}
     628:	08 95       	ret

0000062a <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     62c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     62e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     630:	af 98       	cbi	0x15, 7	; 21
}
     632:	08 95       	ret

00000634 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     634:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     638:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     642:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     644:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     646:	08 95       	ret

00000648 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     64c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     64e:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     650:	08 95       	ret

00000652 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     658:	af 9a       	sbi	0x15, 7	; 21
}
     65a:	08 95       	ret

0000065c <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}
     664:	08 95       	ret

00000666 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     668:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     672:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     67c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     686:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     688:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     690:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     692:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	8f 60       	ori	r24, 0x0F	; 15
     69c:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     69e:	81 b3       	in	r24, 0x11	; 17
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	81 bb       	out	0x11, r24	; 17
}
     6a4:	08 95       	ret

000006a6 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 95       	com	r18
     6ac:	30 95       	com	r19
     6ae:	21 70       	andi	r18, 0x01	; 1
     6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6b6:	20 b3       	in	r18, 0x10	; 16
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	20 95       	com	r18
     6d8:	30 95       	com	r19
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	08 95       	ret

000006e2 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6e2:	20 b3       	in	r18, 0x10	; 16
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	4a 95       	dec	r20
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <pressed_switch3+0x6>
     6f0:	20 95       	com	r18
     6f2:	30 95       	com	r19
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <line_track>:
float kd = 1.2;//1
float pid;
float p = 0,i = 0,d = 0;

void line_track(void)
{
     6fc:	4f 92       	push	r4
     6fe:	5f 92       	push	r5
     700:	6f 92       	push	r6
     702:	7f 92       	push	r7
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
	check_sensors();
     718:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     71c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     71e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     720:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     722:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	switch(sensorbyte)
     724:	80 91 7a 00 	lds	r24, 0x007A
     728:	84 30       	cpi	r24, 0x04	; 4
     72a:	09 f1       	breq	.+66     	; 0x76e <line_track+0x72>
     72c:	85 30       	cpi	r24, 0x05	; 5
     72e:	50 f4       	brcc	.+20     	; 0x744 <line_track+0x48>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	b1 f1       	breq	.+108    	; 0x7a0 <line_track+0xa4>
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	b8 f1       	brcs	.+110    	; 0x7a6 <line_track+0xaa>
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	e1 f0       	breq	.+56     	; 0x774 <line_track+0x78>
     73c:	83 30       	cpi	r24, 0x03	; 3
     73e:	09 f0       	breq	.+2      	; 0x742 <line_track+0x46>
     740:	52 c0       	rjmp	.+164    	; 0x7e6 <line_track+0xea>
     742:	22 c0       	rjmp	.+68     	; 0x788 <line_track+0x8c>
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	49 f1       	breq	.+82     	; 0x79a <line_track+0x9e>
     748:	89 30       	cpi	r24, 0x09	; 9
     74a:	30 f4       	brcc	.+12     	; 0x758 <line_track+0x5c>
     74c:	86 30       	cpi	r24, 0x06	; 6
     74e:	51 f0       	breq	.+20     	; 0x764 <line_track+0x68>
     750:	87 30       	cpi	r24, 0x07	; 7
     752:	09 f0       	breq	.+2      	; 0x756 <line_track+0x5a>
     754:	48 c0       	rjmp	.+144    	; 0x7e6 <line_track+0xea>
     756:	1e c0       	rjmp	.+60     	; 0x794 <line_track+0x98>
     758:	8c 30       	cpi	r24, 0x0C	; 12
     75a:	99 f0       	breq	.+38     	; 0x782 <line_track+0x86>
     75c:	8e 30       	cpi	r24, 0x0E	; 14
     75e:	09 f0       	breq	.+2      	; 0x762 <line_track+0x66>
     760:	42 c0       	rjmp	.+132    	; 0x7e6 <line_track+0xea>
     762:	15 c0       	rjmp	.+42     	; 0x78e <line_track+0x92>
	{
		case 0b0110:mpos=0; break;//sensor numbering starts from right
     764:	10 92 7c 00 	sts	0x007C, r1
     768:	10 92 7b 00 	sts	0x007B, r1
     76c:	3c c0       	rjmp	.+120    	; 0x7e6 <line_track+0xea>
		
		case 0b0100:mpos = 1; break;
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	02 c0       	rjmp	.+4      	; 0x778 <line_track+0x7c>
		
	case 0b0010:mpos = -1; break;
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	9f ef       	ldi	r25, 0xFF	; 255
     778:	90 93 7c 00 	sts	0x007C, r25
     77c:	80 93 7b 00 	sts	0x007B, r24
     780:	32 c0       	rjmp	.+100    	; 0x7e6 <line_track+0xea>
		
		case 0b1100:mpos = 3; break;
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	f8 cf       	rjmp	.-16     	; 0x778 <line_track+0x7c>
		
		case 0b0011:mpos = -3; break;
     788:	8d ef       	ldi	r24, 0xFD	; 253
     78a:	9f ef       	ldi	r25, 0xFF	; 255
     78c:	f5 cf       	rjmp	.-22     	; 0x778 <line_track+0x7c>
		
		case 0b1110:mpos = 4; break;
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	f2 cf       	rjmp	.-28     	; 0x778 <line_track+0x7c>
		
		case 0b0111:mpos = -4; break;
     794:	8c ef       	ldi	r24, 0xFC	; 252
     796:	9f ef       	ldi	r25, 0xFF	; 255
     798:	ef cf       	rjmp	.-34     	; 0x778 <line_track+0x7c>
		
		case 0b1000:mpos = 6; break;
     79a:	86 e0       	ldi	r24, 0x06	; 6
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	ec cf       	rjmp	.-40     	; 0x778 <line_track+0x7c>
		
		case 0b0001:mpos = -6; break;
     7a0:	8a ef       	ldi	r24, 0xFA	; 250
     7a2:	9f ef       	ldi	r25, 0xFF	; 255
     7a4:	e9 cf       	rjmp	.-46     	; 0x778 <line_track+0x7c>
		
		case 0b0000: if(bit_is_set(PIND,6)&&bit_is_set(PINA,4)&&bit_is_set(PINA,5)&&bit_is_set(PINA,6)&&bit_is_set(PINA,7)&&bit_is_set(PIND,7)){lcd_clear();lcd_write_string_xy(1,0,"SHIT SHIT SHIT");lcd_write_string_xy(1,1,"SHIT SHIT SHIT");} break;
     7a6:	86 9b       	sbis	0x10, 6	; 16
     7a8:	1e c0       	rjmp	.+60     	; 0x7e6 <line_track+0xea>
     7aa:	cc 9b       	sbis	0x19, 4	; 25
     7ac:	1c c0       	rjmp	.+56     	; 0x7e6 <line_track+0xea>
     7ae:	cd 9b       	sbis	0x19, 5	; 25
     7b0:	1a c0       	rjmp	.+52     	; 0x7e6 <line_track+0xea>
     7b2:	ce 9b       	sbis	0x19, 6	; 25
     7b4:	18 c0       	rjmp	.+48     	; 0x7e6 <line_track+0xea>
     7b6:	cf 9b       	sbis	0x19, 7	; 25
     7b8:	16 c0       	rjmp	.+44     	; 0x7e6 <line_track+0xea>
     7ba:	87 9b       	sbis	0x10, 7	; 16
     7bc:	14 c0       	rjmp	.+40     	; 0x7e6 <line_track+0xea>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	40 e6       	ldi	r20, 0x60	; 96
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	40 e6       	ldi	r20, 0x60	; 96
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		
		default: break;
	}
	
	p = mpos * kp;
     7e6:	40 90 7b 00 	lds	r4, 0x007B
     7ea:	50 90 7c 00 	lds	r5, 0x007C
     7ee:	b2 01       	movw	r22, r4
     7f0:	88 27       	eor	r24, r24
     7f2:	77 fd       	sbrc	r23, 7
     7f4:	80 95       	com	r24
     7f6:	98 2f       	mov	r25, r24
     7f8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__floatsisf>
     7fc:	7b 01       	movw	r14, r22
     7fe:	8c 01       	movw	r16, r24
     800:	20 91 71 00 	lds	r18, 0x0071
     804:	30 91 72 00 	lds	r19, 0x0072
     808:	40 91 73 00 	lds	r20, 0x0073
     80c:	50 91 74 00 	lds	r21, 0x0074
     810:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     814:	3b 01       	movw	r6, r22
     816:	4c 01       	movw	r8, r24
     818:	60 93 87 00 	sts	0x0087, r22
     81c:	70 93 88 00 	sts	0x0088, r23
     820:	80 93 89 00 	sts	0x0089, r24
     824:	90 93 8a 00 	sts	0x008A, r25
	i += mpos;
     828:	c8 01       	movw	r24, r16
     82a:	b7 01       	movw	r22, r14
     82c:	20 91 8b 00 	lds	r18, 0x008B
     830:	30 91 8c 00 	lds	r19, 0x008C
     834:	40 91 8d 00 	lds	r20, 0x008D
     838:	50 91 8e 00 	lds	r21, 0x008E
     83c:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3>
     840:	5b 01       	movw	r10, r22
     842:	6c 01       	movw	r12, r24
     844:	60 93 8b 00 	sts	0x008B, r22
     848:	70 93 8c 00 	sts	0x008C, r23
     84c:	80 93 8d 00 	sts	0x008D, r24
     850:	90 93 8e 00 	sts	0x008E, r25
	d = kd * (mpos-prempos);
     854:	80 91 7d 00 	lds	r24, 0x007D
     858:	90 91 7e 00 	lds	r25, 0x007E
     85c:	b2 01       	movw	r22, r4
     85e:	68 1b       	sub	r22, r24
     860:	79 0b       	sbc	r23, r25
     862:	88 27       	eor	r24, r24
     864:	77 fd       	sbrc	r23, 7
     866:	80 95       	com	r24
     868:	98 2f       	mov	r25, r24
     86a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__floatsisf>
     86e:	20 91 75 00 	lds	r18, 0x0075
     872:	30 91 76 00 	lds	r19, 0x0076
     876:	40 91 77 00 	lds	r20, 0x0077
     87a:	50 91 78 00 	lds	r21, 0x0078
     87e:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     882:	7b 01       	movw	r14, r22
     884:	8c 01       	movw	r16, r24
     886:	60 93 8f 00 	sts	0x008F, r22
     88a:	70 93 90 00 	sts	0x0090, r23
     88e:	80 93 91 00 	sts	0x0091, r24
     892:	90 93 92 00 	sts	0x0092, r25
	pid = p + ki*i + d;
     896:	c6 01       	movw	r24, r12
     898:	b5 01       	movw	r22, r10
     89a:	20 91 83 00 	lds	r18, 0x0083
     89e:	30 91 84 00 	lds	r19, 0x0084
     8a2:	40 91 85 00 	lds	r20, 0x0085
     8a6:	50 91 86 00 	lds	r21, 0x0086
     8aa:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	c4 01       	movw	r24, r8
     8b4:	b3 01       	movw	r22, r6
     8b6:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3>
     8ba:	a8 01       	movw	r20, r16
     8bc:	97 01       	movw	r18, r14
     8be:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3>
     8c2:	5b 01       	movw	r10, r22
     8c4:	6c 01       	movw	r12, r24
     8c6:	60 93 93 00 	sts	0x0093, r22
     8ca:	70 93 94 00 	sts	0x0094, r23
     8ce:	80 93 95 00 	sts	0x0095, r24
     8d2:	90 93 96 00 	sts	0x0096, r25
	motor1_value = opt + pid;//left motor is m1
     8d6:	60 91 6f 00 	lds	r22, 0x006F
     8da:	70 91 70 00 	lds	r23, 0x0070
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__floatunsisf>
     8e6:	3b 01       	movw	r6, r22
     8e8:	4c 01       	movw	r8, r24
     8ea:	a6 01       	movw	r20, r12
     8ec:	95 01       	movw	r18, r10
     8ee:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3>
     8f2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixsfsi>
     8f6:	7b 01       	movw	r14, r22
     8f8:	8c 01       	movw	r16, r24
     8fa:	60 93 7f 00 	sts	0x007F, r22
     8fe:	f0 92 80 00 	sts	0x0080, r15
	motor2_value = opt - pid;
     902:	c4 01       	movw	r24, r8
     904:	b3 01       	movw	r22, r6
     906:	a6 01       	movw	r20, r12
     908:	95 01       	movw	r18, r10
     90a:	0e 94 0b 06 	call	0xc16	; 0xc16 <__subsf3>
     90e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixsfsi>
     912:	60 93 81 00 	sts	0x0081, r22
     916:	70 93 82 00 	sts	0x0082, r23
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     91a:	fb bc       	out	0x2b, r15	; 43
     91c:	ea bc       	out	0x2a, r14	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     91e:	79 bd       	out	0x29, r23	; 41
     920:	68 bd       	out	0x28, r22	; 40
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	prempos=mpos;
     922:	50 92 7e 00 	sts	0x007E, r5
     926:	40 92 7d 00 	sts	0x007D, r4
	delay_microsec(10);
     92a:	8a e0       	ldi	r24, 0x0A	; 10
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
}
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	af 90       	pop	r10
     942:	9f 90       	pop	r9
     944:	8f 90       	pop	r8
     946:	7f 90       	pop	r7
     948:	6f 90       	pop	r6
     94a:	5f 90       	pop	r5
     94c:	4f 90       	pop	r4
     94e:	08 95       	ret

00000950 <init_devices>:

void init_devices(void)
{
	port_init();
     950:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
     954:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
     956:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
     958:	80 e6       	ldi	r24, 0x60	; 96
     95a:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
     95c:	87 e8       	ldi	r24, 0x87	; 135
     95e:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
     960:	80 e8       	ldi	r24, 0x80	; 128
     962:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
	lcd_clear();
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
     976:	82 b3       	in	r24, 0x12	; 18
     978:	8f 60       	ori	r24, 0x0F	; 15
     97a:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     97c:	81 b3       	in	r24, 0x11	; 17
     97e:	80 7f       	andi	r24, 0xF0	; 240
     980:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
     982:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
     986:	08 95       	ret

00000988 <main>:

int main(void)
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
	init_devices();
     98c:	0e 94 a8 04 	call	0x950	; 0x950 <init_devices>
	lcd_write_int_xy(2,0,kp,2);
     990:	60 91 71 00 	lds	r22, 0x0071
     994:	70 91 72 00 	lds	r23, 0x0072
     998:	80 91 73 00 	lds	r24, 0x0073
     99c:	90 91 74 00 	lds	r25, 0x0074
     9a0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixsfsi>
     9a4:	9b 01       	movw	r18, r22
     9a6:	ac 01       	movw	r20, r24
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	a9 01       	movw	r20, r18
     9b2:	22 e0       	ldi	r18, 0x02	; 2
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(7,0,kd*10,2);
     9ba:	60 91 75 00 	lds	r22, 0x0075
     9be:	70 91 76 00 	lds	r23, 0x0076
     9c2:	80 91 77 00 	lds	r24, 0x0077
     9c6:	90 91 78 00 	lds	r25, 0x0078
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e2       	ldi	r20, 0x20	; 32
     9d0:	51 e4       	ldi	r21, 0x41	; 65
     9d2:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     9d6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixsfsi>
     9da:	9b 01       	movw	r18, r22
     9dc:	ac 01       	movw	r20, r24
     9de:	87 e0       	ldi	r24, 0x07	; 7
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	a9 01       	movw	r20, r18
     9e8:	22 e0       	ldi	r18, 0x02	; 2
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(12,0,ki*100,2);
     9f0:	60 91 83 00 	lds	r22, 0x0083
     9f4:	70 91 84 00 	lds	r23, 0x0084
     9f8:	80 91 85 00 	lds	r24, 0x0085
     9fc:	90 91 86 00 	lds	r25, 0x0086
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	48 ec       	ldi	r20, 0xC8	; 200
     a06:	52 e4       	ldi	r21, 0x42	; 66
     a08:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     a0c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixsfsi>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	8c e0       	ldi	r24, 0x0C	; 12
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	a9 01       	movw	r20, r18
     a1e:	22 e0       	ldi	r18, 0x02	; 2
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a26:	c0 e9       	ldi	r28, 0x90	; 144
     a28:	d1 e0       	ldi	r29, 0x01	; 1
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     a2a:	82 99       	sbic	0x10, 2	; 16
     a2c:	9a c0       	rjmp	.+308    	; 0xb62 <main+0x1da>
		
		if(pressed_switch2())
		{
			while(1)
			{
				line_track();
     a2e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <line_track>
				LED&=0b11110000;
     a32:	85 b3       	in	r24, 0x15	; 21
     a34:	80 7f       	andi	r24, 0xF0	; 240
     a36:	85 bb       	out	0x15, r24	; 21
				LED|=sensorbyte;
     a38:	85 b3       	in	r24, 0x15	; 21
     a3a:	90 91 7a 00 	lds	r25, 0x007A
     a3e:	89 2b       	or	r24, r25
     a40:	85 bb       	out	0x15, r24	; 21
     a42:	f5 cf       	rjmp	.-22     	; 0xa2e <main+0xa6>
			}
		}
		
		if(pressed_switch3())
		{
			kp++;
     a44:	60 91 71 00 	lds	r22, 0x0071
     a48:	70 91 72 00 	lds	r23, 0x0072
     a4c:	80 91 73 00 	lds	r24, 0x0073
     a50:	90 91 74 00 	lds	r25, 0x0074
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e8       	ldi	r20, 0x80	; 128
     a5a:	5f e3       	ldi	r21, 0x3F	; 63
     a5c:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3>
     a60:	60 93 71 00 	sts	0x0071, r22
     a64:	70 93 72 00 	sts	0x0072, r23
     a68:	80 93 73 00 	sts	0x0073, r24
     a6c:	90 93 74 00 	sts	0x0074, r25
			lcd_write_int_xy(2,0,kp,2);
     a70:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixsfsi>
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	a9 01       	movw	r20, r18
     a82:	22 e0       	ldi	r18, 0x02	; 2
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
     a8a:	8c ed       	ldi	r24, 0xDC	; 220
     a8c:	95 e0       	ldi	r25, 0x05	; 5
     a8e:	fe 01       	movw	r30, r28
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <main+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a96:	d9 f7       	brne	.-10     	; 0xa8e <main+0x106>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     a98:	80 99       	sbic	0x10, 0	; 16
     a9a:	30 c0       	rjmp	.+96     	; 0xafc <main+0x174>
			_delay_ms(150);
		}
		
		if(pressed_switch0())
		{
			ki-=0.01;
     a9c:	60 91 83 00 	lds	r22, 0x0083
     aa0:	70 91 84 00 	lds	r23, 0x0084
     aa4:	80 91 85 00 	lds	r24, 0x0085
     aa8:	90 91 86 00 	lds	r25, 0x0086
     aac:	2a e0       	ldi	r18, 0x0A	; 10
     aae:	37 ed       	ldi	r19, 0xD7	; 215
     ab0:	43 e2       	ldi	r20, 0x23	; 35
     ab2:	5c e3       	ldi	r21, 0x3C	; 60
     ab4:	0e 94 0b 06 	call	0xc16	; 0xc16 <__subsf3>
     ab8:	60 93 83 00 	sts	0x0083, r22
     abc:	70 93 84 00 	sts	0x0084, r23
     ac0:	80 93 85 00 	sts	0x0085, r24
     ac4:	90 93 86 00 	sts	0x0086, r25
			lcd_write_int_xy(12,0,-ki*100,2);
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	48 ec       	ldi	r20, 0xC8	; 200
     ace:	52 ec       	ldi	r21, 0xC2	; 194
     ad0:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     ad4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixsfsi>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	8c e0       	ldi	r24, 0x0C	; 12
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	a9 01       	movw	r20, r18
     ae6:	22 e0       	ldi	r18, 0x02	; 2
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
     aee:	8c ed       	ldi	r24, 0xDC	; 220
     af0:	95 e0       	ldi	r25, 0x05	; 5
     af2:	fe 01       	movw	r30, r28
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <main+0x16c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afa:	d9 f7       	brne	.-10     	; 0xaf2 <main+0x16a>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     afc:	81 99       	sbic	0x10, 1	; 16
     afe:	95 cf       	rjmp	.-214    	; 0xa2a <main+0xa2>
			_delay_ms(150);
		}
		
		if(pressed_switch1())
		{
			ki+=0.01;
     b00:	60 91 83 00 	lds	r22, 0x0083
     b04:	70 91 84 00 	lds	r23, 0x0084
     b08:	80 91 85 00 	lds	r24, 0x0085
     b0c:	90 91 86 00 	lds	r25, 0x0086
     b10:	2a e0       	ldi	r18, 0x0A	; 10
     b12:	37 ed       	ldi	r19, 0xD7	; 215
     b14:	43 e2       	ldi	r20, 0x23	; 35
     b16:	5c e3       	ldi	r21, 0x3C	; 60
     b18:	0e 94 0c 06 	call	0xc18	; 0xc18 <__addsf3>
     b1c:	60 93 83 00 	sts	0x0083, r22
     b20:	70 93 84 00 	sts	0x0084, r23
     b24:	80 93 85 00 	sts	0x0085, r24
     b28:	90 93 86 00 	sts	0x0086, r25
			lcd_write_int_xy(12,0,ki*100,2);
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	48 ec       	ldi	r20, 0xC8	; 200
     b32:	52 e4       	ldi	r21, 0x42	; 66
     b34:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     b38:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fixsfsi>
     b3c:	9b 01       	movw	r18, r22
     b3e:	ac 01       	movw	r20, r24
     b40:	8c e0       	ldi	r24, 0x0C	; 12
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	a9 01       	movw	r20, r18
     b4a:	22 e0       	ldi	r18, 0x02	; 2
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
     b52:	8c ed       	ldi	r24, 0xDC	; 220
     b54:	95 e0       	ldi	r25, 0x05	; 5
     b56:	fe 01       	movw	r30, r28
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <main+0x1d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b5c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b5e:	d9 f7       	brne	.-10     	; 0xb56 <main+0x1ce>
     b60:	64 cf       	rjmp	.-312    	; 0xa2a <main+0xa2>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     b62:	83 9b       	sbis	0x10, 3	; 16
     b64:	6f cf       	rjmp	.-290    	; 0xa44 <main+0xbc>
     b66:	98 cf       	rjmp	.-208    	; 0xa98 <main+0x110>

00000b68 <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 4d 08 	call	0x109a	; 0x109a <__eerd_byte_m16>
     b70:	80 93 9b 00 	sts	0x009B, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 4d 08 	call	0x109a	; 0x109a <__eerd_byte_m16>
     b7c:	80 93 9c 00 	sts	0x009C, r24
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 4d 08 	call	0x109a	; 0x109a <__eerd_byte_m16>
     b88:	80 93 9d 00 	sts	0x009D, r24
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 4d 08 	call	0x109a	; 0x109a <__eerd_byte_m16>
     b94:	80 93 9e 00 	sts	0x009E, r24
		eeprom_addr++;
	}
}
     b98:	08 95       	ret

00000b9a <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
     b9e:	20 91 9f 00 	lds	r18, 0x009F
     ba2:	80 91 97 00 	lds	r24, 0x0097
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	82 0f       	add	r24, r18
     baa:	91 1d       	adc	r25, r1
     bac:	95 95       	asr	r25
     bae:	87 95       	ror	r24
     bb0:	80 93 9b 00 	sts	0x009B, r24
     bb4:	20 91 a0 00 	lds	r18, 0x00A0
     bb8:	80 91 98 00 	lds	r24, 0x0098
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	82 0f       	add	r24, r18
     bc0:	91 1d       	adc	r25, r1
     bc2:	95 95       	asr	r25
     bc4:	87 95       	ror	r24
     bc6:	80 93 9c 00 	sts	0x009C, r24
     bca:	20 91 a1 00 	lds	r18, 0x00A1
     bce:	80 91 99 00 	lds	r24, 0x0099
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	82 0f       	add	r24, r18
     bd6:	91 1d       	adc	r25, r1
     bd8:	95 95       	asr	r25
     bda:	87 95       	ror	r24
     bdc:	80 93 9d 00 	sts	0x009D, r24
     be0:	20 91 a2 00 	lds	r18, 0x00A2
     be4:	80 91 9a 00 	lds	r24, 0x009A
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	82 0f       	add	r24, r18
     bec:	91 1d       	adc	r25, r1
     bee:	95 95       	asr	r25
     bf0:	87 95       	ror	r24
     bf2:	80 93 9e 00 	sts	0x009E, r24
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
     bfa:	fe 01       	movw	r30, r28
     bfc:	e5 56       	subi	r30, 0x65	; 101
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	ce 01       	movw	r24, r28
     c02:	60 81       	ld	r22, Z
     c04:	0e 94 55 08 	call	0x10aa	; 0x10aa <__eewr_byte_m16>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
     c08:	21 96       	adiw	r28, 0x01	; 1
     c0a:	c4 30       	cpi	r28, 0x04	; 4
     c0c:	d1 05       	cpc	r29, r1
     c0e:	a9 f7       	brne	.-22     	; 0xbfa <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <__subsf3>:
     c16:	50 58       	subi	r21, 0x80	; 128

00000c18 <__addsf3>:
     c18:	bb 27       	eor	r27, r27
     c1a:	aa 27       	eor	r26, r26
     c1c:	0e d0       	rcall	.+28     	; 0xc3a <__addsf3x>
     c1e:	75 c1       	rjmp	.+746    	; 0xf0a <__fp_round>
     c20:	66 d1       	rcall	.+716    	; 0xeee <__fp_pscA>
     c22:	30 f0       	brcs	.+12     	; 0xc30 <__addsf3+0x18>
     c24:	6b d1       	rcall	.+726    	; 0xefc <__fp_pscB>
     c26:	20 f0       	brcs	.+8      	; 0xc30 <__addsf3+0x18>
     c28:	31 f4       	brne	.+12     	; 0xc36 <__addsf3+0x1e>
     c2a:	9f 3f       	cpi	r25, 0xFF	; 255
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__addsf3+0x1a>
     c2e:	1e f4       	brtc	.+6      	; 0xc36 <__addsf3+0x1e>
     c30:	5b c1       	rjmp	.+694    	; 0xee8 <__fp_nan>
     c32:	0e f4       	brtc	.+2      	; 0xc36 <__addsf3+0x1e>
     c34:	e0 95       	com	r30
     c36:	e7 fb       	bst	r30, 7
     c38:	51 c1       	rjmp	.+674    	; 0xedc <__fp_inf>

00000c3a <__addsf3x>:
     c3a:	e9 2f       	mov	r30, r25
     c3c:	77 d1       	rcall	.+750    	; 0xf2c <__fp_split3>
     c3e:	80 f3       	brcs	.-32     	; 0xc20 <__addsf3+0x8>
     c40:	ba 17       	cp	r27, r26
     c42:	62 07       	cpc	r22, r18
     c44:	73 07       	cpc	r23, r19
     c46:	84 07       	cpc	r24, r20
     c48:	95 07       	cpc	r25, r21
     c4a:	18 f0       	brcs	.+6      	; 0xc52 <__addsf3x+0x18>
     c4c:	71 f4       	brne	.+28     	; 0xc6a <__addsf3x+0x30>
     c4e:	9e f5       	brtc	.+102    	; 0xcb6 <__addsf3x+0x7c>
     c50:	8f c1       	rjmp	.+798    	; 0xf70 <__fp_zero>
     c52:	0e f4       	brtc	.+2      	; 0xc56 <__addsf3x+0x1c>
     c54:	e0 95       	com	r30
     c56:	0b 2e       	mov	r0, r27
     c58:	ba 2f       	mov	r27, r26
     c5a:	a0 2d       	mov	r26, r0
     c5c:	0b 01       	movw	r0, r22
     c5e:	b9 01       	movw	r22, r18
     c60:	90 01       	movw	r18, r0
     c62:	0c 01       	movw	r0, r24
     c64:	ca 01       	movw	r24, r20
     c66:	a0 01       	movw	r20, r0
     c68:	11 24       	eor	r1, r1
     c6a:	ff 27       	eor	r31, r31
     c6c:	59 1b       	sub	r21, r25
     c6e:	99 f0       	breq	.+38     	; 0xc96 <__addsf3x+0x5c>
     c70:	59 3f       	cpi	r21, 0xF9	; 249
     c72:	50 f4       	brcc	.+20     	; 0xc88 <__addsf3x+0x4e>
     c74:	50 3e       	cpi	r21, 0xE0	; 224
     c76:	68 f1       	brcs	.+90     	; 0xcd2 <__addsf3x+0x98>
     c78:	1a 16       	cp	r1, r26
     c7a:	f0 40       	sbci	r31, 0x00	; 0
     c7c:	a2 2f       	mov	r26, r18
     c7e:	23 2f       	mov	r18, r19
     c80:	34 2f       	mov	r19, r20
     c82:	44 27       	eor	r20, r20
     c84:	58 5f       	subi	r21, 0xF8	; 248
     c86:	f3 cf       	rjmp	.-26     	; 0xc6e <__addsf3x+0x34>
     c88:	46 95       	lsr	r20
     c8a:	37 95       	ror	r19
     c8c:	27 95       	ror	r18
     c8e:	a7 95       	ror	r26
     c90:	f0 40       	sbci	r31, 0x00	; 0
     c92:	53 95       	inc	r21
     c94:	c9 f7       	brne	.-14     	; 0xc88 <__addsf3x+0x4e>
     c96:	7e f4       	brtc	.+30     	; 0xcb6 <__addsf3x+0x7c>
     c98:	1f 16       	cp	r1, r31
     c9a:	ba 0b       	sbc	r27, r26
     c9c:	62 0b       	sbc	r22, r18
     c9e:	73 0b       	sbc	r23, r19
     ca0:	84 0b       	sbc	r24, r20
     ca2:	ba f0       	brmi	.+46     	; 0xcd2 <__addsf3x+0x98>
     ca4:	91 50       	subi	r25, 0x01	; 1
     ca6:	a1 f0       	breq	.+40     	; 0xcd0 <__addsf3x+0x96>
     ca8:	ff 0f       	add	r31, r31
     caa:	bb 1f       	adc	r27, r27
     cac:	66 1f       	adc	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	c2 f7       	brpl	.-16     	; 0xca4 <__addsf3x+0x6a>
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <__addsf3x+0x98>
     cb6:	ba 0f       	add	r27, r26
     cb8:	62 1f       	adc	r22, r18
     cba:	73 1f       	adc	r23, r19
     cbc:	84 1f       	adc	r24, r20
     cbe:	48 f4       	brcc	.+18     	; 0xcd2 <__addsf3x+0x98>
     cc0:	87 95       	ror	r24
     cc2:	77 95       	ror	r23
     cc4:	67 95       	ror	r22
     cc6:	b7 95       	ror	r27
     cc8:	f7 95       	ror	r31
     cca:	9e 3f       	cpi	r25, 0xFE	; 254
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <__addsf3x+0x96>
     cce:	b3 cf       	rjmp	.-154    	; 0xc36 <__addsf3+0x1e>
     cd0:	93 95       	inc	r25
     cd2:	88 0f       	add	r24, r24
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <__addsf3x+0x9e>
     cd6:	99 27       	eor	r25, r25
     cd8:	ee 0f       	add	r30, r30
     cda:	97 95       	ror	r25
     cdc:	87 95       	ror	r24
     cde:	08 95       	ret

00000ce0 <__cmpsf2>:
     ce0:	d9 d0       	rcall	.+434    	; 0xe94 <__fp_cmp>
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <__cmpsf2+0x6>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	08 95       	ret

00000ce8 <__divsf3>:
     ce8:	0c d0       	rcall	.+24     	; 0xd02 <__divsf3x>
     cea:	0f c1       	rjmp	.+542    	; 0xf0a <__fp_round>
     cec:	07 d1       	rcall	.+526    	; 0xefc <__fp_pscB>
     cee:	40 f0       	brcs	.+16     	; 0xd00 <__divsf3+0x18>
     cf0:	fe d0       	rcall	.+508    	; 0xeee <__fp_pscA>
     cf2:	30 f0       	brcs	.+12     	; 0xd00 <__divsf3+0x18>
     cf4:	21 f4       	brne	.+8      	; 0xcfe <__divsf3+0x16>
     cf6:	5f 3f       	cpi	r21, 0xFF	; 255
     cf8:	19 f0       	breq	.+6      	; 0xd00 <__divsf3+0x18>
     cfa:	f0 c0       	rjmp	.+480    	; 0xedc <__fp_inf>
     cfc:	51 11       	cpse	r21, r1
     cfe:	39 c1       	rjmp	.+626    	; 0xf72 <__fp_szero>
     d00:	f3 c0       	rjmp	.+486    	; 0xee8 <__fp_nan>

00000d02 <__divsf3x>:
     d02:	14 d1       	rcall	.+552    	; 0xf2c <__fp_split3>
     d04:	98 f3       	brcs	.-26     	; 0xcec <__divsf3+0x4>

00000d06 <__divsf3_pse>:
     d06:	99 23       	and	r25, r25
     d08:	c9 f3       	breq	.-14     	; 0xcfc <__divsf3+0x14>
     d0a:	55 23       	and	r21, r21
     d0c:	b1 f3       	breq	.-20     	; 0xcfa <__divsf3+0x12>
     d0e:	95 1b       	sub	r25, r21
     d10:	55 0b       	sbc	r21, r21
     d12:	bb 27       	eor	r27, r27
     d14:	aa 27       	eor	r26, r26
     d16:	62 17       	cp	r22, r18
     d18:	73 07       	cpc	r23, r19
     d1a:	84 07       	cpc	r24, r20
     d1c:	38 f0       	brcs	.+14     	; 0xd2c <__divsf3_pse+0x26>
     d1e:	9f 5f       	subi	r25, 0xFF	; 255
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	44 1f       	adc	r20, r20
     d28:	aa 1f       	adc	r26, r26
     d2a:	a9 f3       	breq	.-22     	; 0xd16 <__divsf3_pse+0x10>
     d2c:	33 d0       	rcall	.+102    	; 0xd94 <__divsf3_pse+0x8e>
     d2e:	0e 2e       	mov	r0, r30
     d30:	3a f0       	brmi	.+14     	; 0xd40 <__divsf3_pse+0x3a>
     d32:	e0 e8       	ldi	r30, 0x80	; 128
     d34:	30 d0       	rcall	.+96     	; 0xd96 <__divsf3_pse+0x90>
     d36:	91 50       	subi	r25, 0x01	; 1
     d38:	50 40       	sbci	r21, 0x00	; 0
     d3a:	e6 95       	lsr	r30
     d3c:	00 1c       	adc	r0, r0
     d3e:	ca f7       	brpl	.-14     	; 0xd32 <__divsf3_pse+0x2c>
     d40:	29 d0       	rcall	.+82     	; 0xd94 <__divsf3_pse+0x8e>
     d42:	fe 2f       	mov	r31, r30
     d44:	27 d0       	rcall	.+78     	; 0xd94 <__divsf3_pse+0x8e>
     d46:	66 0f       	add	r22, r22
     d48:	77 1f       	adc	r23, r23
     d4a:	88 1f       	adc	r24, r24
     d4c:	bb 1f       	adc	r27, r27
     d4e:	26 17       	cp	r18, r22
     d50:	37 07       	cpc	r19, r23
     d52:	48 07       	cpc	r20, r24
     d54:	ab 07       	cpc	r26, r27
     d56:	b0 e8       	ldi	r27, 0x80	; 128
     d58:	09 f0       	breq	.+2      	; 0xd5c <__divsf3_pse+0x56>
     d5a:	bb 0b       	sbc	r27, r27
     d5c:	80 2d       	mov	r24, r0
     d5e:	bf 01       	movw	r22, r30
     d60:	ff 27       	eor	r31, r31
     d62:	93 58       	subi	r25, 0x83	; 131
     d64:	5f 4f       	sbci	r21, 0xFF	; 255
     d66:	2a f0       	brmi	.+10     	; 0xd72 <__divsf3_pse+0x6c>
     d68:	9e 3f       	cpi	r25, 0xFE	; 254
     d6a:	51 05       	cpc	r21, r1
     d6c:	68 f0       	brcs	.+26     	; 0xd88 <__divsf3_pse+0x82>
     d6e:	b6 c0       	rjmp	.+364    	; 0xedc <__fp_inf>
     d70:	00 c1       	rjmp	.+512    	; 0xf72 <__fp_szero>
     d72:	5f 3f       	cpi	r21, 0xFF	; 255
     d74:	ec f3       	brlt	.-6      	; 0xd70 <__divsf3_pse+0x6a>
     d76:	98 3e       	cpi	r25, 0xE8	; 232
     d78:	dc f3       	brlt	.-10     	; 0xd70 <__divsf3_pse+0x6a>
     d7a:	86 95       	lsr	r24
     d7c:	77 95       	ror	r23
     d7e:	67 95       	ror	r22
     d80:	b7 95       	ror	r27
     d82:	f7 95       	ror	r31
     d84:	9f 5f       	subi	r25, 0xFF	; 255
     d86:	c9 f7       	brne	.-14     	; 0xd7a <__divsf3_pse+0x74>
     d88:	88 0f       	add	r24, r24
     d8a:	91 1d       	adc	r25, r1
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	97 f9       	bld	r25, 7
     d92:	08 95       	ret
     d94:	e1 e0       	ldi	r30, 0x01	; 1
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	bb 1f       	adc	r27, r27
     d9e:	62 17       	cp	r22, r18
     da0:	73 07       	cpc	r23, r19
     da2:	84 07       	cpc	r24, r20
     da4:	ba 07       	cpc	r27, r26
     da6:	20 f0       	brcs	.+8      	; 0xdb0 <__divsf3_pse+0xaa>
     da8:	62 1b       	sub	r22, r18
     daa:	73 0b       	sbc	r23, r19
     dac:	84 0b       	sbc	r24, r20
     dae:	ba 0b       	sbc	r27, r26
     db0:	ee 1f       	adc	r30, r30
     db2:	88 f7       	brcc	.-30     	; 0xd96 <__divsf3_pse+0x90>
     db4:	e0 95       	com	r30
     db6:	08 95       	ret

00000db8 <__fixsfsi>:
     db8:	04 d0       	rcall	.+8      	; 0xdc2 <__fixunssfsi>
     dba:	68 94       	set
     dbc:	b1 11       	cpse	r27, r1
     dbe:	d9 c0       	rjmp	.+434    	; 0xf72 <__fp_szero>
     dc0:	08 95       	ret

00000dc2 <__fixunssfsi>:
     dc2:	bc d0       	rcall	.+376    	; 0xf3c <__fp_splitA>
     dc4:	88 f0       	brcs	.+34     	; 0xde8 <__fixunssfsi+0x26>
     dc6:	9f 57       	subi	r25, 0x7F	; 127
     dc8:	90 f0       	brcs	.+36     	; 0xdee <__fixunssfsi+0x2c>
     dca:	b9 2f       	mov	r27, r25
     dcc:	99 27       	eor	r25, r25
     dce:	b7 51       	subi	r27, 0x17	; 23
     dd0:	a0 f0       	brcs	.+40     	; 0xdfa <__fixunssfsi+0x38>
     dd2:	d1 f0       	breq	.+52     	; 0xe08 <__fixunssfsi+0x46>
     dd4:	66 0f       	add	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	88 1f       	adc	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	1a f0       	brmi	.+6      	; 0xde4 <__fixunssfsi+0x22>
     dde:	ba 95       	dec	r27
     de0:	c9 f7       	brne	.-14     	; 0xdd4 <__fixunssfsi+0x12>
     de2:	12 c0       	rjmp	.+36     	; 0xe08 <__fixunssfsi+0x46>
     de4:	b1 30       	cpi	r27, 0x01	; 1
     de6:	81 f0       	breq	.+32     	; 0xe08 <__fixunssfsi+0x46>
     de8:	c3 d0       	rcall	.+390    	; 0xf70 <__fp_zero>
     dea:	b1 e0       	ldi	r27, 0x01	; 1
     dec:	08 95       	ret
     dee:	c0 c0       	rjmp	.+384    	; 0xf70 <__fp_zero>
     df0:	67 2f       	mov	r22, r23
     df2:	78 2f       	mov	r23, r24
     df4:	88 27       	eor	r24, r24
     df6:	b8 5f       	subi	r27, 0xF8	; 248
     df8:	39 f0       	breq	.+14     	; 0xe08 <__fixunssfsi+0x46>
     dfa:	b9 3f       	cpi	r27, 0xF9	; 249
     dfc:	cc f3       	brlt	.-14     	; 0xdf0 <__fixunssfsi+0x2e>
     dfe:	86 95       	lsr	r24
     e00:	77 95       	ror	r23
     e02:	67 95       	ror	r22
     e04:	b3 95       	inc	r27
     e06:	d9 f7       	brne	.-10     	; 0xdfe <__fixunssfsi+0x3c>
     e08:	3e f4       	brtc	.+14     	; 0xe18 <__fixunssfsi+0x56>
     e0a:	90 95       	com	r25
     e0c:	80 95       	com	r24
     e0e:	70 95       	com	r23
     e10:	61 95       	neg	r22
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	8f 4f       	sbci	r24, 0xFF	; 255
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	08 95       	ret

00000e1a <__floatunsisf>:
     e1a:	e8 94       	clt
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <__floatsisf+0x12>

00000e1e <__floatsisf>:
     e1e:	97 fb       	bst	r25, 7
     e20:	3e f4       	brtc	.+14     	; 0xe30 <__floatsisf+0x12>
     e22:	90 95       	com	r25
     e24:	80 95       	com	r24
     e26:	70 95       	com	r23
     e28:	61 95       	neg	r22
     e2a:	7f 4f       	sbci	r23, 0xFF	; 255
     e2c:	8f 4f       	sbci	r24, 0xFF	; 255
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	99 23       	and	r25, r25
     e32:	a9 f0       	breq	.+42     	; 0xe5e <__floatsisf+0x40>
     e34:	f9 2f       	mov	r31, r25
     e36:	96 e9       	ldi	r25, 0x96	; 150
     e38:	bb 27       	eor	r27, r27
     e3a:	93 95       	inc	r25
     e3c:	f6 95       	lsr	r31
     e3e:	87 95       	ror	r24
     e40:	77 95       	ror	r23
     e42:	67 95       	ror	r22
     e44:	b7 95       	ror	r27
     e46:	f1 11       	cpse	r31, r1
     e48:	f8 cf       	rjmp	.-16     	; 0xe3a <__floatsisf+0x1c>
     e4a:	fa f4       	brpl	.+62     	; 0xe8a <__floatsisf+0x6c>
     e4c:	bb 0f       	add	r27, r27
     e4e:	11 f4       	brne	.+4      	; 0xe54 <__floatsisf+0x36>
     e50:	60 ff       	sbrs	r22, 0
     e52:	1b c0       	rjmp	.+54     	; 0xe8a <__floatsisf+0x6c>
     e54:	6f 5f       	subi	r22, 0xFF	; 255
     e56:	7f 4f       	sbci	r23, 0xFF	; 255
     e58:	8f 4f       	sbci	r24, 0xFF	; 255
     e5a:	9f 4f       	sbci	r25, 0xFF	; 255
     e5c:	16 c0       	rjmp	.+44     	; 0xe8a <__floatsisf+0x6c>
     e5e:	88 23       	and	r24, r24
     e60:	11 f0       	breq	.+4      	; 0xe66 <__floatsisf+0x48>
     e62:	96 e9       	ldi	r25, 0x96	; 150
     e64:	11 c0       	rjmp	.+34     	; 0xe88 <__floatsisf+0x6a>
     e66:	77 23       	and	r23, r23
     e68:	21 f0       	breq	.+8      	; 0xe72 <__floatsisf+0x54>
     e6a:	9e e8       	ldi	r25, 0x8E	; 142
     e6c:	87 2f       	mov	r24, r23
     e6e:	76 2f       	mov	r23, r22
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <__floatsisf+0x5e>
     e72:	66 23       	and	r22, r22
     e74:	71 f0       	breq	.+28     	; 0xe92 <__floatsisf+0x74>
     e76:	96 e8       	ldi	r25, 0x86	; 134
     e78:	86 2f       	mov	r24, r22
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	2a f0       	brmi	.+10     	; 0xe8a <__floatsisf+0x6c>
     e80:	9a 95       	dec	r25
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	da f7       	brpl	.-10     	; 0xe80 <__floatsisf+0x62>
     e8a:	88 0f       	add	r24, r24
     e8c:	96 95       	lsr	r25
     e8e:	87 95       	ror	r24
     e90:	97 f9       	bld	r25, 7
     e92:	08 95       	ret

00000e94 <__fp_cmp>:
     e94:	99 0f       	add	r25, r25
     e96:	00 08       	sbc	r0, r0
     e98:	55 0f       	add	r21, r21
     e9a:	aa 0b       	sbc	r26, r26
     e9c:	e0 e8       	ldi	r30, 0x80	; 128
     e9e:	fe ef       	ldi	r31, 0xFE	; 254
     ea0:	16 16       	cp	r1, r22
     ea2:	17 06       	cpc	r1, r23
     ea4:	e8 07       	cpc	r30, r24
     ea6:	f9 07       	cpc	r31, r25
     ea8:	c0 f0       	brcs	.+48     	; 0xeda <__fp_cmp+0x46>
     eaa:	12 16       	cp	r1, r18
     eac:	13 06       	cpc	r1, r19
     eae:	e4 07       	cpc	r30, r20
     eb0:	f5 07       	cpc	r31, r21
     eb2:	98 f0       	brcs	.+38     	; 0xeda <__fp_cmp+0x46>
     eb4:	62 1b       	sub	r22, r18
     eb6:	73 0b       	sbc	r23, r19
     eb8:	84 0b       	sbc	r24, r20
     eba:	95 0b       	sbc	r25, r21
     ebc:	39 f4       	brne	.+14     	; 0xecc <__fp_cmp+0x38>
     ebe:	0a 26       	eor	r0, r26
     ec0:	61 f0       	breq	.+24     	; 0xeda <__fp_cmp+0x46>
     ec2:	23 2b       	or	r18, r19
     ec4:	24 2b       	or	r18, r20
     ec6:	25 2b       	or	r18, r21
     ec8:	21 f4       	brne	.+8      	; 0xed2 <__fp_cmp+0x3e>
     eca:	08 95       	ret
     ecc:	0a 26       	eor	r0, r26
     ece:	09 f4       	brne	.+2      	; 0xed2 <__fp_cmp+0x3e>
     ed0:	a1 40       	sbci	r26, 0x01	; 1
     ed2:	a6 95       	lsr	r26
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	81 1d       	adc	r24, r1
     ed8:	81 1d       	adc	r24, r1
     eda:	08 95       	ret

00000edc <__fp_inf>:
     edc:	97 f9       	bld	r25, 7
     ede:	9f 67       	ori	r25, 0x7F	; 127
     ee0:	80 e8       	ldi	r24, 0x80	; 128
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	08 95       	ret

00000ee8 <__fp_nan>:
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
     eea:	80 ec       	ldi	r24, 0xC0	; 192
     eec:	08 95       	ret

00000eee <__fp_pscA>:
     eee:	00 24       	eor	r0, r0
     ef0:	0a 94       	dec	r0
     ef2:	16 16       	cp	r1, r22
     ef4:	17 06       	cpc	r1, r23
     ef6:	18 06       	cpc	r1, r24
     ef8:	09 06       	cpc	r0, r25
     efa:	08 95       	ret

00000efc <__fp_pscB>:
     efc:	00 24       	eor	r0, r0
     efe:	0a 94       	dec	r0
     f00:	12 16       	cp	r1, r18
     f02:	13 06       	cpc	r1, r19
     f04:	14 06       	cpc	r1, r20
     f06:	05 06       	cpc	r0, r21
     f08:	08 95       	ret

00000f0a <__fp_round>:
     f0a:	09 2e       	mov	r0, r25
     f0c:	03 94       	inc	r0
     f0e:	00 0c       	add	r0, r0
     f10:	11 f4       	brne	.+4      	; 0xf16 <__fp_round+0xc>
     f12:	88 23       	and	r24, r24
     f14:	52 f0       	brmi	.+20     	; 0xf2a <__fp_round+0x20>
     f16:	bb 0f       	add	r27, r27
     f18:	40 f4       	brcc	.+16     	; 0xf2a <__fp_round+0x20>
     f1a:	bf 2b       	or	r27, r31
     f1c:	11 f4       	brne	.+4      	; 0xf22 <__fp_round+0x18>
     f1e:	60 ff       	sbrs	r22, 0
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <__fp_round+0x20>
     f22:	6f 5f       	subi	r22, 0xFF	; 255
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	8f 4f       	sbci	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	08 95       	ret

00000f2c <__fp_split3>:
     f2c:	57 fd       	sbrc	r21, 7
     f2e:	90 58       	subi	r25, 0x80	; 128
     f30:	44 0f       	add	r20, r20
     f32:	55 1f       	adc	r21, r21
     f34:	59 f0       	breq	.+22     	; 0xf4c <__fp_splitA+0x10>
     f36:	5f 3f       	cpi	r21, 0xFF	; 255
     f38:	71 f0       	breq	.+28     	; 0xf56 <__fp_splitA+0x1a>
     f3a:	47 95       	ror	r20

00000f3c <__fp_splitA>:
     f3c:	88 0f       	add	r24, r24
     f3e:	97 fb       	bst	r25, 7
     f40:	99 1f       	adc	r25, r25
     f42:	61 f0       	breq	.+24     	; 0xf5c <__fp_splitA+0x20>
     f44:	9f 3f       	cpi	r25, 0xFF	; 255
     f46:	79 f0       	breq	.+30     	; 0xf66 <__fp_splitA+0x2a>
     f48:	87 95       	ror	r24
     f4a:	08 95       	ret
     f4c:	12 16       	cp	r1, r18
     f4e:	13 06       	cpc	r1, r19
     f50:	14 06       	cpc	r1, r20
     f52:	55 1f       	adc	r21, r21
     f54:	f2 cf       	rjmp	.-28     	; 0xf3a <__fp_split3+0xe>
     f56:	46 95       	lsr	r20
     f58:	f1 df       	rcall	.-30     	; 0xf3c <__fp_splitA>
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <__fp_splitA+0x30>
     f5c:	16 16       	cp	r1, r22
     f5e:	17 06       	cpc	r1, r23
     f60:	18 06       	cpc	r1, r24
     f62:	99 1f       	adc	r25, r25
     f64:	f1 cf       	rjmp	.-30     	; 0xf48 <__fp_splitA+0xc>
     f66:	86 95       	lsr	r24
     f68:	71 05       	cpc	r23, r1
     f6a:	61 05       	cpc	r22, r1
     f6c:	08 94       	sec
     f6e:	08 95       	ret

00000f70 <__fp_zero>:
     f70:	e8 94       	clt

00000f72 <__fp_szero>:
     f72:	bb 27       	eor	r27, r27
     f74:	66 27       	eor	r22, r22
     f76:	77 27       	eor	r23, r23
     f78:	cb 01       	movw	r24, r22
     f7a:	97 f9       	bld	r25, 7
     f7c:	08 95       	ret

00000f7e <__gesf2>:
     f7e:	8a df       	rcall	.-236    	; 0xe94 <__fp_cmp>
     f80:	08 f4       	brcc	.+2      	; 0xf84 <__gesf2+0x6>
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	08 95       	ret

00000f86 <__mulsf3>:
     f86:	0b d0       	rcall	.+22     	; 0xf9e <__mulsf3x>
     f88:	c0 cf       	rjmp	.-128    	; 0xf0a <__fp_round>
     f8a:	b1 df       	rcall	.-158    	; 0xeee <__fp_pscA>
     f8c:	28 f0       	brcs	.+10     	; 0xf98 <__mulsf3+0x12>
     f8e:	b6 df       	rcall	.-148    	; 0xefc <__fp_pscB>
     f90:	18 f0       	brcs	.+6      	; 0xf98 <__mulsf3+0x12>
     f92:	95 23       	and	r25, r21
     f94:	09 f0       	breq	.+2      	; 0xf98 <__mulsf3+0x12>
     f96:	a2 cf       	rjmp	.-188    	; 0xedc <__fp_inf>
     f98:	a7 cf       	rjmp	.-178    	; 0xee8 <__fp_nan>
     f9a:	11 24       	eor	r1, r1
     f9c:	ea cf       	rjmp	.-44     	; 0xf72 <__fp_szero>

00000f9e <__mulsf3x>:
     f9e:	c6 df       	rcall	.-116    	; 0xf2c <__fp_split3>
     fa0:	a0 f3       	brcs	.-24     	; 0xf8a <__mulsf3+0x4>

00000fa2 <__mulsf3_pse>:
     fa2:	95 9f       	mul	r25, r21
     fa4:	d1 f3       	breq	.-12     	; 0xf9a <__mulsf3+0x14>
     fa6:	95 0f       	add	r25, r21
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	55 1f       	adc	r21, r21
     fac:	62 9f       	mul	r22, r18
     fae:	f0 01       	movw	r30, r0
     fb0:	72 9f       	mul	r23, r18
     fb2:	bb 27       	eor	r27, r27
     fb4:	f0 0d       	add	r31, r0
     fb6:	b1 1d       	adc	r27, r1
     fb8:	63 9f       	mul	r22, r19
     fba:	aa 27       	eor	r26, r26
     fbc:	f0 0d       	add	r31, r0
     fbe:	b1 1d       	adc	r27, r1
     fc0:	aa 1f       	adc	r26, r26
     fc2:	64 9f       	mul	r22, r20
     fc4:	66 27       	eor	r22, r22
     fc6:	b0 0d       	add	r27, r0
     fc8:	a1 1d       	adc	r26, r1
     fca:	66 1f       	adc	r22, r22
     fcc:	82 9f       	mul	r24, r18
     fce:	22 27       	eor	r18, r18
     fd0:	b0 0d       	add	r27, r0
     fd2:	a1 1d       	adc	r26, r1
     fd4:	62 1f       	adc	r22, r18
     fd6:	73 9f       	mul	r23, r19
     fd8:	b0 0d       	add	r27, r0
     fda:	a1 1d       	adc	r26, r1
     fdc:	62 1f       	adc	r22, r18
     fde:	83 9f       	mul	r24, r19
     fe0:	a0 0d       	add	r26, r0
     fe2:	61 1d       	adc	r22, r1
     fe4:	22 1f       	adc	r18, r18
     fe6:	74 9f       	mul	r23, r20
     fe8:	33 27       	eor	r19, r19
     fea:	a0 0d       	add	r26, r0
     fec:	61 1d       	adc	r22, r1
     fee:	23 1f       	adc	r18, r19
     ff0:	84 9f       	mul	r24, r20
     ff2:	60 0d       	add	r22, r0
     ff4:	21 1d       	adc	r18, r1
     ff6:	82 2f       	mov	r24, r18
     ff8:	76 2f       	mov	r23, r22
     ffa:	6a 2f       	mov	r22, r26
     ffc:	11 24       	eor	r1, r1
     ffe:	9f 57       	subi	r25, 0x7F	; 127
    1000:	50 40       	sbci	r21, 0x00	; 0
    1002:	8a f0       	brmi	.+34     	; 0x1026 <__mulsf3_pse+0x84>
    1004:	e1 f0       	breq	.+56     	; 0x103e <__mulsf3_pse+0x9c>
    1006:	88 23       	and	r24, r24
    1008:	4a f0       	brmi	.+18     	; 0x101c <__mulsf3_pse+0x7a>
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	bb 1f       	adc	r27, r27
    1010:	66 1f       	adc	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	88 1f       	adc	r24, r24
    1016:	91 50       	subi	r25, 0x01	; 1
    1018:	50 40       	sbci	r21, 0x00	; 0
    101a:	a9 f7       	brne	.-22     	; 0x1006 <__mulsf3_pse+0x64>
    101c:	9e 3f       	cpi	r25, 0xFE	; 254
    101e:	51 05       	cpc	r21, r1
    1020:	70 f0       	brcs	.+28     	; 0x103e <__mulsf3_pse+0x9c>
    1022:	5c cf       	rjmp	.-328    	; 0xedc <__fp_inf>
    1024:	a6 cf       	rjmp	.-180    	; 0xf72 <__fp_szero>
    1026:	5f 3f       	cpi	r21, 0xFF	; 255
    1028:	ec f3       	brlt	.-6      	; 0x1024 <__mulsf3_pse+0x82>
    102a:	98 3e       	cpi	r25, 0xE8	; 232
    102c:	dc f3       	brlt	.-10     	; 0x1024 <__mulsf3_pse+0x82>
    102e:	86 95       	lsr	r24
    1030:	77 95       	ror	r23
    1032:	67 95       	ror	r22
    1034:	b7 95       	ror	r27
    1036:	f7 95       	ror	r31
    1038:	e7 95       	ror	r30
    103a:	9f 5f       	subi	r25, 0xFF	; 255
    103c:	c1 f7       	brne	.-16     	; 0x102e <__mulsf3_pse+0x8c>
    103e:	fe 2b       	or	r31, r30
    1040:	88 0f       	add	r24, r24
    1042:	91 1d       	adc	r25, r1
    1044:	96 95       	lsr	r25
    1046:	87 95       	ror	r24
    1048:	97 f9       	bld	r25, 7
    104a:	08 95       	ret

0000104c <__divmodhi4>:
    104c:	97 fb       	bst	r25, 7
    104e:	09 2e       	mov	r0, r25
    1050:	07 26       	eor	r0, r23
    1052:	0a d0       	rcall	.+20     	; 0x1068 <__divmodhi4_neg1>
    1054:	77 fd       	sbrc	r23, 7
    1056:	04 d0       	rcall	.+8      	; 0x1060 <__divmodhi4_neg2>
    1058:	0c d0       	rcall	.+24     	; 0x1072 <__udivmodhi4>
    105a:	06 d0       	rcall	.+12     	; 0x1068 <__divmodhi4_neg1>
    105c:	00 20       	and	r0, r0
    105e:	1a f4       	brpl	.+6      	; 0x1066 <__divmodhi4_exit>

00001060 <__divmodhi4_neg2>:
    1060:	70 95       	com	r23
    1062:	61 95       	neg	r22
    1064:	7f 4f       	sbci	r23, 0xFF	; 255

00001066 <__divmodhi4_exit>:
    1066:	08 95       	ret

00001068 <__divmodhi4_neg1>:
    1068:	f6 f7       	brtc	.-4      	; 0x1066 <__divmodhi4_exit>
    106a:	90 95       	com	r25
    106c:	81 95       	neg	r24
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	08 95       	ret

00001072 <__udivmodhi4>:
    1072:	aa 1b       	sub	r26, r26
    1074:	bb 1b       	sub	r27, r27
    1076:	51 e1       	ldi	r21, 0x11	; 17
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <__udivmodhi4_ep>

0000107a <__udivmodhi4_loop>:
    107a:	aa 1f       	adc	r26, r26
    107c:	bb 1f       	adc	r27, r27
    107e:	a6 17       	cp	r26, r22
    1080:	b7 07       	cpc	r27, r23
    1082:	10 f0       	brcs	.+4      	; 0x1088 <__udivmodhi4_ep>
    1084:	a6 1b       	sub	r26, r22
    1086:	b7 0b       	sbc	r27, r23

00001088 <__udivmodhi4_ep>:
    1088:	88 1f       	adc	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	5a 95       	dec	r21
    108e:	a9 f7       	brne	.-22     	; 0x107a <__udivmodhi4_loop>
    1090:	80 95       	com	r24
    1092:	90 95       	com	r25
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	08 95       	ret

0000109a <__eerd_byte_m16>:
    109a:	e1 99       	sbic	0x1c, 1	; 28
    109c:	fe cf       	rjmp	.-4      	; 0x109a <__eerd_byte_m16>
    109e:	9f bb       	out	0x1f, r25	; 31
    10a0:	8e bb       	out	0x1e, r24	; 30
    10a2:	e0 9a       	sbi	0x1c, 0	; 28
    10a4:	99 27       	eor	r25, r25
    10a6:	8d b3       	in	r24, 0x1d	; 29
    10a8:	08 95       	ret

000010aa <__eewr_byte_m16>:
    10aa:	26 2f       	mov	r18, r22

000010ac <__eewr_r18_m16>:
    10ac:	e1 99       	sbic	0x1c, 1	; 28
    10ae:	fe cf       	rjmp	.-4      	; 0x10ac <__eewr_r18_m16>
    10b0:	9f bb       	out	0x1f, r25	; 31
    10b2:	8e bb       	out	0x1e, r24	; 30
    10b4:	2d bb       	out	0x1d, r18	; 29
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	e2 9a       	sbi	0x1c, 2	; 28
    10bc:	e1 9a       	sbi	0x1c, 1	; 28
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	08 95       	ret

000010c4 <_exit>:
    10c4:	f8 94       	cli

000010c6 <__stop_program>:
    10c6:	ff cf       	rjmp	.-2      	; 0x10c6 <__stop_program>
