
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000178c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000178c  00001820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  008000b4  008000b4  00001874  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000510  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000193e  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003dd  00000000  00000000  000036e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000184c  00000000  00000000  00003abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  0000530c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ec  00000000  00000000  000056bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000802  00000000  00000000  00005ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000318  00000000  00000000  000063aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 08 	call	0x1124	; 0x1124 <main>
      8a:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 21 0b 	call	0x1642	; 0x1642 <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     18e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 21 0b 	call	0x1642	; 0x1642 <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 21 0b 	call	0x1642	; 0x1642 <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     286:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 b4 00 	sts	0x00B4, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	82 33       	cpi	r24, 0x32	; 50
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 b4 00 	lds	r24, 0x00B4
     300:	82 2b       	or	r24, r18
     302:	80 93 b4 00 	sts	0x00B4, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 }
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <check_turn_sensors>:

//CHECK THE TURN SENSOR VALUES
void check_turn_sensors(void)
{
     318:	97 e0       	ldi	r25, 0x07	; 7
     31a:	80 e0       	ldi	r24, 0x00	; 0
	 for(j=7;j>3;j--)
	 {
	 
	  //temp[j-4]=adc_start(j);
	  //if(temp[j-4]<threshold)
	  if(j==7)
     31c:	97 30       	cpi	r25, 0x07	; 7
     31e:	21 f4       	brne	.+8      	; 0x328 <check_turn_sensors+0x10>
	  {
	  if(bit_is_clear(PINA,7))//(temp[j-4]<100)
     320:	cf 99       	sbic	0x19, 7	; 25
     322:	10 c0       	rjmp	.+32     	; 0x344 <check_turn_sensors+0x2c>
	  {sensorbyte_T|=(1<<0);}
     324:	81 60       	ori	r24, 0x01	; 1
     326:	0e c0       	rjmp	.+28     	; 0x344 <check_turn_sensors+0x2c>
	  }
	  else if(j==6)
     328:	96 30       	cpi	r25, 0x06	; 6
     32a:	21 f4       	brne	.+8      	; 0x334 <check_turn_sensors+0x1c>
	  {
	  if(bit_is_clear(PINA,6))//(temp[j-4]<160)
     32c:	ce 99       	sbic	0x19, 6	; 25
     32e:	0a c0       	rjmp	.+20     	; 0x344 <check_turn_sensors+0x2c>
	  {sensorbyte_T|=(1<<1);}
     330:	82 60       	ori	r24, 0x02	; 2
     332:	08 c0       	rjmp	.+16     	; 0x344 <check_turn_sensors+0x2c>
	  }
	  else if(j==5)
     334:	95 30       	cpi	r25, 0x05	; 5
     336:	21 f4       	brne	.+8      	; 0x340 <check_turn_sensors+0x28>
	  {
	  if(bit_is_clear(PINA,5))//(temp[j-4]<160)
     338:	cd 99       	sbic	0x19, 5	; 25
     33a:	04 c0       	rjmp	.+8      	; 0x344 <check_turn_sensors+0x2c>
	  {sensorbyte_T|=(1<<2);}
     33c:	84 60       	ori	r24, 0x04	; 4
     33e:	02 c0       	rjmp	.+4      	; 0x344 <check_turn_sensors+0x2c>
	  }
	  else
	  {
	  if(bit_is_clear(PINA,4))//(temp[j-4]<100)
     340:	cc 9b       	sbis	0x19, 4	; 25
	  {sensorbyte_T|=(1<<3);}
     342:	88 60       	ori	r24, 0x08	; 8
{
sensorbyte_T=0;

unsigned char j;//temp[4];

	 for(j=7;j>3;j--)
     344:	91 50       	subi	r25, 0x01	; 1
     346:	93 30       	cpi	r25, 0x03	; 3
     348:	49 f7       	brne	.-46     	; 0x31c <check_turn_sensors+0x4>
     34a:	80 93 b5 00 	sts	0x00B5, r24
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     34e:	08 95       	ret

00000350 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     356:	80 93 e4 00 	sts	0x00E4, r24
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     360:	80 93 e5 00 	sts	0x00E5, r24
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     36a:	80 93 e6 00 	sts	0x00E6, r24
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     374:	80 93 e7 00 	sts	0x00E7, r24
	}

		
}
     378:	08 95       	ret

0000037a <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     380:	80 93 ec 00 	sts	0x00EC, r24
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     38a:	80 93 ed 00 	sts	0x00ED, r24
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     394:	80 93 ee 00 	sts	0x00EE, r24
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     39e:	80 93 ef 00 	sts	0x00EF, r24
 	}

		
}
     3a2:	08 95       	ret

000003a4 <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	c0 e0       	ldi	r28, 0x00	; 0
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     3ae:	1f ef       	ldi	r17, 0xFF	; 255
     3b0:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     3b2:	84 e6       	ldi	r24, 0x64	; 100
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     3ba:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     3bc:	84 e6       	ldi	r24, 0x64	; 100
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     3c4:	21 96       	adiw	r28, 0x01	; 1
     3c6:	c5 30       	cpi	r28, 0x05	; 5
     3c8:	d1 05       	cpc	r29, r1
     3ca:	91 f7       	brne	.-28     	; 0x3b0 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	08 95       	ret

000003d4 <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     3d4:	9b bd       	out	0x2b, r25	; 43
     3d6:	8a bd       	out	0x2a, r24	; 42
}
     3d8:	08 95       	ret

000003da <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3da:	99 bd       	out	0x29, r25	; 41
     3dc:	88 bd       	out	0x28, r24	; 40
}
     3de:	08 95       	ret

000003e0 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3e0:	87 b3       	in	r24, 0x17	; 23
     3e2:	80 7f       	andi	r24, 0xF0	; 240
     3e4:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3e6:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3e8:	c5 98       	cbi	0x18, 5	; 24
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	8a 95       	dec	r24
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3f0:	22 e0       	ldi	r18, 0x02	; 2
     3f2:	35 e0       	ldi	r19, 0x05	; 5
     3f4:	c7 9a       	sbi	0x18, 7	; 24
     3f6:	82 2f       	mov	r24, r18
     3f8:	8a 95       	dec	r24
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3fc:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3fe:	82 95       	swap	r24
     400:	80 7f       	andi	r24, 0xF0	; 240
     402:	92 2f       	mov	r25, r18
     404:	9a 95       	dec	r25
     406:	f1 f7       	brne	.-4      	; 0x404 <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     408:	c7 98       	cbi	0x18, 7	; 24
     40a:	93 2f       	mov	r25, r19
     40c:	9a 95       	dec	r25
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
     412:	92 2f       	mov	r25, r18
     414:	9a 95       	dec	r25
     416:	f1 f7       	brne	.-4      	; 0x414 <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     418:	96 b3       	in	r25, 0x16	; 22
     41a:	92 2f       	mov	r25, r18
     41c:	9a 95       	dec	r25
     41e:	f1 f7       	brne	.-4      	; 0x41c <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     420:	c7 98       	cbi	0x18, 7	; 24
     422:	93 2f       	mov	r25, r19
     424:	9a 95       	dec	r25
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     428:	87 fd       	sbrc	r24, 7
     42a:	e4 cf       	rjmp	.-56     	; 0x3f4 <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     42c:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     42e:	87 b3       	in	r24, 0x17	; 23
     430:	8f 60       	ori	r24, 0x0F	; 15
     432:	87 bb       	out	0x17, r24	; 23

}
     434:	08 95       	ret

00000436 <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     436:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     438:	66 23       	and	r22, r22
     43a:	11 f4       	brne	.+4      	; 0x440 <lcd_byte+0xa>
	CLEAR_RS();
     43c:	c5 98       	cbi	0x18, 5	; 24
     43e:	01 c0       	rjmp	.+2      	; 0x442 <lcd_byte+0xc>
else
	SET_RS();
     440:	c5 9a       	sbi	0x18, 5	; 24
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	8a 95       	dec	r24
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     448:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     44a:	88 b3       	in	r24, 0x18	; 24
     44c:	92 2f       	mov	r25, r18
     44e:	92 95       	swap	r25
     450:	9f 70       	andi	r25, 0x0F	; 15
     452:	80 7f       	andi	r24, 0xF0	; 240
     454:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     456:	98 bb       	out	0x18, r25	; 24
     458:	95 e0       	ldi	r25, 0x05	; 5
     45a:	89 2f       	mov	r24, r25
     45c:	8a 95       	dec	r24
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     460:	c7 98       	cbi	0x18, 7	; 24
     462:	89 2f       	mov	r24, r25
     464:	8a 95       	dec	r24
     466:	f1 f7       	brne	.-4      	; 0x464 <__stack+0x5>
_delay_us(1);
SET_E();
     468:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     46a:	88 b3       	in	r24, 0x18	; 24
     46c:	2f 70       	andi	r18, 0x0F	; 15
     46e:	80 7f       	andi	r24, 0xF0	; 240
     470:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     472:	88 bb       	out	0x18, r24	; 24
     474:	89 2f       	mov	r24, r25
     476:	8a 95       	dec	r24
     478:	f1 f7       	brne	.-4      	; 0x476 <__stack+0x17>
_delay_us(1);			//tEH
CLEAR_E();
     47a:	c7 98       	cbi	0x18, 7	; 24
     47c:	9a 95       	dec	r25
     47e:	f1 f7       	brne	.-4      	; 0x47c <__stack+0x1d>
_delay_us(1);			//tEL
lcd_busy_loop();
     480:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_busy_loop>
}
     484:	08 95       	ret

00000486 <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     486:	1f 93       	push	r17
     488:	18 2f       	mov	r17, r24
     48a:	8c e2       	ldi	r24, 0x2C	; 44
     48c:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     48e:	20 e9       	ldi	r18, 0x90	; 144
     490:	31 e0       	ldi	r19, 0x01	; 1
     492:	f9 01       	movw	r30, r18
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     498:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     49a:	d9 f7       	brne	.-10     	; 0x492 <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     49c:	87 b3       	in	r24, 0x17	; 23
     49e:	8f 60       	ori	r24, 0x0F	; 15
     4a0:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     4a2:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     4a4:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     4a6:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     4a8:	88 b3       	in	r24, 0x18	; 24
     4aa:	80 7f       	andi	r24, 0xF0	; 240
     4ac:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     4ae:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     4b0:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     4b2:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	8a 95       	dec	r24
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
     4ba:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     4bc:	c1 9a       	sbi	0x18, 1	; 24
     4be:	85 e0       	ldi	r24, 0x05	; 5
     4c0:	98 2f       	mov	r25, r24
     4c2:	9a 95       	dec	r25
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
     4c6:	c7 98       	cbi	0x18, 7	; 24
     4c8:	8a 95       	dec	r24
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     4cc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     4d0:	81 2f       	mov	r24, r17
     4d2:	8c 60       	ori	r24, 0x0C	; 12
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4da:	88 e2       	ldi	r24, 0x28	; 40
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
}
     4e2:	1f 91       	pop	r17
     4e4:	08 95       	ret

000004e6 <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	ec 01       	movw	r28, r24
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
	msg++;
     4f4:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4f6:	88 81       	ld	r24, Y
     4f8:	88 23       	and	r24, r24
     4fa:	c9 f7       	brne	.-14     	; 0x4ee <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	df 93       	push	r29
     50c:	cf 93       	push	r28
     50e:	00 d0       	rcall	.+0      	; 0x510 <lcd_write_int+0xe>
     510:	00 d0       	rcall	.+0      	; 0x512 <lcd_write_int+0x10>
     512:	0f 92       	push	r0
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	9c 01       	movw	r18, r24
     51a:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     51c:	fe 01       	movw	r30, r28
     51e:	31 96       	adiw	r30, 0x01	; 1
     520:	85 e0       	ldi	r24, 0x05	; 5
     522:	df 01       	movw	r26, r30
     524:	1d 92       	st	X+, r1
     526:	8a 95       	dec	r24
     528:	e9 f7       	brne	.-6      	; 0x524 <lcd_write_int+0x22>
     52a:	fe 01       	movw	r30, r28
     52c:	35 96       	adiw	r30, 0x05	; 5
     52e:	0d c0       	rjmp	.+26     	; 0x54a <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     530:	c9 01       	movw	r24, r18
     532:	6a e0       	ldi	r22, 0x0A	; 10
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodhi4>
     53a:	80 83       	st	Z, r24
	val=val/10;
     53c:	c9 01       	movw	r24, r18
     53e:	6a e0       	ldi	r22, 0x0A	; 10
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodhi4>
     546:	9b 01       	movw	r18, r22
     548:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     54a:	21 15       	cp	r18, r1
     54c:	31 05       	cpc	r19, r1
     54e:	81 f7       	brne	.-32     	; 0x530 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     550:	bf ef       	ldi	r27, 0xFF	; 255
     552:	0f 3f       	cpi	r16, 0xFF	; 255
     554:	1b 07       	cpc	r17, r27
     556:	79 f4       	brne	.+30     	; 0x576 <lcd_write_int+0x74>
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     55c:	ae 01       	movw	r20, r28
     55e:	4f 5f       	subi	r20, 0xFF	; 255
     560:	5f 4f       	sbci	r21, 0xFF	; 255
     562:	02 c0       	rjmp	.+4      	; 0x568 <lcd_write_int+0x66>
     564:	2f 5f       	subi	r18, 0xFF	; 255
     566:	3f 4f       	sbci	r19, 0xFF	; 255
     568:	fa 01       	movw	r30, r20
     56a:	e2 0f       	add	r30, r18
     56c:	f3 1f       	adc	r31, r19
     56e:	80 81       	ld	r24, Z
     570:	88 23       	and	r24, r24
     572:	c1 f3       	breq	.-16     	; 0x564 <lcd_write_int+0x62>
     574:	04 c0       	rjmp	.+8      	; 0x57e <lcd_write_int+0x7c>
	else
		j=5-field_length;
     576:	25 e0       	ldi	r18, 0x05	; 5
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	20 1b       	sub	r18, r16
     57c:	31 0b       	sbc	r19, r17
     57e:	7e 01       	movw	r14, r28
     580:	08 94       	sec
     582:	e1 1c       	adc	r14, r1
     584:	f1 1c       	adc	r15, r1
     586:	e2 0e       	add	r14, r18
     588:	f3 1e       	adc	r15, r19
     58a:	89 01       	movw	r16, r18
     58c:	09 c0       	rjmp	.+18     	; 0x5a0 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     58e:	f7 01       	movw	r30, r14
     590:	81 91       	ld	r24, Z+
     592:	7f 01       	movw	r14, r30
     594:	80 5d       	subi	r24, 0xD0	; 208
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	05 30       	cpi	r16, 0x05	; 5
     5a2:	11 05       	cpc	r17, r1
     5a4:	a4 f3       	brlt	.-24     	; 0x58e <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	08 95       	ret

000005be <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     5be:	88 32       	cpi	r24, 0x28	; 40
     5c0:	30 f4       	brcc	.+12     	; 0x5ce <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     5c2:	61 11       	cpse	r22, r1
     5c4:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     5c6:	80 68       	ori	r24, 0x80	; 128
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
     5ce:	08 95       	ret

000005d0 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     5d6:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_goto_xy>
 lcd_write_string(msg);
     5da:	c8 01       	movw	r24, r16
     5dc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <lcd_write_string>
}
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	8a 01       	movw	r16, r20
     5f0:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5f2:	0e 94 df 02 	call	0x5be	; 0x5be <lcd_goto_xy>
 lcd_write_int(val,fl);
     5f6:	c8 01       	movw	r24, r16
     5f8:	b7 01       	movw	r22, r14
     5fa:	0e 94 81 02 	call	0x502	; 0x502 <lcd_write_int>
}
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	08 95       	ret

00000608 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     608:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     60a:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     60c:	87 e0       	ldi	r24, 0x07	; 7
     60e:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     610:	87 e6       	ldi	r24, 0x67	; 103
     612:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     614:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     616:	88 e9       	ldi	r24, 0x98	; 152
     618:	8a b9       	out	0x0a, r24	; 10
}
     61a:	08 95       	ret

0000061c <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     61c:	5d 9b       	sbis	0x0b, 5	; 11
     61e:	fe cf       	rjmp	.-4      	; 0x61c <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     620:	8c b9       	out	0x0c, r24	; 12
}
     622:	08 95       	ret

00000624 <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     624:	fc 01       	movw	r30, r24
     626:	04 c0       	rjmp	.+8      	; 0x630 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     628:	5d 9b       	sbis	0x0b, 5	; 11
     62a:	fe cf       	rjmp	.-4      	; 0x628 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     62c:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     62e:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     630:	80 81       	ld	r24, Z
     632:	88 23       	and	r24, r24
     634:	c9 f7       	brne	.-14     	; 0x628 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     636:	08 95       	ret

00000638 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     638:	5d 9b       	sbis	0x0b, 5	; 11
     63a:	fe cf       	rjmp	.-4      	; 0x638 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     63c:	8a e0       	ldi	r24, 0x0A	; 10
     63e:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     640:	5d 9b       	sbis	0x0b, 5	; 11
     642:	fe cf       	rjmp	.-4      	; 0x640 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     644:	8d e0       	ldi	r24, 0x0D	; 13
     646:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     648:	08 95       	ret

0000064a <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     64a:	5f 9b       	sbis	0x0b, 7	; 11
     64c:	fe cf       	rjmp	.-4      	; 0x64a <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     64e:	8c b1       	in	r24, 0x0c	; 12
}
     650:	08 95       	ret

00000652 <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	84 bb       	out	0x14, r24	; 20
}
     656:	08 95       	ret

00000658 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     658:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     65c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     65e:	af 98       	cbi	0x15, 7	; 21
}
     660:	08 95       	ret

00000662 <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     662:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     664:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     666:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     668:	af 98       	cbi	0x15, 7	; 21
}
     66a:	08 95       	ret

0000066c <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     66c:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     66e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     670:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     672:	af 98       	cbi	0x15, 7	; 21
}
     674:	08 95       	ret

00000676 <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     676:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     678:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     67a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     67c:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     67e:	08 95       	ret

00000680 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     680:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     682:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     684:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     686:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     688:	08 95       	ret

0000068a <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     68a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     68c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     68e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     690:	af 9a       	sbi	0x15, 7	; 21
}
     692:	08 95       	ret

00000694 <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     694:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     696:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     698:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     69a:	af 98       	cbi	0x15, 7	; 21
}
     69c:	08 95       	ret

0000069e <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     69e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     6a0:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     6a2:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     6a4:	af 9a       	sbi	0x15, 7	; 21
}
     6a6:	08 95       	ret

000006a8 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     6a8:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     6aa:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     6ac:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     6ae:	af 98       	cbi	0x15, 7	; 21
}
     6b0:	08 95       	ret

000006b2 <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     6b2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     6b4:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     6b6:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     6b8:	af 9a       	sbi	0x15, 7	; 21
}
     6ba:	08 95       	ret

000006bc <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     6bc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     6be:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     6c0:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     6c2:	af 98       	cbi	0x15, 7	; 21
}
     6c4:	08 95       	ret

000006c6 <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     6c6:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     6c8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     6ca:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     6cc:	af 9a       	sbi	0x15, 7	; 21
}
     6ce:	08 95       	ret

000006d0 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     6d0:	82 b3       	in	r24, 0x12	; 18
     6d2:	8f 60       	ori	r24, 0x0F	; 15
     6d4:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     6d6:	81 b3       	in	r24, 0x11	; 17
     6d8:	80 7f       	andi	r24, 0xF0	; 240
     6da:	81 bb       	out	0x11, r24	; 17
}
     6dc:	08 95       	ret

000006de <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6de:	20 b3       	in	r18, 0x10	; 16
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	20 95       	com	r18
     6e4:	30 95       	com	r19
     6e6:	21 70       	andi	r18, 0x01	; 1
     6e8:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6ea:	c9 01       	movw	r24, r18
     6ec:	08 95       	ret

000006ee <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6ee:	20 b3       	in	r18, 0x10	; 16
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	36 95       	lsr	r19
     6f4:	27 95       	ror	r18
     6f6:	20 95       	com	r18
     6f8:	30 95       	com	r19
     6fa:	21 70       	andi	r18, 0x01	; 1
     6fc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6fe:	c9 01       	movw	r24, r18
     700:	08 95       	ret

00000702 <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     702:	20 b3       	in	r18, 0x10	; 16
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	36 95       	lsr	r19
     708:	27 95       	ror	r18
     70a:	36 95       	lsr	r19
     70c:	27 95       	ror	r18
     70e:	20 95       	com	r18
     710:	30 95       	com	r19
     712:	21 70       	andi	r18, 0x01	; 1
     714:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     716:	c9 01       	movw	r24, r18
     718:	08 95       	ret

0000071a <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     71a:	20 b3       	in	r18, 0x10	; 16
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	43 e0       	ldi	r20, 0x03	; 3
     720:	36 95       	lsr	r19
     722:	27 95       	ror	r18
     724:	4a 95       	dec	r20
     726:	e1 f7       	brne	.-8      	; 0x720 <pressed_switch3+0x6>
     728:	20 95       	com	r18
     72a:	30 95       	com	r19
     72c:	21 70       	andi	r18, 0x01	; 1
     72e:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     730:	c9 01       	movw	r24, r18
     732:	08 95       	ret

00000734 <pass_turns>:
	prempos=mpos;
	delay_microsec(10);
}

void pass_turns()
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
	if(LSR==1)
     738:	80 91 dc 00 	lds	r24, 0x00DC
     73c:	90 91 dd 00 	lds	r25, 0x00DD
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	19 f5       	brne	.+70     	; 0x78a <pass_turns+0x56>
	{//LSR
	if(Left==1)
     744:	c0 91 d0 00 	lds	r28, 0x00D0
     748:	d0 91 d1 00 	lds	r29, 0x00D1
     74c:	c1 30       	cpi	r28, 0x01	; 1
     74e:	d1 05       	cpc	r29, r1
     750:	39 f4       	brne	.+14     	; 0x760 <pass_turns+0x2c>
	{lcd_clear();lcd_write_string_xy(1,1,"LEFT");left=1;}
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	6e c0       	rjmp	.+220    	; 0x83c <pass_turns+0x108>
	else if(Forward==1)
     760:	80 91 d4 00 	lds	r24, 0x00D4
     764:	90 91 d5 00 	lds	r25, 0x00D5
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	81 f1       	breq	.+96     	; 0x7cc <pass_turns+0x98>
	{lcd_clear();lcd_write_string_xy(6,1,"FOR");opt=270;}
	else if(Right==1)
     76c:	c0 91 d2 00 	lds	r28, 0x00D2
     770:	d0 91 d3 00 	lds	r29, 0x00D3
     774:	c1 30       	cpi	r28, 0x01	; 1
     776:	d1 05       	cpc	r29, r1
     778:	09 f0       	breq	.+2      	; 0x77c <pass_turns+0x48>
     77a:	6a c0       	rjmp	.+212    	; 0x850 <pass_turns+0x11c>
	{lcd_clear();lcd_write_string_xy(10,1,"RIGHT");right=1;}
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
     784:	8a e0       	ldi	r24, 0x0A	; 10
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	41 c0       	rjmp	.+130    	; 0x80c <pass_turns+0xd8>
	}
	
	else if(RSL==1)
     78a:	80 91 b1 00 	lds	r24, 0x00B1
     78e:	90 91 b2 00 	lds	r25, 0x00B2
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	71 f4       	brne	.+28     	; 0x7b2 <pass_turns+0x7e>
	{//RSL
	if(Right==1)
     796:	c0 91 d2 00 	lds	r28, 0x00D2
     79a:	d0 91 d3 00 	lds	r29, 0x00D3
     79e:	c1 30       	cpi	r28, 0x01	; 1
     7a0:	d1 05       	cpc	r29, r1
     7a2:	71 f1       	breq	.+92     	; 0x800 <pass_turns+0xcc>
	{lcd_clear();lcd_write_string_xy(1,1,"RIGHT");right=1;}
	else if(Forward==1)
     7a4:	80 91 d4 00 	lds	r24, 0x00D4
     7a8:	90 91 d5 00 	lds	r25, 0x00D5
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	c9 f5       	brne	.+114    	; 0x822 <pass_turns+0xee>
     7b0:	0d c0       	rjmp	.+26     	; 0x7cc <pass_turns+0x98>
	{lcd_clear();lcd_write_string_xy(6,1,"FOR");opt=270;}
	else if(Left==1)
	{lcd_clear();lcd_write_string_xy(10,1,"LEFT");left=1;}
	}
	
	else if(SRL==1)
     7b2:	80 91 de 00 	lds	r24, 0x00DE
     7b6:	90 91 df 00 	lds	r25, 0x00DF
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <pass_turns+0x8c>
     7be:	48 c0       	rjmp	.+144    	; 0x850 <pass_turns+0x11c>
	{//SRL
	if(Forward==1)
     7c0:	80 91 d4 00 	lds	r24, 0x00D4
     7c4:	90 91 d5 00 	lds	r25, 0x00D5
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	99 f4       	brne	.+38     	; 0x7f2 <pass_turns+0xbe>
	{lcd_clear();lcd_write_string_xy(6,1,"FOR");opt=270;}
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
     7d4:	86 e0       	ldi	r24, 0x06	; 6
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	45 e6       	ldi	r20, 0x65	; 101
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
     7e4:	8e e0       	ldi	r24, 0x0E	; 14
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	90 93 a8 00 	sts	0x00A8, r25
     7ec:	80 93 a7 00 	sts	0x00A7, r24
     7f0:	2f c0       	rjmp	.+94     	; 0x850 <pass_turns+0x11c>
	else if(Right==1)
     7f2:	c0 91 d2 00 	lds	r28, 0x00D2
     7f6:	d0 91 d3 00 	lds	r29, 0x00D3
     7fa:	c1 30       	cpi	r28, 0x01	; 1
     7fc:	d1 05       	cpc	r29, r1
     7fe:	89 f4       	brne	.+34     	; 0x822 <pass_turns+0xee>
	{lcd_clear();lcd_write_string_xy(1,1,"RIGHT");right=1;}
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	49 e6       	ldi	r20, 0x69	; 105
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
     818:	d0 93 cd 00 	sts	0x00CD, r29
     81c:	c0 93 cc 00 	sts	0x00CC, r28
     820:	17 c0       	rjmp	.+46     	; 0x850 <pass_turns+0x11c>
	else if(Left==1)
     822:	c0 91 d0 00 	lds	r28, 0x00D0
     826:	d0 91 d1 00 	lds	r29, 0x00D1
     82a:	c1 30       	cpi	r28, 0x01	; 1
     82c:	d1 05       	cpc	r29, r1
     82e:	81 f4       	brne	.+32     	; 0x850 <pass_turns+0x11c>
	{lcd_clear();lcd_write_string_xy(10,1,"LEFT");left=1;}
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
     838:	8a e0       	ldi	r24, 0x0A	; 10
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	40 e6       	ldi	r20, 0x60	; 96
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
     848:	d0 93 cb 00 	sts	0x00CB, r29
     84c:	c0 93 ca 00 	sts	0x00CA, r28
	}
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <mt_order>:

void mt_order()
{
	LSR=0;RSL=0;SRL=0;
     856:	10 92 dd 00 	sts	0x00DD, r1
     85a:	10 92 dc 00 	sts	0x00DC, r1
     85e:	10 92 b2 00 	sts	0x00B2, r1
     862:	10 92 b1 00 	sts	0x00B1, r1
     866:	10 92 df 00 	sts	0x00DF, r1
     86a:	10 92 de 00 	sts	0x00DE, r1
}
     86e:	08 95       	ret

00000870 <left_L>:
	}
}

void left_L()
{
	left_count++;
     870:	80 91 d8 00 	lds	r24, 0x00D8
     874:	90 91 d9 00 	lds	r25, 0x00D9
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	90 93 d9 00 	sts	0x00D9, r25
     87e:	80 93 d8 00 	sts	0x00D8, r24
	right_count=0;
     882:	10 92 db 00 	sts	0x00DB, r1
     886:	10 92 da 00 	sts	0x00DA, r1
	//if(left_count==4){mt_order();RSL=1;}
	lcd_clear();
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
	lcd_write_string_xy(2,1,"LEFT");
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	40 e6       	ldi	r20, 0x60	; 96
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     8a2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     8a4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8a6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     8a8:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8aa:	80 e9       	ldi	r24, 0x90	; 144
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	9b bd       	out	0x2b, r25	; 43
     8b0:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8b2:	99 bd       	out	0x29, r25	; 41
     8b4:	88 bd       	out	0x28, r24	; 40
	bot_brake();
	set_pwm1a(400);set_pwm1b(400);
	if(LT==1)
     8b6:	80 91 d6 00 	lds	r24, 0x00D6
     8ba:	90 91 d7 00 	lds	r25, 0x00D7
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	c1 f4       	brne	.+48     	; 0x8f2 <left_L+0x82>
     8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <left_L+0x66>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     8c4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     8c6:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     8c8:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8ca:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8cc:	9b bd       	out	0x2b, r25	; 43
     8ce:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8d0:	99 bd       	out	0x29, r25	; 41
     8d2:	88 bd       	out	0x28, r24	; 40
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <left_L+0x6a>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8d6:	85 ef       	ldi	r24, 0xF5	; 245
     8d8:	90 e0       	ldi	r25, 0x00	; 0
	{while(bit_is_clear(PINA,4))
     8da:	cc 9b       	sbis	0x19, 4	; 25
     8dc:	f3 cf       	rjmp	.-26     	; 0x8c4 <left_L+0x54>
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <left_L+0x82>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8e0:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8e2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8e4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8e6:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8e8:	9b bd       	out	0x2b, r25	; 43
     8ea:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8ec:	99 bd       	out	0x29, r25	; 41
     8ee:	88 bd       	out	0x28, r24	; 40
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <left_L+0x86>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8f2:	8e e0       	ldi	r24, 0x0E	; 14
     8f4:	91 e0       	ldi	r25, 0x01	; 1
	{
		bot_forward();
		set_pwm1a(245);
		set_pwm1b(245);
	}}
	while(bit_is_set(PIND,6))
     8f6:	86 99       	sbic	0x10, 6	; 16
     8f8:	f3 cf       	rjmp	.-26     	; 0x8e0 <left_L+0x70>
     8fa:	05 c0       	rjmp	.+10     	; 0x906 <left_L+0x96>
     8fc:	9b bd       	out	0x2b, r25	; 43
     8fe:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     900:	99 bd       	out	0x29, r25	; 41
     902:	88 bd       	out	0x28, r24	; 40
     904:	02 c0       	rjmp	.+4      	; 0x90a <left_L+0x9a>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     906:	84 e0       	ldi	r24, 0x04	; 4
     908:	91 e0       	ldi	r25, 0x01	; 1
	{
		bot_spot_left();
		set_pwm1a(270);//9
		set_pwm1b(270);//9
	}
	while(bit_is_set(PINA,5))
     90a:	cd 99       	sbic	0x19, 5	; 25
     90c:	f7 cf       	rjmp	.-18     	; 0x8fc <left_L+0x8c>
     90e:	05 c0       	rjmp	.+10     	; 0x91a <left_L+0xaa>
     910:	9b bd       	out	0x2b, r25	; 43
     912:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     914:	99 bd       	out	0x29, r25	; 41
     916:	88 bd       	out	0x28, r24	; 40
     918:	02 c0       	rjmp	.+4      	; 0x91e <left_L+0xae>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     91a:	8a ef       	ldi	r24, 0xFA	; 250
     91c:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(260);
		set_pwm1b(260);
	}
	while(bit_is_set(PINA,6))//clear
     91e:	ce 99       	sbic	0x19, 6	; 25
     920:	f7 cf       	rjmp	.-18     	; 0x910 <left_L+0xa0>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     928:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     92a:	80 e9       	ldi	r24, 0x90	; 144
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	9b bd       	out	0x2b, r25	; 43
     930:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     932:	99 bd       	out	0x29, r25	; 41
     934:	88 bd       	out	0x28, r24	; 40
     936:	8c ed       	ldi	r24, 0xDC	; 220
     938:	95 e0       	ldi	r25, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     93a:	20 e9       	ldi	r18, 0x90	; 144
     93c:	31 e0       	ldi	r19, 0x01	; 1
     93e:	f9 01       	movw	r30, r18
     940:	31 97       	sbiw	r30, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <left_L+0xd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     944:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     946:	d9 f7       	brne	.-10     	; 0x93e <left_L+0xce>
	}
	bot_brake();
	set_pwm1a(400);
	set_pwm1b(400);
	_delay_ms(150);
	lcd_clear();
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
	lcd_write_string_xy(8,1,"STOP");
     950:	88 e0       	ldi	r24, 0x08	; 8
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	4f e6       	ldi	r20, 0x6F	; 111
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
	left=0;check=0;opt=270;flag_6=0;flag_7=0,Left=0,Forward=0,Right=0;LT=0;
     960:	10 92 cb 00 	sts	0x00CB, r1
     964:	10 92 ca 00 	sts	0x00CA, r1
     968:	10 92 cf 00 	sts	0x00CF, r1
     96c:	10 92 ce 00 	sts	0x00CE, r1
     970:	8e e0       	ldi	r24, 0x0E	; 14
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	90 93 a8 00 	sts	0x00A8, r25
     978:	80 93 a7 00 	sts	0x00A7, r24
     97c:	10 92 c7 00 	sts	0x00C7, r1
     980:	10 92 c6 00 	sts	0x00C6, r1
     984:	10 92 c9 00 	sts	0x00C9, r1
     988:	10 92 c8 00 	sts	0x00C8, r1
     98c:	10 92 d1 00 	sts	0x00D1, r1
     990:	10 92 d0 00 	sts	0x00D0, r1
     994:	10 92 d5 00 	sts	0x00D5, r1
     998:	10 92 d4 00 	sts	0x00D4, r1
     99c:	10 92 d3 00 	sts	0x00D3, r1
     9a0:	10 92 d2 00 	sts	0x00D2, r1
     9a4:	10 92 d7 00 	sts	0x00D7, r1
     9a8:	10 92 d6 00 	sts	0x00D6, r1
	lcd_clear();
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
}
     9b4:	08 95       	ret

000009b6 <right_L>:

void right_L()
{
	right_count++;
     9b6:	80 91 da 00 	lds	r24, 0x00DA
     9ba:	90 91 db 00 	lds	r25, 0x00DB
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	90 93 db 00 	sts	0x00DB, r25
     9c4:	80 93 da 00 	sts	0x00DA, r24
	left_count = 0;
     9c8:	10 92 d9 00 	sts	0x00D9, r1
     9cc:	10 92 d8 00 	sts	0x00D8, r1
	//if(right_count==4){mt_order();SRL=1;}
	lcd_clear();
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
	lcd_write_string_xy(1,1,"RIGHT");
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	49 e6       	ldi	r20, 0x69	; 105
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     9e8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     9ea:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     9ec:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     9ee:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9f0:	80 e9       	ldi	r24, 0x90	; 144
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	9b bd       	out	0x2b, r25	; 43
     9f6:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     9f8:	99 bd       	out	0x29, r25	; 41
     9fa:	88 bd       	out	0x28, r24	; 40
	bot_brake();
	set_pwm1a(400);set_pwm1b(400);
	if(LT==1)
     9fc:	80 91 d6 00 	lds	r24, 0x00D6
     a00:	90 91 d7 00 	lds	r25, 0x00D7
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	c1 f4       	brne	.+48     	; 0xa38 <right_L+0x82>
     a08:	09 c0       	rjmp	.+18     	; 0xa1c <right_L+0x66>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     a0a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     a0c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     a0e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a10:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a12:	9b bd       	out	0x2b, r25	; 43
     a14:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a16:	99 bd       	out	0x29, r25	; 41
     a18:	88 bd       	out	0x28, r24	; 40
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <right_L+0x6a>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a1c:	85 ef       	ldi	r24, 0xF5	; 245
     a1e:	90 e0       	ldi	r25, 0x00	; 0
	{while(bit_is_clear(PINA,7))
     a20:	cf 9b       	sbis	0x19, 7	; 25
     a22:	f3 cf       	rjmp	.-26     	; 0xa0a <right_L+0x54>
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <right_L+0x82>
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     a26:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     a28:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     a2a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     a2c:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a2e:	3b bd       	out	0x2b, r19	; 43
     a30:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a32:	99 bd       	out	0x29, r25	; 41
     a34:	88 bd       	out	0x28, r24	; 40
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <right_L+0x8a>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a38:	2e e0       	ldi	r18, 0x0E	; 14
     a3a:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a3c:	83 e1       	ldi	r24, 0x13	; 19
     a3e:	91 e0       	ldi	r25, 0x01	; 1
	{
		bot_forward();
		set_pwm1a(245);
		set_pwm1b(245);
	}}
	while(bit_is_set(PIND,7))
     a40:	87 99       	sbic	0x10, 7	; 16
     a42:	f1 cf       	rjmp	.-30     	; 0xa26 <right_L+0x70>
     a44:	05 c0       	rjmp	.+10     	; 0xa50 <right_L+0x9a>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a46:	3b bd       	out	0x2b, r19	; 43
     a48:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a4a:	99 bd       	out	0x29, r25	; 41
     a4c:	88 bd       	out	0x28, r24	; 40
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <right_L+0xa2>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a50:	24 e0       	ldi	r18, 0x04	; 4
     a52:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a54:	8e e0       	ldi	r24, 0x0E	; 14
     a56:	91 e0       	ldi	r25, 0x01	; 1
	{
		bot_spot_right();
		set_pwm1a(270);
		set_pwm1b(275);
	}
	while(bit_is_set(PINA,6))//5
     a58:	ce 99       	sbic	0x19, 6	; 25
     a5a:	f5 cf       	rjmp	.-22     	; 0xa46 <right_L+0x90>
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <right_L+0xb2>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a5e:	3b bd       	out	0x2b, r19	; 43
     a60:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a62:	99 bd       	out	0x29, r25	; 41
     a64:	88 bd       	out	0x28, r24	; 40
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <right_L+0xba>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a68:	2f ef       	ldi	r18, 0xFF	; 255
     a6a:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a6c:	84 e0       	ldi	r24, 0x04	; 4
     a6e:	91 e0       	ldi	r25, 0x01	; 1
	{
		set_pwm1a(260);
		set_pwm1b(270);
	}
	while(bit_is_set(PINA,5))//clear6
     a70:	cd 99       	sbic	0x19, 5	; 25
     a72:	f5 cf       	rjmp	.-22     	; 0xa5e <right_L+0xa8>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     a74:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     a76:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a78:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     a7a:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a7c:	80 e9       	ldi	r24, 0x90	; 144
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	9b bd       	out	0x2b, r25	; 43
     a82:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a84:	99 bd       	out	0x29, r25	; 41
     a86:	88 bd       	out	0x28, r24	; 40
     a88:	8c ed       	ldi	r24, 0xDC	; 220
     a8a:	95 e0       	ldi	r25, 0x05	; 5
     a8c:	20 e9       	ldi	r18, 0x90	; 144
     a8e:	31 e0       	ldi	r19, 0x01	; 1
     a90:	f9 01       	movw	r30, r18
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <right_L+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	d9 f7       	brne	.-10     	; 0xa90 <right_L+0xda>
	}
	bot_brake();
	set_pwm1a(400);
	set_pwm1b(400);
	_delay_ms(150);
	lcd_write_string_xy(8,1,"STOP");
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	4f e6       	ldi	r20, 0x6F	; 111
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
	right=0;check=0;opt=270;flag_6=0;flag_7=0,Left=0,Forward=0,Right=0;LT=0;
     aaa:	10 92 cd 00 	sts	0x00CD, r1
     aae:	10 92 cc 00 	sts	0x00CC, r1
     ab2:	10 92 cf 00 	sts	0x00CF, r1
     ab6:	10 92 ce 00 	sts	0x00CE, r1
     aba:	8e e0       	ldi	r24, 0x0E	; 14
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	90 93 a8 00 	sts	0x00A8, r25
     ac2:	80 93 a7 00 	sts	0x00A7, r24
     ac6:	10 92 c7 00 	sts	0x00C7, r1
     aca:	10 92 c6 00 	sts	0x00C6, r1
     ace:	10 92 c9 00 	sts	0x00C9, r1
     ad2:	10 92 c8 00 	sts	0x00C8, r1
     ad6:	10 92 d1 00 	sts	0x00D1, r1
     ada:	10 92 d0 00 	sts	0x00D0, r1
     ade:	10 92 d5 00 	sts	0x00D5, r1
     ae2:	10 92 d4 00 	sts	0x00D4, r1
     ae6:	10 92 d3 00 	sts	0x00D3, r1
     aea:	10 92 d2 00 	sts	0x00D2, r1
     aee:	10 92 d7 00 	sts	0x00D7, r1
     af2:	10 92 d6 00 	sts	0x00D6, r1
	lcd_clear();
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
}
     afe:	08 95       	ret

00000b00 <take_turns>:
	check=0;
}

void take_turns()
{
	switch(sensorbyte_T)
     b00:	80 91 b5 00 	lds	r24, 0x00B5
     b04:	87 30       	cpi	r24, 0x07	; 7
     b06:	e9 f0       	breq	.+58     	; 0xb42 <take_turns+0x42>
     b08:	88 30       	cpi	r24, 0x08	; 8
     b0a:	38 f4       	brcc	.+14     	; 0xb1a <take_turns+0x1a>
     b0c:	83 30       	cpi	r24, 0x03	; 3
     b0e:	c9 f0       	breq	.+50     	; 0xb42 <take_turns+0x42>
     b10:	85 30       	cpi	r24, 0x05	; 5
     b12:	b9 f0       	breq	.+46     	; 0xb42 <take_turns+0x42>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	31 f5       	brne	.+76     	; 0xb64 <take_turns+0x64>
     b18:	1d c0       	rjmp	.+58     	; 0xb54 <take_turns+0x54>
     b1a:	8a 30       	cpi	r24, 0x0A	; 10
     b1c:	49 f0       	breq	.+18     	; 0xb30 <take_turns+0x30>
     b1e:	8b 30       	cpi	r24, 0x0B	; 11
     b20:	18 f4       	brcc	.+6      	; 0xb28 <take_turns+0x28>
     b22:	88 30       	cpi	r24, 0x08	; 8
     b24:	f9 f4       	brne	.+62     	; 0xb64 <take_turns+0x64>
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <take_turns+0x30>
     b28:	8c 30       	cpi	r24, 0x0C	; 12
     b2a:	11 f0       	breq	.+4      	; 0xb30 <take_turns+0x30>
     b2c:	8e 30       	cpi	r24, 0x0E	; 14
     b2e:	d1 f4       	brne	.+52     	; 0xb64 <take_turns+0x64>
	{
		case 0b1110:if(left==1){left_L();}break;
		case 0b1100:if(left==1){left_L();}break;
		case 0b1010:if(left==1){left_L();}break;
		case 0b1000:if(left==1){left_L();}break;
     b30:	80 91 ca 00 	lds	r24, 0x00CA
     b34:	90 91 cb 00 	lds	r25, 0x00CB
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	a1 f4       	brne	.+40     	; 0xb64 <take_turns+0x64>
     b3c:	0e 94 38 04 	call	0x870	; 0x870 <left_L>
     b40:	08 95       	ret
		case 0b0111:if(right==1){right_L();}break;
		case 0b0101:if(right==1){right_L();}break;
		case 0b0011:if(right==1){right_L();}break;
     b42:	80 91 cc 00 	lds	r24, 0x00CC
     b46:	90 91 cd 00 	lds	r25, 0x00CD
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	59 f4       	brne	.+22     	; 0xb64 <take_turns+0x64>
     b4e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <right_L>
     b52:	08 95       	ret
		case 0b0001:if(right==1){right_L();}break;
     b54:	80 91 cc 00 	lds	r24, 0x00CC
     b58:	90 91 cd 00 	lds	r25, 0x00CD
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	11 f4       	brne	.+4      	; 0xb64 <take_turns+0x64>
     b60:	0e 94 db 04 	call	0x9b6	; 0x9b6 <right_L>
     b64:	08 95       	ret

00000b66 <left_Plus>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b66:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b68:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b6a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b6c:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b6e:	80 e9       	ldi	r24, 0x90	; 144
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	9b bd       	out	0x2b, r25	; 43
     b74:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b76:	99 bd       	out	0x29, r25	; 41
     b78:	88 bd       	out	0x28, r24	; 40
void left_Plus()
{
bot_brake();
set_pwm1a(400);
set_pwm1b(400);
lcd_clear();
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
lcd_write_string_xy(5,0,"PLUS");
     b82:	85 e0       	ldi	r24, 0x05	; 5
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	44 e7       	ldi	r20, 0x74	; 116
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
delay_sec(1000);
     b92:	88 ee       	ldi	r24, 0xE8	; 232
     b94:	93 e0       	ldi	r25, 0x03	; 3
     b96:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
}
     b9a:	08 95       	ret

00000b9c <U_turn>:

void U_turn()
{
	lcd_clear();
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
	lcd_write_string_xy(5,0,"U - TURN");
     ba4:	85 e0       	ldi	r24, 0x05	; 5
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	49 e7       	ldi	r20, 0x79	; 121
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
 MOTOR2A=1;
 MOTOR2B=0;
}
void bot_backward(void)
{
 MOTOR1A=0;
     bb4:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     bb6:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     bb8:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     bba:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     bbc:	80 e9       	ldi	r24, 0x90	; 144
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	9b bd       	out	0x2b, r25	; 43
     bc2:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bc4:	99 bd       	out	0x29, r25	; 41
     bc6:	88 bd       	out	0x28, r24	; 40
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     bc8:	20 e4       	ldi	r18, 0x40	; 64
     bca:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bcc:	86 e3       	ldi	r24, 0x36	; 54
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <U_turn+0x46>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     bd2:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     bd4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     bd6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     bd8:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     bda:	3b bd       	out	0x2b, r19	; 43
     bdc:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bde:	99 bd       	out	0x29, r25	; 41
     be0:	88 bd       	out	0x28, r24	; 40
	bot_backward();
	set_pwm1a(400);set_pwm1b(400);
	while(bit_is_set(PIND,6))//setA4
     be2:	86 99       	sbic	0x10, 6	; 16
     be4:	f6 cf       	rjmp	.-20     	; 0xbd2 <U_turn+0x36>
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <U_turn+0x56>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     be8:	3b bd       	out	0x2b, r19	; 43
     bea:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bec:	99 bd       	out	0x29, r25	; 41
     bee:	88 bd       	out	0x28, r24	; 40
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <U_turn+0x5e>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     bf2:	2e e0       	ldi	r18, 0x0E	; 14
     bf4:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bf6:	84 e0       	ldi	r24, 0x04	; 4
     bf8:	91 e0       	ldi	r25, 0x01	; 1
		bot_spot_left();
		set_pwm1a(320);
		set_pwm1b(310);
	}
	
	while(bit_is_set(PINA,5))
     bfa:	cd 99       	sbic	0x19, 5	; 25
     bfc:	f5 cf       	rjmp	.-22     	; 0xbe8 <U_turn+0x4c>
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <U_turn+0x6e>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     c00:	3b bd       	out	0x2b, r19	; 43
     c02:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     c04:	99 bd       	out	0x29, r25	; 41
     c06:	88 bd       	out	0x28, r24	; 40
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <U_turn+0x76>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     c0a:	24 e0       	ldi	r18, 0x04	; 4
     c0c:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     c0e:	8a ef       	ldi	r24, 0xFA	; 250
     c10:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(270);
		set_pwm1b(260);
	}
	
	while(bit_is_set(PINA,6))
     c12:	ce 99       	sbic	0x19, 6	; 25
     c14:	f5 cf       	rjmp	.-22     	; 0xc00 <U_turn+0x64>
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     c16:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     c18:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     c1a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     c1c:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     c1e:	80 e9       	ldi	r24, 0x90	; 144
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	9b bd       	out	0x2b, r25	; 43
     c24:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     c26:	99 bd       	out	0x29, r25	; 41
     c28:	88 bd       	out	0x28, r24	; 40
	}
	
	bot_spot_right();
	set_pwm1a(400);
	set_pwm1b(400);
	lcd_clear();
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
}
     c32:	08 95       	ret

00000c34 <line_track>:
int Left = 0, Right = 0, Forward = 0, LT = 0;
int left_count = 0, right_count = 0;
int LSR = 0, RSL = 1, SRL = 0;

void line_track(void)
{
     c34:	8f 92       	push	r8
     c36:	9f 92       	push	r9
     c38:	af 92       	push	r10
     c3a:	bf 92       	push	r11
     c3c:	cf 92       	push	r12
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
	check_sensors();
     c48:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     c4c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     c4e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     c50:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     c52:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	switch(sensorbyte)
     c54:	80 91 b4 00 	lds	r24, 0x00B4
     c58:	86 30       	cpi	r24, 0x06	; 6
     c5a:	09 f4       	brne	.+2      	; 0xc5e <line_track+0x2a>
     c5c:	77 c0       	rjmp	.+238    	; 0xd4c <line_track+0x118>
     c5e:	87 30       	cpi	r24, 0x07	; 7
     c60:	88 f4       	brcc	.+34     	; 0xc84 <line_track+0x50>
     c62:	82 30       	cpi	r24, 0x02	; 2
     c64:	11 f1       	breq	.+68     	; 0xcaa <line_track+0x76>
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	38 f4       	brcc	.+14     	; 0xc78 <line_track+0x44>
     c6a:	88 23       	and	r24, r24
     c6c:	09 f4       	brne	.+2      	; 0xc70 <line_track+0x3c>
     c6e:	42 c0       	rjmp	.+132    	; 0xcf4 <line_track+0xc0>
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	09 f0       	breq	.+2      	; 0xc76 <line_track+0x42>
     c74:	6b c0       	rjmp	.+214    	; 0xd4c <line_track+0x118>
     c76:	3b c0       	rjmp	.+118    	; 0xcee <line_track+0xba>
     c78:	83 30       	cpi	r24, 0x03	; 3
     c7a:	09 f1       	breq	.+66     	; 0xcbe <line_track+0x8a>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	09 f0       	breq	.+2      	; 0xc82 <line_track+0x4e>
     c80:	65 c0       	rjmp	.+202    	; 0xd4c <line_track+0x118>
     c82:	10 c0       	rjmp	.+32     	; 0xca4 <line_track+0x70>
     c84:	8c 30       	cpi	r24, 0x0C	; 12
     c86:	c1 f0       	breq	.+48     	; 0xcb8 <line_track+0x84>
     c88:	8d 30       	cpi	r24, 0x0D	; 13
     c8a:	30 f4       	brcc	.+12     	; 0xc98 <line_track+0x64>
     c8c:	87 30       	cpi	r24, 0x07	; 7
     c8e:	19 f1       	breq	.+70     	; 0xcd6 <line_track+0xa2>
     c90:	88 30       	cpi	r24, 0x08	; 8
     c92:	09 f0       	breq	.+2      	; 0xc96 <line_track+0x62>
     c94:	5b c0       	rjmp	.+182    	; 0xd4c <line_track+0x118>
     c96:	28 c0       	rjmp	.+80     	; 0xce8 <line_track+0xb4>
     c98:	8e 30       	cpi	r24, 0x0E	; 14
     c9a:	a1 f0       	breq	.+40     	; 0xcc4 <line_track+0x90>
     c9c:	8f 30       	cpi	r24, 0x0F	; 15
     c9e:	09 f0       	breq	.+2      	; 0xca2 <line_track+0x6e>
     ca0:	55 c0       	rjmp	.+170    	; 0xd4c <line_track+0x118>
     ca2:	37 c0       	rjmp	.+110    	; 0xd12 <line_track+0xde>
	{
		case 0b0110:mpos = 0; break;//sensor numbering starts from right
		
		case 0b0100:mpos = 1; break;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <line_track+0x7a>
		
		case 0b0010:mpos = -1; break;
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	9f ef       	ldi	r25, 0xFF	; 255
     cae:	90 93 b7 00 	sts	0x00B7, r25
     cb2:	80 93 b6 00 	sts	0x00B6, r24
     cb6:	4e c0       	rjmp	.+156    	; 0xd54 <line_track+0x120>
		
		case 0b1100:mpos = 2; break;
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	f8 cf       	rjmp	.-16     	; 0xcae <line_track+0x7a>
		
		case 0b0011:mpos = -2; break;
     cbe:	8e ef       	ldi	r24, 0xFE	; 254
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	f5 cf       	rjmp	.-22     	; 0xcae <line_track+0x7a>
		
		case 0b1110:if(flag_7==1){mpos = -6;}else mpos = 4; break;
     cc4:	80 91 c8 00 	lds	r24, 0x00C8
     cc8:	90 91 c9 00 	lds	r25, 0x00C9
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	79 f0       	breq	.+30     	; 0xcee <line_track+0xba>
     cd0:	84 e0       	ldi	r24, 0x04	; 4
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	ec cf       	rjmp	.-40     	; 0xcae <line_track+0x7a>
		
		case 0b0111:if(flag_6==1){mpos = 6;}else mpos = -4; break;
     cd6:	80 91 c6 00 	lds	r24, 0x00C6
     cda:	90 91 c7 00 	lds	r25, 0x00C7
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	19 f0       	breq	.+6      	; 0xce8 <line_track+0xb4>
     ce2:	8c ef       	ldi	r24, 0xFC	; 252
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	e3 cf       	rjmp	.-58     	; 0xcae <line_track+0x7a>
		
		case 0b1000:mpos = 6; break;
     ce8:	86 e0       	ldi	r24, 0x06	; 6
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	e0 cf       	rjmp	.-64     	; 0xcae <line_track+0x7a>
		
		case 0b0001:mpos = -6; break;
     cee:	8a ef       	ldi	r24, 0xFA	; 250
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	dd cf       	rjmp	.-70     	; 0xcae <line_track+0x7a>
		
		case 0b0000:if(bit_is_set(PIND,6)&&bit_is_set(PINA,4)&&bit_is_set(PINA,5)&&bit_is_set(PINA,6)&&bit_is_set(PINA,7)&&bit_is_set(PIND,7)){U_turn();} break;
     cf4:	86 9b       	sbis	0x10, 6	; 16
     cf6:	2e c0       	rjmp	.+92     	; 0xd54 <line_track+0x120>
     cf8:	cc 9b       	sbis	0x19, 4	; 25
     cfa:	2c c0       	rjmp	.+88     	; 0xd54 <line_track+0x120>
     cfc:	cd 9b       	sbis	0x19, 5	; 25
     cfe:	2a c0       	rjmp	.+84     	; 0xd54 <line_track+0x120>
     d00:	ce 9b       	sbis	0x19, 6	; 25
     d02:	28 c0       	rjmp	.+80     	; 0xd54 <line_track+0x120>
     d04:	cf 9b       	sbis	0x19, 7	; 25
     d06:	26 c0       	rjmp	.+76     	; 0xd54 <line_track+0x120>
     d08:	87 9b       	sbis	0x10, 7	; 16
     d0a:	24 c0       	rjmp	.+72     	; 0xd54 <line_track+0x120>
     d0c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <U_turn>
     d10:	21 c0       	rjmp	.+66     	; 0xd54 <line_track+0x120>
		
		case 0b1111:if(bit_is_clear(PIND,6)&&bit_is_clear(PINA,4)&&bit_is_clear(PINA,5)&&bit_is_clear(PINA,6)&&bit_is_clear(PINA,7)&&bit_is_clear(PIND,7)){bot_brake();set_pwm1a(400);set_pwm1b(400);flick();delay_sec(1000);} break;
     d12:	86 99       	sbic	0x10, 6	; 16
     d14:	1f c0       	rjmp	.+62     	; 0xd54 <line_track+0x120>
     d16:	cc 99       	sbic	0x19, 4	; 25
     d18:	1d c0       	rjmp	.+58     	; 0xd54 <line_track+0x120>
     d1a:	cd 99       	sbic	0x19, 5	; 25
     d1c:	1b c0       	rjmp	.+54     	; 0xd54 <line_track+0x120>
     d1e:	ce 99       	sbic	0x19, 6	; 25
     d20:	19 c0       	rjmp	.+50     	; 0xd54 <line_track+0x120>
     d22:	cf 99       	sbic	0x19, 7	; 25
     d24:	17 c0       	rjmp	.+46     	; 0xd54 <line_track+0x120>
     d26:	87 99       	sbic	0x10, 7	; 16
     d28:	15 c0       	rjmp	.+42     	; 0xd54 <line_track+0x120>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     d2a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     d2c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     d2e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     d30:	af 9a       	sbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     d32:	80 e9       	ldi	r24, 0x90	; 144
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	9b bd       	out	0x2b, r25	; 43
     d38:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     d3a:	99 bd       	out	0x29, r25	; 41
     d3c:	88 bd       	out	0x28, r24	; 40
     d3e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <flick>
     d42:	88 ee       	ldi	r24, 0xE8	; 232
     d44:	93 e0       	ldi	r25, 0x03	; 3
     d46:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <line_track+0x120>
		
		default:mpos=0; break;
     d4c:	10 92 b7 00 	sts	0x00B7, r1
     d50:	10 92 b6 00 	sts	0x00B6, r1
	}
	if(check==0)
     d54:	80 91 ce 00 	lds	r24, 0x00CE
     d58:	90 91 cf 00 	lds	r25, 0x00CF
     d5c:	89 2b       	or	r24, r25
     d5e:	11 f4       	brne	.+4      	; 0xd64 <line_track+0x130>
	{check_turns();}
     d60:	0e 94 2f 07 	call	0xe5e	; 0xe5e <check_turns>

	p = mpos * kp;
     d64:	80 90 b6 00 	lds	r8, 0x00B6
     d68:	90 90 b7 00 	lds	r9, 0x00B7
     d6c:	b4 01       	movw	r22, r8
     d6e:	88 27       	eor	r24, r24
     d70:	77 fd       	sbrc	r23, 7
     d72:	80 95       	com	r24
     d74:	98 2f       	mov	r25, r24
     d76:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__floatsisf>
     d7a:	20 91 a9 00 	lds	r18, 0x00A9
     d7e:	30 91 aa 00 	lds	r19, 0x00AA
     d82:	40 91 ab 00 	lds	r20, 0x00AB
     d86:	50 91 ac 00 	lds	r21, 0x00AC
     d8a:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     d8e:	7b 01       	movw	r14, r22
     d90:	8c 01       	movw	r16, r24
     d92:	60 93 ba 00 	sts	0x00BA, r22
     d96:	70 93 bb 00 	sts	0x00BB, r23
     d9a:	80 93 bc 00 	sts	0x00BC, r24
     d9e:	90 93 bd 00 	sts	0x00BD, r25
	d = kd * (mpos-prempos);
     da2:	80 91 b8 00 	lds	r24, 0x00B8
     da6:	90 91 b9 00 	lds	r25, 0x00B9
     daa:	b4 01       	movw	r22, r8
     dac:	68 1b       	sub	r22, r24
     dae:	79 0b       	sbc	r23, r25
     db0:	88 27       	eor	r24, r24
     db2:	77 fd       	sbrc	r23, 7
     db4:	80 95       	com	r24
     db6:	98 2f       	mov	r25, r24
     db8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__floatsisf>
     dbc:	20 91 ad 00 	lds	r18, 0x00AD
     dc0:	30 91 ae 00 	lds	r19, 0x00AE
     dc4:	40 91 af 00 	lds	r20, 0x00AF
     dc8:	50 91 b0 00 	lds	r21, 0x00B0
     dcc:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     dd0:	9b 01       	movw	r18, r22
     dd2:	ac 01       	movw	r20, r24
     dd4:	60 93 c2 00 	sts	0x00C2, r22
     dd8:	70 93 c3 00 	sts	0x00C3, r23
     ddc:	80 93 c4 00 	sts	0x00C4, r24
     de0:	90 93 c5 00 	sts	0x00C5, r25
	pid = p + d;
     de4:	c8 01       	movw	r24, r16
     de6:	b7 01       	movw	r22, r14
     de8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__addsf3>
     dec:	7b 01       	movw	r14, r22
     dee:	8c 01       	movw	r16, r24
     df0:	60 93 e0 00 	sts	0x00E0, r22
     df4:	70 93 e1 00 	sts	0x00E1, r23
     df8:	80 93 e2 00 	sts	0x00E2, r24
     dfc:	90 93 e3 00 	sts	0x00E3, r25
	int motor1_value = opt + pid;//left motor is m1
     e00:	60 91 a7 00 	lds	r22, 0x00A7
     e04:	70 91 a8 00 	lds	r23, 0x00A8
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     e10:	5b 01       	movw	r10, r22
     e12:	6c 01       	movw	r12, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     e14:	a8 01       	movw	r20, r16
     e16:	97 01       	movw	r18, r14
     e18:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__addsf3>
     e1c:	0e 94 3e 0a 	call	0x147c	; 0x147c <__fixsfsi>
     e20:	7b bd       	out	0x2b, r23	; 43
     e22:	6a bd       	out	0x2a, r22	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     e24:	c6 01       	movw	r24, r12
     e26:	b5 01       	movw	r22, r10
     e28:	a8 01       	movw	r20, r16
     e2a:	97 01       	movw	r18, r14
     e2c:	0e 94 6d 09 	call	0x12da	; 0x12da <__subsf3>
     e30:	0e 94 3e 0a 	call	0x147c	; 0x147c <__fixsfsi>
     e34:	79 bd       	out	0x29, r23	; 41
     e36:	68 bd       	out	0x28, r22	; 40
	int motor2_value = opt - pid;
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	prempos=mpos;
     e38:	90 92 b9 00 	sts	0x00B9, r9
     e3c:	80 92 b8 00 	sts	0x00B8, r8
	delay_microsec(10);
     e40:	8a e0       	ldi	r24, 0x0A	; 10
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
}
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	9f 90       	pop	r9
     e5a:	8f 90       	pop	r8
     e5c:	08 95       	ret

00000e5e <check_turns>:
	LSR=0;RSL=0;SRL=0;
}

void check_turns()
{
	check=1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 cf 00 	sts	0x00CF, r25
     e66:	80 93 ce 00 	sts	0x00CE, r24
	if(bit_is_clear(PIND,6)||bit_is_clear(PIND,7))
     e6a:	86 9b       	sbis	0x10, 6	; 16
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <check_turns+0x14>
     e6e:	87 99       	sbic	0x10, 7	; 16
     e70:	38 c1       	rjmp	.+624    	; 0x10e2 <check_turns+0x284>
	{
		if(bit_is_clear(PINA,5)||bit_is_clear(PINA,6))
     e72:	cd 9b       	sbis	0x19, 5	; 25
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <check_turns+0x1c>
     e76:	ce 99       	sbic	0x19, 6	; 25
     e78:	86 c0       	rjmp	.+268    	; 0xf86 <check_turns+0x128>
		{
			if(bit_is_clear(PIND,6)&&bit_is_set(PIND,7))
     e7a:	86 99       	sbic	0x10, 6	; 16
     e7c:	3f c0       	rjmp	.+126    	; 0xefc <check_turns+0x9e>
     e7e:	87 9b       	sbis	0x10, 7	; 16
     e80:	3d c0       	rjmp	.+122    	; 0xefc <check_turns+0x9e>
			{
				lcd_clear();
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
				lcd_write_string_xy(5,0,"SLOW 61 70");
     e8a:	85 e0       	ldi	r24, 0x05	; 5
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	42 e8       	ldi	r20, 0x82	; 130
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
				opt=245;
     e9a:	85 ef       	ldi	r24, 0xF5	; 245
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	90 93 a8 00 	sts	0x00A8, r25
     ea2:	80 93 a7 00 	sts	0x00A7, r24
				flag_6=1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	90 93 c7 00 	sts	0x00C7, r25
     eae:	80 93 c6 00 	sts	0x00C6, r24
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <check_turns+0x62>
				while(bit_is_clear(PIND,6))
				{
					line_track();
     eb4:	0e 94 1a 06 	call	0xc34	; 0xc34 <line_track>
					if(bit_is_clear(PIND,7)){left_Plus();}//PLUS condition is HERE
     eb8:	87 99       	sbic	0x10, 7	; 16
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <check_turns+0x62>
     ebc:	0e 94 b3 05 	call	0xb66	; 0xb66 <left_Plus>
			{
				lcd_clear();
				lcd_write_string_xy(5,0,"SLOW 61 70");
				opt=245;
				flag_6=1;
				while(bit_is_clear(PIND,6))
     ec0:	86 9b       	sbis	0x10, 6	; 16
     ec2:	f8 cf       	rjmp	.-16     	; 0xeb4 <check_turns+0x56>
				{
					line_track();
					if(bit_is_clear(PIND,7)){left_Plus();}//PLUS condition is HERE
				}
				Left=1;Forward=1;Right=0;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	90 93 d1 00 	sts	0x00D1, r25
     ecc:	80 93 d0 00 	sts	0x00D0, r24
     ed0:	90 93 d5 00 	sts	0x00D5, r25
     ed4:	80 93 d4 00 	sts	0x00D4, r24
     ed8:	10 92 d3 00 	sts	0x00D3, r1
     edc:	10 92 d2 00 	sts	0x00D2, r1
				pass_turns();
     ee0:	0e 94 9a 03 	call	0x734	; 0x734 <pass_turns>
				flag_6=0;
     ee4:	10 92 c7 00 	sts	0x00C7, r1
     ee8:	10 92 c6 00 	sts	0x00C6, r1
				if(bit_is_set(PINA,4))
     eec:	cc 99       	sbic	0x19, 4	; 25
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <check_turns+0x98>
     ef0:	45 c0       	rjmp	.+138    	; 0xf7c <check_turns+0x11e>
				{while(bit_is_set(PINA,4))
				{line_track();}}
     ef2:	0e 94 1a 06 	call	0xc34	; 0xc34 <line_track>
				}
				Left=1;Forward=1;Right=0;
				pass_turns();
				flag_6=0;
				if(bit_is_set(PINA,4))
				{while(bit_is_set(PINA,4))
     ef6:	cc 99       	sbic	0x19, 4	; 25
     ef8:	fc cf       	rjmp	.-8      	; 0xef2 <check_turns+0x94>
     efa:	40 c0       	rjmp	.+128    	; 0xf7c <check_turns+0x11e>
				{line_track();}}
				check_turn_sensors();
				take_turns();
			}
			
			else if(bit_is_set(PIND,6)&&bit_is_clear(PIND,7))
     efc:	86 9b       	sbis	0x10, 6	; 16
     efe:	f1 c0       	rjmp	.+482    	; 0x10e2 <check_turns+0x284>
     f00:	87 99       	sbic	0x10, 7	; 16
     f02:	ef c0       	rjmp	.+478    	; 0x10e2 <check_turns+0x284>
			{
				lcd_clear();
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
				lcd_write_string_xy(5,0,"SLOW 60 71");
     f0c:	85 e0       	ldi	r24, 0x05	; 5
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	4d e8       	ldi	r20, 0x8D	; 141
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
				opt=245;
     f1c:	85 ef       	ldi	r24, 0xF5	; 245
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	90 93 a8 00 	sts	0x00A8, r25
     f24:	80 93 a7 00 	sts	0x00A7, r24
				flag_7=1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	90 93 c9 00 	sts	0x00C9, r25
     f30:	80 93 c8 00 	sts	0x00C8, r24
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <check_turns+0xe4>
				while(bit_is_clear(PIND,7))
				{
					line_track();
     f36:	0e 94 1a 06 	call	0xc34	; 0xc34 <line_track>
					if(bit_is_clear(PIND,6)){left_Plus();}//PLUS condition is HERE
     f3a:	86 99       	sbic	0x10, 6	; 16
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <check_turns+0xe4>
     f3e:	0e 94 b3 05 	call	0xb66	; 0xb66 <left_Plus>
			{
				lcd_clear();
				lcd_write_string_xy(5,0,"SLOW 60 71");
				opt=245;
				flag_7=1;
				while(bit_is_clear(PIND,7))
     f42:	87 9b       	sbis	0x10, 7	; 16
     f44:	f8 cf       	rjmp	.-16     	; 0xf36 <check_turns+0xd8>
				{
					line_track();
					if(bit_is_clear(PIND,6)){left_Plus();}//PLUS condition is HERE
				}
				Right=1;Forward=1;Left=0;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	90 93 d3 00 	sts	0x00D3, r25
     f4e:	80 93 d2 00 	sts	0x00D2, r24
     f52:	90 93 d5 00 	sts	0x00D5, r25
     f56:	80 93 d4 00 	sts	0x00D4, r24
     f5a:	10 92 d1 00 	sts	0x00D1, r1
     f5e:	10 92 d0 00 	sts	0x00D0, r1
				pass_turns();
     f62:	0e 94 9a 03 	call	0x734	; 0x734 <pass_turns>
				flag_7=0;
     f66:	10 92 c9 00 	sts	0x00C9, r1
     f6a:	10 92 c8 00 	sts	0x00C8, r1
				if(bit_is_set(PINA,7))
     f6e:	cf 9b       	sbis	0x19, 7	; 25
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <check_turns+0x11e>
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <check_turns+0x11a>
				{while(bit_is_set(PINA,7))
				{line_track();}}
     f74:	0e 94 1a 06 	call	0xc34	; 0xc34 <line_track>
				}
				Right=1;Forward=1;Left=0;
				pass_turns();
				flag_7=0;
				if(bit_is_set(PINA,7))
				{while(bit_is_set(PINA,7))
     f78:	cf 99       	sbic	0x19, 7	; 25
     f7a:	fc cf       	rjmp	.-8      	; 0xf74 <check_turns+0x116>
				{line_track();}}
				check_turn_sensors();
     f7c:	0e 94 8c 01 	call	0x318	; 0x318 <check_turn_sensors>
				take_turns();
     f80:	0e 94 80 05 	call	0xb00	; 0xb00 <take_turns>
     f84:	ae c0       	rjmp	.+348    	; 0x10e2 <check_turns+0x284>
			}
		}
		else
		{
			if(bit_is_clear(PIND,6)&&bit_is_clear(PIND,7))
     f86:	86 99       	sbic	0x10, 6	; 16
     f88:	3f c0       	rjmp	.+126    	; 0x1008 <check_turns+0x1aa>
     f8a:	87 99       	sbic	0x10, 7	; 16
     f8c:	3d c0       	rjmp	.+122    	; 0x1008 <check_turns+0x1aa>
			{
				NO_FRO_T:
				lcd_clear();
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
				lcd_write_string_xy(5,0,"NO FRO T");
     f96:	85 e0       	ldi	r24, 0x05	; 5
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	48 e9       	ldi	r20, 0x98	; 152
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     fa6:	85 ef       	ldi	r24, 0xF5	; 245
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	08 c0       	rjmp	.+16     	; 0xfbc <check_turns+0x15e>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     fac:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     fae:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     fb0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     fb2:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     fb4:	9b bd       	out	0x2b, r25	; 43
     fb6:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     fb8:	99 bd       	out	0x29, r25	; 41
     fba:	88 bd       	out	0x28, r24	; 40
				while(bit_is_set(PINA,4)||bit_is_set(PINA,7))//&&
     fbc:	cc 99       	sbic	0x19, 4	; 25
     fbe:	f6 cf       	rjmp	.-20     	; 0xfac <check_turns+0x14e>
     fc0:	cf 99       	sbic	0x19, 7	; 25
     fc2:	f4 cf       	rjmp	.-24     	; 0xfac <check_turns+0x14e>
				{
					bot_forward();
					set_pwm1a(245);
					set_pwm1b(245);
				}
				Left=1;Right=1;Forward=0;LT=1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	90 93 d1 00 	sts	0x00D1, r25
     fcc:	80 93 d0 00 	sts	0x00D0, r24
     fd0:	90 93 d3 00 	sts	0x00D3, r25
     fd4:	80 93 d2 00 	sts	0x00D2, r24
     fd8:	10 92 d5 00 	sts	0x00D5, r1
     fdc:	10 92 d4 00 	sts	0x00D4, r1
     fe0:	90 93 d7 00 	sts	0x00D7, r25
     fe4:	80 93 d6 00 	sts	0x00D6, r24
				pass_turns();
     fe8:	0e 94 9a 03 	call	0x734	; 0x734 <pass_turns>
				if(left==1){left_L();}
     fec:	80 91 ca 00 	lds	r24, 0x00CA
     ff0:	90 91 cb 00 	lds	r25, 0x00CB
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	e1 f1       	breq	.+120    	; 0x1070 <check_turns+0x212>
				else if(right==1){right_L();}
     ff8:	80 91 cc 00 	lds	r24, 0x00CC
     ffc:	90 91 cd 00 	lds	r25, 0x00CD
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	09 f0       	breq	.+2      	; 0x1006 <check_turns+0x1a8>
    1004:	6e c0       	rjmp	.+220    	; 0x10e2 <check_turns+0x284>
    1006:	6b c0       	rjmp	.+214    	; 0x10de <check_turns+0x280>
			}
			
			else if(bit_is_clear(PIND,6)&&bit_is_set(PIND,7))
    1008:	86 99       	sbic	0x10, 6	; 16
    100a:	35 c0       	rjmp	.+106    	; 0x1076 <check_turns+0x218>
    100c:	87 9b       	sbis	0x10, 7	; 16
    100e:	33 c0       	rjmp	.+102    	; 0x1076 <check_turns+0x218>
			{
				lcd_clear();
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
				lcd_write_string_xy(5,0,"SLOW 61 70");
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	42 e8       	ldi	r20, 0x82	; 130
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    1028:	25 ef       	ldi	r18, 0xF5	; 245
    102a:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    102c:	8a ef       	ldi	r24, 0xFA	; 250
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0a c0       	rjmp	.+20     	; 0x1046 <check_turns+0x1e8>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
    1032:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
    1034:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
    1036:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
    1038:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    103a:	3b bd       	out	0x2b, r19	; 43
    103c:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    103e:	99 bd       	out	0x29, r25	; 41
    1040:	88 bd       	out	0x28, r24	; 40
				while(bit_is_clear(PIND,6))
				{
					bot_forward();
					set_pwm1a(245);//6
					set_pwm1b(250);//6
					if(bit_is_clear(PIND,7)){goto NO_FRO_T;}
    1042:	87 9b       	sbis	0x10, 7	; 16
    1044:	a4 cf       	rjmp	.-184    	; 0xf8e <check_turns+0x130>
			
			else if(bit_is_clear(PIND,6)&&bit_is_set(PIND,7))
			{
				lcd_clear();
				lcd_write_string_xy(5,0,"SLOW 61 70");
				while(bit_is_clear(PIND,6))
    1046:	86 9b       	sbis	0x10, 6	; 16
    1048:	f4 cf       	rjmp	.-24     	; 0x1032 <check_turns+0x1d4>
				{
					bot_forward();
					set_pwm1a(245);//6
					set_pwm1b(250);//6
					if(bit_is_clear(PIND,7)){goto NO_FRO_T;}
				}LT=1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	90 93 d7 00 	sts	0x00D7, r25
    1052:	80 93 d6 00 	sts	0x00D6, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    1056:	85 ef       	ldi	r24, 0xF5	; 245
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	08 c0       	rjmp	.+16     	; 0x106c <check_turns+0x20e>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
    105c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
    105e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
    1060:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
    1062:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    1064:	9b bd       	out	0x2b, r25	; 43
    1066:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    1068:	99 bd       	out	0x29, r25	; 41
    106a:	88 bd       	out	0x28, r24	; 40
				while(bit_is_set(PINA,4))
    106c:	cc 99       	sbic	0x19, 4	; 25
    106e:	f6 cf       	rjmp	.-20     	; 0x105c <check_turns+0x1fe>
				{
					bot_forward();
					set_pwm1a(245);
					set_pwm1b(245);
				}
				left_L();
    1070:	0e 94 38 04 	call	0x870	; 0x870 <left_L>
    1074:	36 c0       	rjmp	.+108    	; 0x10e2 <check_turns+0x284>
			}
			
			else if(bit_is_set(PIND,6)&&bit_is_clear(PIND,7))
    1076:	86 9b       	sbis	0x10, 6	; 16
    1078:	34 c0       	rjmp	.+104    	; 0x10e2 <check_turns+0x284>
    107a:	87 99       	sbic	0x10, 7	; 16
    107c:	32 c0       	rjmp	.+100    	; 0x10e2 <check_turns+0x284>
			{
				lcd_clear();
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
				lcd_write_string_xy(5,0,"SLOW 60 71");
    1086:	85 e0       	ldi	r24, 0x05	; 5
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	4d e8       	ldi	r20, 0x8D	; 141
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    1096:	2a ef       	ldi	r18, 0xFA	; 250
    1098:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    109a:	85 ef       	ldi	r24, 0xF5	; 245
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <check_turns+0x256>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
    10a0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
    10a2:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
    10a4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
    10a6:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    10a8:	3b bd       	out	0x2b, r19	; 43
    10aa:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    10ac:	99 bd       	out	0x29, r25	; 41
    10ae:	88 bd       	out	0x28, r24	; 40
				while(bit_is_clear(PIND,7))
				{
					bot_forward();
					set_pwm1a(250);
					set_pwm1b(245);
					if(bit_is_clear(PIND,6)){goto NO_FRO_T;}
    10b0:	86 9b       	sbis	0x10, 6	; 16
    10b2:	6d cf       	rjmp	.-294    	; 0xf8e <check_turns+0x130>
			
			else if(bit_is_set(PIND,6)&&bit_is_clear(PIND,7))
			{
				lcd_clear();
				lcd_write_string_xy(5,0,"SLOW 60 71");
				while(bit_is_clear(PIND,7))
    10b4:	87 9b       	sbis	0x10, 7	; 16
    10b6:	f4 cf       	rjmp	.-24     	; 0x10a0 <check_turns+0x242>
				{
					bot_forward();
					set_pwm1a(250);
					set_pwm1b(245);
					if(bit_is_clear(PIND,6)){goto NO_FRO_T;}
				}LT=1;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	90 93 d7 00 	sts	0x00D7, r25
    10c0:	80 93 d6 00 	sts	0x00D6, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    10c4:	85 ef       	ldi	r24, 0xF5	; 245
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <check_turns+0x27c>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
    10ca:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
    10cc:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
    10ce:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
    10d0:	af 98       	cbi	0x15, 7	; 21
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    10d2:	9b bd       	out	0x2b, r25	; 43
    10d4:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    10d6:	99 bd       	out	0x29, r25	; 41
    10d8:	88 bd       	out	0x28, r24	; 40
				while(bit_is_set(PINA,7))
    10da:	cf 99       	sbic	0x19, 7	; 25
    10dc:	f6 cf       	rjmp	.-20     	; 0x10ca <check_turns+0x26c>
				{
					bot_forward();
					set_pwm1a(245);
					set_pwm1b(245);
				}
				right_L();
    10de:	0e 94 db 04 	call	0x9b6	; 0x9b6 <right_L>
			}
		}
	}
	check=0;
    10e2:	10 92 cf 00 	sts	0x00CF, r1
    10e6:	10 92 ce 00 	sts	0x00CE, r1
}
    10ea:	08 95       	ret

000010ec <init_devices>:
	lcd_clear();
}

void init_devices(void)
{
	port_init();
    10ec:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
    10f0:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
    10f2:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
    10f4:	80 e6       	ldi	r24, 0x60	; 96
    10f6:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
    10f8:	87 e8       	ldi	r24, 0x87	; 135
    10fa:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
    10fc:	80 e8       	ldi	r24, 0x80	; 128
    10fe:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	0e 94 43 02 	call	0x486	; 0x486 <lcd_init>
	lcd_clear();
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_byte>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
    1112:	82 b3       	in	r24, 0x12	; 18
    1114:	8f 60       	ori	r24, 0x0F	; 15
    1116:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
    1118:	81 b3       	in	r24, 0x11	; 17
    111a:	80 7f       	andi	r24, 0xF0	; 240
    111c:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
    111e:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
    1122:	08 95       	ret

00001124 <main>:

int main(void)
{
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
	init_devices();
    1128:	0e 94 76 08 	call	0x10ec	; 0x10ec <init_devices>
    112c:	c0 e9       	ldi	r28, 0x90	; 144
    112e:	d1 e0       	ldi	r29, 0x01	; 1
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    1130:	82 99       	sbic	0x10, 2	; 16
    1132:	79 c0       	rjmp	.+242    	; 0x1226 <main+0x102>
	
	while(1)
	{			
		if(pressed_switch2())
		{
			lcd_write_string_xy(5,0,"START");
    1134:	85 e0       	ldi	r24, 0x05	; 5
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	41 ea       	ldi	r20, 0xA1	; 161
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lcd_write_string_xy>
    1144:	88 e8       	ldi	r24, 0x88	; 136
    1146:	93 e1       	ldi	r25, 0x13	; 19
    1148:	20 e9       	ldi	r18, 0x90	; 144
    114a:	31 e0       	ldi	r19, 0x01	; 1
    114c:	f9 01       	movw	r30, r18
    114e:	31 97       	sbiw	r30, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1154:	d9 f7       	brne	.-10     	; 0x114c <main+0x28>
			_delay_ms(500);
			while(1)
			{
				line_track();
    1156:	0e 94 1a 06 	call	0xc34	; 0xc34 <line_track>
				LED&=0b11110000;
    115a:	85 b3       	in	r24, 0x15	; 21
    115c:	80 7f       	andi	r24, 0xF0	; 240
    115e:	85 bb       	out	0x15, r24	; 21
				LED|=sensorbyte;
    1160:	85 b3       	in	r24, 0x15	; 21
    1162:	90 91 b4 00 	lds	r25, 0x00B4
    1166:	89 2b       	or	r24, r25
    1168:	85 bb       	out	0x15, r24	; 21
    116a:	f5 cf       	rjmp	.-22     	; 0x1156 <main+0x32>
			
		}*/
		
		if(pressed_switch0())
		{
			kp++;
    116c:	60 91 a9 00 	lds	r22, 0x00A9
    1170:	70 91 aa 00 	lds	r23, 0x00AA
    1174:	80 91 ab 00 	lds	r24, 0x00AB
    1178:	90 91 ac 00 	lds	r25, 0x00AC
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__addsf3>
    1188:	60 93 a9 00 	sts	0x00A9, r22
    118c:	70 93 aa 00 	sts	0x00AA, r23
    1190:	80 93 ab 00 	sts	0x00AB, r24
    1194:	90 93 ac 00 	sts	0x00AC, r25
			lcd_write_int_xy(2,0,kp,2);
    1198:	0e 94 3e 0a 	call	0x147c	; 0x147c <__fixsfsi>
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	a9 01       	movw	r20, r18
    11aa:	22 e0       	ldi	r18, 0x02	; 2
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_write_int_xy>
    11b2:	80 ed       	ldi	r24, 0xD0	; 208
    11b4:	97 e0       	ldi	r25, 0x07	; 7
    11b6:	fe 01       	movw	r30, r28
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	d9 f7       	brne	.-10     	; 0x11b6 <main+0x92>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    11c0:	81 99       	sbic	0x10, 1	; 16
    11c2:	b6 cf       	rjmp	.-148    	; 0x1130 <main+0xc>
			_delay_ms(200);
		}
		
		if(pressed_switch1())
		{
			kd+=0.5;
    11c4:	60 91 ad 00 	lds	r22, 0x00AD
    11c8:	70 91 ae 00 	lds	r23, 0x00AE
    11cc:	80 91 af 00 	lds	r24, 0x00AF
    11d0:	90 91 b0 00 	lds	r25, 0x00B0
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	5f e3       	ldi	r21, 0x3F	; 63
    11dc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__addsf3>
    11e0:	60 93 ad 00 	sts	0x00AD, r22
    11e4:	70 93 ae 00 	sts	0x00AE, r23
    11e8:	80 93 af 00 	sts	0x00AF, r24
    11ec:	90 93 b0 00 	sts	0x00B0, r25
			lcd_write_int_xy(7,0,kd*10,2);
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	51 e4       	ldi	r21, 0x41	; 65
    11f8:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
    11fc:	0e 94 3e 0a 	call	0x147c	; 0x147c <__fixsfsi>
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
    1204:	87 e0       	ldi	r24, 0x07	; 7
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	22 e0       	ldi	r18, 0x02	; 2
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_write_int_xy>
    1216:	80 ed       	ldi	r24, 0xD0	; 208
    1218:	97 e0       	ldi	r25, 0x07	; 7
    121a:	fe 01       	movw	r30, r28
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <main+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1220:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1222:	d9 f7       	brne	.-10     	; 0x121a <main+0xf6>
    1224:	85 cf       	rjmp	.-246    	; 0x1130 <main+0xc>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    1226:	80 9b       	sbis	0x10, 0	; 16
    1228:	a1 cf       	rjmp	.-190    	; 0x116c <main+0x48>
    122a:	ca cf       	rjmp	.-108    	; 0x11c0 <main+0x9c>

0000122c <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 af 0b 	call	0x175e	; 0x175e <__eerd_byte_m16>
    1234:	80 93 e8 00 	sts	0x00E8, r24
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 af 0b 	call	0x175e	; 0x175e <__eerd_byte_m16>
    1240:	80 93 e9 00 	sts	0x00E9, r24
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 af 0b 	call	0x175e	; 0x175e <__eerd_byte_m16>
    124c:	80 93 ea 00 	sts	0x00EA, r24
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 af 0b 	call	0x175e	; 0x175e <__eerd_byte_m16>
    1258:	80 93 eb 00 	sts	0x00EB, r24
		eeprom_addr++;
	}
}
    125c:	08 95       	ret

0000125e <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
    1262:	20 91 ec 00 	lds	r18, 0x00EC
    1266:	80 91 e4 00 	lds	r24, 0x00E4
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	82 0f       	add	r24, r18
    126e:	91 1d       	adc	r25, r1
    1270:	95 95       	asr	r25
    1272:	87 95       	ror	r24
    1274:	80 93 e8 00 	sts	0x00E8, r24
    1278:	20 91 ed 00 	lds	r18, 0x00ED
    127c:	80 91 e5 00 	lds	r24, 0x00E5
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	82 0f       	add	r24, r18
    1284:	91 1d       	adc	r25, r1
    1286:	95 95       	asr	r25
    1288:	87 95       	ror	r24
    128a:	80 93 e9 00 	sts	0x00E9, r24
    128e:	20 91 ee 00 	lds	r18, 0x00EE
    1292:	80 91 e6 00 	lds	r24, 0x00E6
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	82 0f       	add	r24, r18
    129a:	91 1d       	adc	r25, r1
    129c:	95 95       	asr	r25
    129e:	87 95       	ror	r24
    12a0:	80 93 ea 00 	sts	0x00EA, r24
    12a4:	20 91 ef 00 	lds	r18, 0x00EF
    12a8:	80 91 e7 00 	lds	r24, 0x00E7
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	82 0f       	add	r24, r18
    12b0:	91 1d       	adc	r25, r1
    12b2:	95 95       	asr	r25
    12b4:	87 95       	ror	r24
    12b6:	80 93 eb 00 	sts	0x00EB, r24
    12ba:	c0 e0       	ldi	r28, 0x00	; 0
    12bc:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
    12be:	fe 01       	movw	r30, r28
    12c0:	e8 51       	subi	r30, 0x18	; 24
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	ce 01       	movw	r24, r28
    12c6:	60 81       	ld	r22, Z
    12c8:	0e 94 b7 0b 	call	0x176e	; 0x176e <__eewr_byte_m16>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
    12cc:	21 96       	adiw	r28, 0x01	; 1
    12ce:	c4 30       	cpi	r28, 0x04	; 4
    12d0:	d1 05       	cpc	r29, r1
    12d2:	a9 f7       	brne	.-22     	; 0x12be <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	08 95       	ret

000012da <__subsf3>:
    12da:	50 58       	subi	r21, 0x80	; 128

000012dc <__addsf3>:
    12dc:	bb 27       	eor	r27, r27
    12de:	aa 27       	eor	r26, r26
    12e0:	0e d0       	rcall	.+28     	; 0x12fe <__addsf3x>
    12e2:	75 c1       	rjmp	.+746    	; 0x15ce <__fp_round>
    12e4:	66 d1       	rcall	.+716    	; 0x15b2 <__fp_pscA>
    12e6:	30 f0       	brcs	.+12     	; 0x12f4 <__addsf3+0x18>
    12e8:	6b d1       	rcall	.+726    	; 0x15c0 <__fp_pscB>
    12ea:	20 f0       	brcs	.+8      	; 0x12f4 <__addsf3+0x18>
    12ec:	31 f4       	brne	.+12     	; 0x12fa <__addsf3+0x1e>
    12ee:	9f 3f       	cpi	r25, 0xFF	; 255
    12f0:	11 f4       	brne	.+4      	; 0x12f6 <__addsf3+0x1a>
    12f2:	1e f4       	brtc	.+6      	; 0x12fa <__addsf3+0x1e>
    12f4:	5b c1       	rjmp	.+694    	; 0x15ac <__fp_nan>
    12f6:	0e f4       	brtc	.+2      	; 0x12fa <__addsf3+0x1e>
    12f8:	e0 95       	com	r30
    12fa:	e7 fb       	bst	r30, 7
    12fc:	51 c1       	rjmp	.+674    	; 0x15a0 <__fp_inf>

000012fe <__addsf3x>:
    12fe:	e9 2f       	mov	r30, r25
    1300:	77 d1       	rcall	.+750    	; 0x15f0 <__fp_split3>
    1302:	80 f3       	brcs	.-32     	; 0x12e4 <__addsf3+0x8>
    1304:	ba 17       	cp	r27, r26
    1306:	62 07       	cpc	r22, r18
    1308:	73 07       	cpc	r23, r19
    130a:	84 07       	cpc	r24, r20
    130c:	95 07       	cpc	r25, r21
    130e:	18 f0       	brcs	.+6      	; 0x1316 <__addsf3x+0x18>
    1310:	71 f4       	brne	.+28     	; 0x132e <__addsf3x+0x30>
    1312:	9e f5       	brtc	.+102    	; 0x137a <__addsf3x+0x7c>
    1314:	8f c1       	rjmp	.+798    	; 0x1634 <__fp_zero>
    1316:	0e f4       	brtc	.+2      	; 0x131a <__addsf3x+0x1c>
    1318:	e0 95       	com	r30
    131a:	0b 2e       	mov	r0, r27
    131c:	ba 2f       	mov	r27, r26
    131e:	a0 2d       	mov	r26, r0
    1320:	0b 01       	movw	r0, r22
    1322:	b9 01       	movw	r22, r18
    1324:	90 01       	movw	r18, r0
    1326:	0c 01       	movw	r0, r24
    1328:	ca 01       	movw	r24, r20
    132a:	a0 01       	movw	r20, r0
    132c:	11 24       	eor	r1, r1
    132e:	ff 27       	eor	r31, r31
    1330:	59 1b       	sub	r21, r25
    1332:	99 f0       	breq	.+38     	; 0x135a <__addsf3x+0x5c>
    1334:	59 3f       	cpi	r21, 0xF9	; 249
    1336:	50 f4       	brcc	.+20     	; 0x134c <__addsf3x+0x4e>
    1338:	50 3e       	cpi	r21, 0xE0	; 224
    133a:	68 f1       	brcs	.+90     	; 0x1396 <__addsf3x+0x98>
    133c:	1a 16       	cp	r1, r26
    133e:	f0 40       	sbci	r31, 0x00	; 0
    1340:	a2 2f       	mov	r26, r18
    1342:	23 2f       	mov	r18, r19
    1344:	34 2f       	mov	r19, r20
    1346:	44 27       	eor	r20, r20
    1348:	58 5f       	subi	r21, 0xF8	; 248
    134a:	f3 cf       	rjmp	.-26     	; 0x1332 <__addsf3x+0x34>
    134c:	46 95       	lsr	r20
    134e:	37 95       	ror	r19
    1350:	27 95       	ror	r18
    1352:	a7 95       	ror	r26
    1354:	f0 40       	sbci	r31, 0x00	; 0
    1356:	53 95       	inc	r21
    1358:	c9 f7       	brne	.-14     	; 0x134c <__addsf3x+0x4e>
    135a:	7e f4       	brtc	.+30     	; 0x137a <__addsf3x+0x7c>
    135c:	1f 16       	cp	r1, r31
    135e:	ba 0b       	sbc	r27, r26
    1360:	62 0b       	sbc	r22, r18
    1362:	73 0b       	sbc	r23, r19
    1364:	84 0b       	sbc	r24, r20
    1366:	ba f0       	brmi	.+46     	; 0x1396 <__addsf3x+0x98>
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	a1 f0       	breq	.+40     	; 0x1394 <__addsf3x+0x96>
    136c:	ff 0f       	add	r31, r31
    136e:	bb 1f       	adc	r27, r27
    1370:	66 1f       	adc	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	c2 f7       	brpl	.-16     	; 0x1368 <__addsf3x+0x6a>
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <__addsf3x+0x98>
    137a:	ba 0f       	add	r27, r26
    137c:	62 1f       	adc	r22, r18
    137e:	73 1f       	adc	r23, r19
    1380:	84 1f       	adc	r24, r20
    1382:	48 f4       	brcc	.+18     	; 0x1396 <__addsf3x+0x98>
    1384:	87 95       	ror	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	b7 95       	ror	r27
    138c:	f7 95       	ror	r31
    138e:	9e 3f       	cpi	r25, 0xFE	; 254
    1390:	08 f0       	brcs	.+2      	; 0x1394 <__addsf3x+0x96>
    1392:	b3 cf       	rjmp	.-154    	; 0x12fa <__addsf3+0x1e>
    1394:	93 95       	inc	r25
    1396:	88 0f       	add	r24, r24
    1398:	08 f0       	brcs	.+2      	; 0x139c <__addsf3x+0x9e>
    139a:	99 27       	eor	r25, r25
    139c:	ee 0f       	add	r30, r30
    139e:	97 95       	ror	r25
    13a0:	87 95       	ror	r24
    13a2:	08 95       	ret

000013a4 <__cmpsf2>:
    13a4:	d9 d0       	rcall	.+434    	; 0x1558 <__fp_cmp>
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <__cmpsf2+0x6>
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	08 95       	ret

000013ac <__divsf3>:
    13ac:	0c d0       	rcall	.+24     	; 0x13c6 <__divsf3x>
    13ae:	0f c1       	rjmp	.+542    	; 0x15ce <__fp_round>
    13b0:	07 d1       	rcall	.+526    	; 0x15c0 <__fp_pscB>
    13b2:	40 f0       	brcs	.+16     	; 0x13c4 <__divsf3+0x18>
    13b4:	fe d0       	rcall	.+508    	; 0x15b2 <__fp_pscA>
    13b6:	30 f0       	brcs	.+12     	; 0x13c4 <__divsf3+0x18>
    13b8:	21 f4       	brne	.+8      	; 0x13c2 <__divsf3+0x16>
    13ba:	5f 3f       	cpi	r21, 0xFF	; 255
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <__divsf3+0x18>
    13be:	f0 c0       	rjmp	.+480    	; 0x15a0 <__fp_inf>
    13c0:	51 11       	cpse	r21, r1
    13c2:	39 c1       	rjmp	.+626    	; 0x1636 <__fp_szero>
    13c4:	f3 c0       	rjmp	.+486    	; 0x15ac <__fp_nan>

000013c6 <__divsf3x>:
    13c6:	14 d1       	rcall	.+552    	; 0x15f0 <__fp_split3>
    13c8:	98 f3       	brcs	.-26     	; 0x13b0 <__divsf3+0x4>

000013ca <__divsf3_pse>:
    13ca:	99 23       	and	r25, r25
    13cc:	c9 f3       	breq	.-14     	; 0x13c0 <__divsf3+0x14>
    13ce:	55 23       	and	r21, r21
    13d0:	b1 f3       	breq	.-20     	; 0x13be <__divsf3+0x12>
    13d2:	95 1b       	sub	r25, r21
    13d4:	55 0b       	sbc	r21, r21
    13d6:	bb 27       	eor	r27, r27
    13d8:	aa 27       	eor	r26, r26
    13da:	62 17       	cp	r22, r18
    13dc:	73 07       	cpc	r23, r19
    13de:	84 07       	cpc	r24, r20
    13e0:	38 f0       	brcs	.+14     	; 0x13f0 <__divsf3_pse+0x26>
    13e2:	9f 5f       	subi	r25, 0xFF	; 255
    13e4:	5f 4f       	sbci	r21, 0xFF	; 255
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	44 1f       	adc	r20, r20
    13ec:	aa 1f       	adc	r26, r26
    13ee:	a9 f3       	breq	.-22     	; 0x13da <__divsf3_pse+0x10>
    13f0:	33 d0       	rcall	.+102    	; 0x1458 <__divsf3_pse+0x8e>
    13f2:	0e 2e       	mov	r0, r30
    13f4:	3a f0       	brmi	.+14     	; 0x1404 <__divsf3_pse+0x3a>
    13f6:	e0 e8       	ldi	r30, 0x80	; 128
    13f8:	30 d0       	rcall	.+96     	; 0x145a <__divsf3_pse+0x90>
    13fa:	91 50       	subi	r25, 0x01	; 1
    13fc:	50 40       	sbci	r21, 0x00	; 0
    13fe:	e6 95       	lsr	r30
    1400:	00 1c       	adc	r0, r0
    1402:	ca f7       	brpl	.-14     	; 0x13f6 <__divsf3_pse+0x2c>
    1404:	29 d0       	rcall	.+82     	; 0x1458 <__divsf3_pse+0x8e>
    1406:	fe 2f       	mov	r31, r30
    1408:	27 d0       	rcall	.+78     	; 0x1458 <__divsf3_pse+0x8e>
    140a:	66 0f       	add	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	88 1f       	adc	r24, r24
    1410:	bb 1f       	adc	r27, r27
    1412:	26 17       	cp	r18, r22
    1414:	37 07       	cpc	r19, r23
    1416:	48 07       	cpc	r20, r24
    1418:	ab 07       	cpc	r26, r27
    141a:	b0 e8       	ldi	r27, 0x80	; 128
    141c:	09 f0       	breq	.+2      	; 0x1420 <__divsf3_pse+0x56>
    141e:	bb 0b       	sbc	r27, r27
    1420:	80 2d       	mov	r24, r0
    1422:	bf 01       	movw	r22, r30
    1424:	ff 27       	eor	r31, r31
    1426:	93 58       	subi	r25, 0x83	; 131
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	2a f0       	brmi	.+10     	; 0x1436 <__divsf3_pse+0x6c>
    142c:	9e 3f       	cpi	r25, 0xFE	; 254
    142e:	51 05       	cpc	r21, r1
    1430:	68 f0       	brcs	.+26     	; 0x144c <__divsf3_pse+0x82>
    1432:	b6 c0       	rjmp	.+364    	; 0x15a0 <__fp_inf>
    1434:	00 c1       	rjmp	.+512    	; 0x1636 <__fp_szero>
    1436:	5f 3f       	cpi	r21, 0xFF	; 255
    1438:	ec f3       	brlt	.-6      	; 0x1434 <__divsf3_pse+0x6a>
    143a:	98 3e       	cpi	r25, 0xE8	; 232
    143c:	dc f3       	brlt	.-10     	; 0x1434 <__divsf3_pse+0x6a>
    143e:	86 95       	lsr	r24
    1440:	77 95       	ror	r23
    1442:	67 95       	ror	r22
    1444:	b7 95       	ror	r27
    1446:	f7 95       	ror	r31
    1448:	9f 5f       	subi	r25, 0xFF	; 255
    144a:	c9 f7       	brne	.-14     	; 0x143e <__divsf3_pse+0x74>
    144c:	88 0f       	add	r24, r24
    144e:	91 1d       	adc	r25, r1
    1450:	96 95       	lsr	r25
    1452:	87 95       	ror	r24
    1454:	97 f9       	bld	r25, 7
    1456:	08 95       	ret
    1458:	e1 e0       	ldi	r30, 0x01	; 1
    145a:	66 0f       	add	r22, r22
    145c:	77 1f       	adc	r23, r23
    145e:	88 1f       	adc	r24, r24
    1460:	bb 1f       	adc	r27, r27
    1462:	62 17       	cp	r22, r18
    1464:	73 07       	cpc	r23, r19
    1466:	84 07       	cpc	r24, r20
    1468:	ba 07       	cpc	r27, r26
    146a:	20 f0       	brcs	.+8      	; 0x1474 <__divsf3_pse+0xaa>
    146c:	62 1b       	sub	r22, r18
    146e:	73 0b       	sbc	r23, r19
    1470:	84 0b       	sbc	r24, r20
    1472:	ba 0b       	sbc	r27, r26
    1474:	ee 1f       	adc	r30, r30
    1476:	88 f7       	brcc	.-30     	; 0x145a <__divsf3_pse+0x90>
    1478:	e0 95       	com	r30
    147a:	08 95       	ret

0000147c <__fixsfsi>:
    147c:	04 d0       	rcall	.+8      	; 0x1486 <__fixunssfsi>
    147e:	68 94       	set
    1480:	b1 11       	cpse	r27, r1
    1482:	d9 c0       	rjmp	.+434    	; 0x1636 <__fp_szero>
    1484:	08 95       	ret

00001486 <__fixunssfsi>:
    1486:	bc d0       	rcall	.+376    	; 0x1600 <__fp_splitA>
    1488:	88 f0       	brcs	.+34     	; 0x14ac <__fixunssfsi+0x26>
    148a:	9f 57       	subi	r25, 0x7F	; 127
    148c:	90 f0       	brcs	.+36     	; 0x14b2 <__fixunssfsi+0x2c>
    148e:	b9 2f       	mov	r27, r25
    1490:	99 27       	eor	r25, r25
    1492:	b7 51       	subi	r27, 0x17	; 23
    1494:	a0 f0       	brcs	.+40     	; 0x14be <__fixunssfsi+0x38>
    1496:	d1 f0       	breq	.+52     	; 0x14cc <__fixunssfsi+0x46>
    1498:	66 0f       	add	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	88 1f       	adc	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	1a f0       	brmi	.+6      	; 0x14a8 <__fixunssfsi+0x22>
    14a2:	ba 95       	dec	r27
    14a4:	c9 f7       	brne	.-14     	; 0x1498 <__fixunssfsi+0x12>
    14a6:	12 c0       	rjmp	.+36     	; 0x14cc <__fixunssfsi+0x46>
    14a8:	b1 30       	cpi	r27, 0x01	; 1
    14aa:	81 f0       	breq	.+32     	; 0x14cc <__fixunssfsi+0x46>
    14ac:	c3 d0       	rcall	.+390    	; 0x1634 <__fp_zero>
    14ae:	b1 e0       	ldi	r27, 0x01	; 1
    14b0:	08 95       	ret
    14b2:	c0 c0       	rjmp	.+384    	; 0x1634 <__fp_zero>
    14b4:	67 2f       	mov	r22, r23
    14b6:	78 2f       	mov	r23, r24
    14b8:	88 27       	eor	r24, r24
    14ba:	b8 5f       	subi	r27, 0xF8	; 248
    14bc:	39 f0       	breq	.+14     	; 0x14cc <__fixunssfsi+0x46>
    14be:	b9 3f       	cpi	r27, 0xF9	; 249
    14c0:	cc f3       	brlt	.-14     	; 0x14b4 <__fixunssfsi+0x2e>
    14c2:	86 95       	lsr	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b3 95       	inc	r27
    14ca:	d9 f7       	brne	.-10     	; 0x14c2 <__fixunssfsi+0x3c>
    14cc:	3e f4       	brtc	.+14     	; 0x14dc <__fixunssfsi+0x56>
    14ce:	90 95       	com	r25
    14d0:	80 95       	com	r24
    14d2:	70 95       	com	r23
    14d4:	61 95       	neg	r22
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	8f 4f       	sbci	r24, 0xFF	; 255
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	08 95       	ret

000014de <__floatunsisf>:
    14de:	e8 94       	clt
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <__floatsisf+0x12>

000014e2 <__floatsisf>:
    14e2:	97 fb       	bst	r25, 7
    14e4:	3e f4       	brtc	.+14     	; 0x14f4 <__floatsisf+0x12>
    14e6:	90 95       	com	r25
    14e8:	80 95       	com	r24
    14ea:	70 95       	com	r23
    14ec:	61 95       	neg	r22
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	99 23       	and	r25, r25
    14f6:	a9 f0       	breq	.+42     	; 0x1522 <__floatsisf+0x40>
    14f8:	f9 2f       	mov	r31, r25
    14fa:	96 e9       	ldi	r25, 0x96	; 150
    14fc:	bb 27       	eor	r27, r27
    14fe:	93 95       	inc	r25
    1500:	f6 95       	lsr	r31
    1502:	87 95       	ror	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	f1 11       	cpse	r31, r1
    150c:	f8 cf       	rjmp	.-16     	; 0x14fe <__floatsisf+0x1c>
    150e:	fa f4       	brpl	.+62     	; 0x154e <__floatsisf+0x6c>
    1510:	bb 0f       	add	r27, r27
    1512:	11 f4       	brne	.+4      	; 0x1518 <__floatsisf+0x36>
    1514:	60 ff       	sbrs	r22, 0
    1516:	1b c0       	rjmp	.+54     	; 0x154e <__floatsisf+0x6c>
    1518:	6f 5f       	subi	r22, 0xFF	; 255
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8f 4f       	sbci	r24, 0xFF	; 255
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	16 c0       	rjmp	.+44     	; 0x154e <__floatsisf+0x6c>
    1522:	88 23       	and	r24, r24
    1524:	11 f0       	breq	.+4      	; 0x152a <__floatsisf+0x48>
    1526:	96 e9       	ldi	r25, 0x96	; 150
    1528:	11 c0       	rjmp	.+34     	; 0x154c <__floatsisf+0x6a>
    152a:	77 23       	and	r23, r23
    152c:	21 f0       	breq	.+8      	; 0x1536 <__floatsisf+0x54>
    152e:	9e e8       	ldi	r25, 0x8E	; 142
    1530:	87 2f       	mov	r24, r23
    1532:	76 2f       	mov	r23, r22
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <__floatsisf+0x5e>
    1536:	66 23       	and	r22, r22
    1538:	71 f0       	breq	.+28     	; 0x1556 <__floatsisf+0x74>
    153a:	96 e8       	ldi	r25, 0x86	; 134
    153c:	86 2f       	mov	r24, r22
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	2a f0       	brmi	.+10     	; 0x154e <__floatsisf+0x6c>
    1544:	9a 95       	dec	r25
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	da f7       	brpl	.-10     	; 0x1544 <__floatsisf+0x62>
    154e:	88 0f       	add	r24, r24
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	97 f9       	bld	r25, 7
    1556:	08 95       	ret

00001558 <__fp_cmp>:
    1558:	99 0f       	add	r25, r25
    155a:	00 08       	sbc	r0, r0
    155c:	55 0f       	add	r21, r21
    155e:	aa 0b       	sbc	r26, r26
    1560:	e0 e8       	ldi	r30, 0x80	; 128
    1562:	fe ef       	ldi	r31, 0xFE	; 254
    1564:	16 16       	cp	r1, r22
    1566:	17 06       	cpc	r1, r23
    1568:	e8 07       	cpc	r30, r24
    156a:	f9 07       	cpc	r31, r25
    156c:	c0 f0       	brcs	.+48     	; 0x159e <__fp_cmp+0x46>
    156e:	12 16       	cp	r1, r18
    1570:	13 06       	cpc	r1, r19
    1572:	e4 07       	cpc	r30, r20
    1574:	f5 07       	cpc	r31, r21
    1576:	98 f0       	brcs	.+38     	; 0x159e <__fp_cmp+0x46>
    1578:	62 1b       	sub	r22, r18
    157a:	73 0b       	sbc	r23, r19
    157c:	84 0b       	sbc	r24, r20
    157e:	95 0b       	sbc	r25, r21
    1580:	39 f4       	brne	.+14     	; 0x1590 <__fp_cmp+0x38>
    1582:	0a 26       	eor	r0, r26
    1584:	61 f0       	breq	.+24     	; 0x159e <__fp_cmp+0x46>
    1586:	23 2b       	or	r18, r19
    1588:	24 2b       	or	r18, r20
    158a:	25 2b       	or	r18, r21
    158c:	21 f4       	brne	.+8      	; 0x1596 <__fp_cmp+0x3e>
    158e:	08 95       	ret
    1590:	0a 26       	eor	r0, r26
    1592:	09 f4       	brne	.+2      	; 0x1596 <__fp_cmp+0x3e>
    1594:	a1 40       	sbci	r26, 0x01	; 1
    1596:	a6 95       	lsr	r26
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	81 1d       	adc	r24, r1
    159c:	81 1d       	adc	r24, r1
    159e:	08 95       	ret

000015a0 <__fp_inf>:
    15a0:	97 f9       	bld	r25, 7
    15a2:	9f 67       	ori	r25, 0x7F	; 127
    15a4:	80 e8       	ldi	r24, 0x80	; 128
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	08 95       	ret

000015ac <__fp_nan>:
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	80 ec       	ldi	r24, 0xC0	; 192
    15b0:	08 95       	ret

000015b2 <__fp_pscA>:
    15b2:	00 24       	eor	r0, r0
    15b4:	0a 94       	dec	r0
    15b6:	16 16       	cp	r1, r22
    15b8:	17 06       	cpc	r1, r23
    15ba:	18 06       	cpc	r1, r24
    15bc:	09 06       	cpc	r0, r25
    15be:	08 95       	ret

000015c0 <__fp_pscB>:
    15c0:	00 24       	eor	r0, r0
    15c2:	0a 94       	dec	r0
    15c4:	12 16       	cp	r1, r18
    15c6:	13 06       	cpc	r1, r19
    15c8:	14 06       	cpc	r1, r20
    15ca:	05 06       	cpc	r0, r21
    15cc:	08 95       	ret

000015ce <__fp_round>:
    15ce:	09 2e       	mov	r0, r25
    15d0:	03 94       	inc	r0
    15d2:	00 0c       	add	r0, r0
    15d4:	11 f4       	brne	.+4      	; 0x15da <__fp_round+0xc>
    15d6:	88 23       	and	r24, r24
    15d8:	52 f0       	brmi	.+20     	; 0x15ee <__fp_round+0x20>
    15da:	bb 0f       	add	r27, r27
    15dc:	40 f4       	brcc	.+16     	; 0x15ee <__fp_round+0x20>
    15de:	bf 2b       	or	r27, r31
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <__fp_round+0x18>
    15e2:	60 ff       	sbrs	r22, 0
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <__fp_round+0x20>
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	08 95       	ret

000015f0 <__fp_split3>:
    15f0:	57 fd       	sbrc	r21, 7
    15f2:	90 58       	subi	r25, 0x80	; 128
    15f4:	44 0f       	add	r20, r20
    15f6:	55 1f       	adc	r21, r21
    15f8:	59 f0       	breq	.+22     	; 0x1610 <__fp_splitA+0x10>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	71 f0       	breq	.+28     	; 0x161a <__fp_splitA+0x1a>
    15fe:	47 95       	ror	r20

00001600 <__fp_splitA>:
    1600:	88 0f       	add	r24, r24
    1602:	97 fb       	bst	r25, 7
    1604:	99 1f       	adc	r25, r25
    1606:	61 f0       	breq	.+24     	; 0x1620 <__fp_splitA+0x20>
    1608:	9f 3f       	cpi	r25, 0xFF	; 255
    160a:	79 f0       	breq	.+30     	; 0x162a <__fp_splitA+0x2a>
    160c:	87 95       	ror	r24
    160e:	08 95       	ret
    1610:	12 16       	cp	r1, r18
    1612:	13 06       	cpc	r1, r19
    1614:	14 06       	cpc	r1, r20
    1616:	55 1f       	adc	r21, r21
    1618:	f2 cf       	rjmp	.-28     	; 0x15fe <__fp_split3+0xe>
    161a:	46 95       	lsr	r20
    161c:	f1 df       	rcall	.-30     	; 0x1600 <__fp_splitA>
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <__fp_splitA+0x30>
    1620:	16 16       	cp	r1, r22
    1622:	17 06       	cpc	r1, r23
    1624:	18 06       	cpc	r1, r24
    1626:	99 1f       	adc	r25, r25
    1628:	f1 cf       	rjmp	.-30     	; 0x160c <__fp_splitA+0xc>
    162a:	86 95       	lsr	r24
    162c:	71 05       	cpc	r23, r1
    162e:	61 05       	cpc	r22, r1
    1630:	08 94       	sec
    1632:	08 95       	ret

00001634 <__fp_zero>:
    1634:	e8 94       	clt

00001636 <__fp_szero>:
    1636:	bb 27       	eor	r27, r27
    1638:	66 27       	eor	r22, r22
    163a:	77 27       	eor	r23, r23
    163c:	cb 01       	movw	r24, r22
    163e:	97 f9       	bld	r25, 7
    1640:	08 95       	ret

00001642 <__gesf2>:
    1642:	8a df       	rcall	.-236    	; 0x1558 <__fp_cmp>
    1644:	08 f4       	brcc	.+2      	; 0x1648 <__gesf2+0x6>
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	08 95       	ret

0000164a <__mulsf3>:
    164a:	0b d0       	rcall	.+22     	; 0x1662 <__mulsf3x>
    164c:	c0 cf       	rjmp	.-128    	; 0x15ce <__fp_round>
    164e:	b1 df       	rcall	.-158    	; 0x15b2 <__fp_pscA>
    1650:	28 f0       	brcs	.+10     	; 0x165c <__mulsf3+0x12>
    1652:	b6 df       	rcall	.-148    	; 0x15c0 <__fp_pscB>
    1654:	18 f0       	brcs	.+6      	; 0x165c <__mulsf3+0x12>
    1656:	95 23       	and	r25, r21
    1658:	09 f0       	breq	.+2      	; 0x165c <__mulsf3+0x12>
    165a:	a2 cf       	rjmp	.-188    	; 0x15a0 <__fp_inf>
    165c:	a7 cf       	rjmp	.-178    	; 0x15ac <__fp_nan>
    165e:	11 24       	eor	r1, r1
    1660:	ea cf       	rjmp	.-44     	; 0x1636 <__fp_szero>

00001662 <__mulsf3x>:
    1662:	c6 df       	rcall	.-116    	; 0x15f0 <__fp_split3>
    1664:	a0 f3       	brcs	.-24     	; 0x164e <__mulsf3+0x4>

00001666 <__mulsf3_pse>:
    1666:	95 9f       	mul	r25, r21
    1668:	d1 f3       	breq	.-12     	; 0x165e <__mulsf3+0x14>
    166a:	95 0f       	add	r25, r21
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	55 1f       	adc	r21, r21
    1670:	62 9f       	mul	r22, r18
    1672:	f0 01       	movw	r30, r0
    1674:	72 9f       	mul	r23, r18
    1676:	bb 27       	eor	r27, r27
    1678:	f0 0d       	add	r31, r0
    167a:	b1 1d       	adc	r27, r1
    167c:	63 9f       	mul	r22, r19
    167e:	aa 27       	eor	r26, r26
    1680:	f0 0d       	add	r31, r0
    1682:	b1 1d       	adc	r27, r1
    1684:	aa 1f       	adc	r26, r26
    1686:	64 9f       	mul	r22, r20
    1688:	66 27       	eor	r22, r22
    168a:	b0 0d       	add	r27, r0
    168c:	a1 1d       	adc	r26, r1
    168e:	66 1f       	adc	r22, r22
    1690:	82 9f       	mul	r24, r18
    1692:	22 27       	eor	r18, r18
    1694:	b0 0d       	add	r27, r0
    1696:	a1 1d       	adc	r26, r1
    1698:	62 1f       	adc	r22, r18
    169a:	73 9f       	mul	r23, r19
    169c:	b0 0d       	add	r27, r0
    169e:	a1 1d       	adc	r26, r1
    16a0:	62 1f       	adc	r22, r18
    16a2:	83 9f       	mul	r24, r19
    16a4:	a0 0d       	add	r26, r0
    16a6:	61 1d       	adc	r22, r1
    16a8:	22 1f       	adc	r18, r18
    16aa:	74 9f       	mul	r23, r20
    16ac:	33 27       	eor	r19, r19
    16ae:	a0 0d       	add	r26, r0
    16b0:	61 1d       	adc	r22, r1
    16b2:	23 1f       	adc	r18, r19
    16b4:	84 9f       	mul	r24, r20
    16b6:	60 0d       	add	r22, r0
    16b8:	21 1d       	adc	r18, r1
    16ba:	82 2f       	mov	r24, r18
    16bc:	76 2f       	mov	r23, r22
    16be:	6a 2f       	mov	r22, r26
    16c0:	11 24       	eor	r1, r1
    16c2:	9f 57       	subi	r25, 0x7F	; 127
    16c4:	50 40       	sbci	r21, 0x00	; 0
    16c6:	8a f0       	brmi	.+34     	; 0x16ea <__mulsf3_pse+0x84>
    16c8:	e1 f0       	breq	.+56     	; 0x1702 <__mulsf3_pse+0x9c>
    16ca:	88 23       	and	r24, r24
    16cc:	4a f0       	brmi	.+18     	; 0x16e0 <__mulsf3_pse+0x7a>
    16ce:	ee 0f       	add	r30, r30
    16d0:	ff 1f       	adc	r31, r31
    16d2:	bb 1f       	adc	r27, r27
    16d4:	66 1f       	adc	r22, r22
    16d6:	77 1f       	adc	r23, r23
    16d8:	88 1f       	adc	r24, r24
    16da:	91 50       	subi	r25, 0x01	; 1
    16dc:	50 40       	sbci	r21, 0x00	; 0
    16de:	a9 f7       	brne	.-22     	; 0x16ca <__mulsf3_pse+0x64>
    16e0:	9e 3f       	cpi	r25, 0xFE	; 254
    16e2:	51 05       	cpc	r21, r1
    16e4:	70 f0       	brcs	.+28     	; 0x1702 <__mulsf3_pse+0x9c>
    16e6:	5c cf       	rjmp	.-328    	; 0x15a0 <__fp_inf>
    16e8:	a6 cf       	rjmp	.-180    	; 0x1636 <__fp_szero>
    16ea:	5f 3f       	cpi	r21, 0xFF	; 255
    16ec:	ec f3       	brlt	.-6      	; 0x16e8 <__mulsf3_pse+0x82>
    16ee:	98 3e       	cpi	r25, 0xE8	; 232
    16f0:	dc f3       	brlt	.-10     	; 0x16e8 <__mulsf3_pse+0x82>
    16f2:	86 95       	lsr	r24
    16f4:	77 95       	ror	r23
    16f6:	67 95       	ror	r22
    16f8:	b7 95       	ror	r27
    16fa:	f7 95       	ror	r31
    16fc:	e7 95       	ror	r30
    16fe:	9f 5f       	subi	r25, 0xFF	; 255
    1700:	c1 f7       	brne	.-16     	; 0x16f2 <__mulsf3_pse+0x8c>
    1702:	fe 2b       	or	r31, r30
    1704:	88 0f       	add	r24, r24
    1706:	91 1d       	adc	r25, r1
    1708:	96 95       	lsr	r25
    170a:	87 95       	ror	r24
    170c:	97 f9       	bld	r25, 7
    170e:	08 95       	ret

00001710 <__divmodhi4>:
    1710:	97 fb       	bst	r25, 7
    1712:	09 2e       	mov	r0, r25
    1714:	07 26       	eor	r0, r23
    1716:	0a d0       	rcall	.+20     	; 0x172c <__divmodhi4_neg1>
    1718:	77 fd       	sbrc	r23, 7
    171a:	04 d0       	rcall	.+8      	; 0x1724 <__divmodhi4_neg2>
    171c:	0c d0       	rcall	.+24     	; 0x1736 <__udivmodhi4>
    171e:	06 d0       	rcall	.+12     	; 0x172c <__divmodhi4_neg1>
    1720:	00 20       	and	r0, r0
    1722:	1a f4       	brpl	.+6      	; 0x172a <__divmodhi4_exit>

00001724 <__divmodhi4_neg2>:
    1724:	70 95       	com	r23
    1726:	61 95       	neg	r22
    1728:	7f 4f       	sbci	r23, 0xFF	; 255

0000172a <__divmodhi4_exit>:
    172a:	08 95       	ret

0000172c <__divmodhi4_neg1>:
    172c:	f6 f7       	brtc	.-4      	; 0x172a <__divmodhi4_exit>
    172e:	90 95       	com	r25
    1730:	81 95       	neg	r24
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	08 95       	ret

00001736 <__udivmodhi4>:
    1736:	aa 1b       	sub	r26, r26
    1738:	bb 1b       	sub	r27, r27
    173a:	51 e1       	ldi	r21, 0x11	; 17
    173c:	07 c0       	rjmp	.+14     	; 0x174c <__udivmodhi4_ep>

0000173e <__udivmodhi4_loop>:
    173e:	aa 1f       	adc	r26, r26
    1740:	bb 1f       	adc	r27, r27
    1742:	a6 17       	cp	r26, r22
    1744:	b7 07       	cpc	r27, r23
    1746:	10 f0       	brcs	.+4      	; 0x174c <__udivmodhi4_ep>
    1748:	a6 1b       	sub	r26, r22
    174a:	b7 0b       	sbc	r27, r23

0000174c <__udivmodhi4_ep>:
    174c:	88 1f       	adc	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	5a 95       	dec	r21
    1752:	a9 f7       	brne	.-22     	; 0x173e <__udivmodhi4_loop>
    1754:	80 95       	com	r24
    1756:	90 95       	com	r25
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	08 95       	ret

0000175e <__eerd_byte_m16>:
    175e:	e1 99       	sbic	0x1c, 1	; 28
    1760:	fe cf       	rjmp	.-4      	; 0x175e <__eerd_byte_m16>
    1762:	9f bb       	out	0x1f, r25	; 31
    1764:	8e bb       	out	0x1e, r24	; 30
    1766:	e0 9a       	sbi	0x1c, 0	; 28
    1768:	99 27       	eor	r25, r25
    176a:	8d b3       	in	r24, 0x1d	; 29
    176c:	08 95       	ret

0000176e <__eewr_byte_m16>:
    176e:	26 2f       	mov	r18, r22

00001770 <__eewr_r18_m16>:
    1770:	e1 99       	sbic	0x1c, 1	; 28
    1772:	fe cf       	rjmp	.-4      	; 0x1770 <__eewr_r18_m16>
    1774:	9f bb       	out	0x1f, r25	; 31
    1776:	8e bb       	out	0x1e, r24	; 30
    1778:	2d bb       	out	0x1d, r18	; 29
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	e2 9a       	sbi	0x1c, 2	; 28
    1780:	e1 9a       	sbi	0x1c, 1	; 28
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	08 95       	ret

00001788 <_exit>:
    1788:	f8 94       	cli

0000178a <__stop_program>:
    178a:	ff cf       	rjmp	.-2      	; 0x178a <__stop_program>
